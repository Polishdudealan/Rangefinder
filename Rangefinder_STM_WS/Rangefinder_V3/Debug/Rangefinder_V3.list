
Rangefinder_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a4  0800cc18  0800cc18  0001cc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3bc  0800e3bc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3bc  0800e3bc  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3c4  0800e3c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3c4  0800e3c4  0001e3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3c8  0800e3c8  0001e3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005124  200001ec  0800e5b8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005310  0800e5b8  00025310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d610  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004188  00000000  00000000  0003d86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  000419f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ff  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000055f7  00000000  00000000  0004458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c09d  00000000  00000000  00049b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d2a2  00000000  00000000  00065c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007900  00000000  00000000  00102ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc00 	.word	0x0800cc00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800cc00 	.word	0x0800cc00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <HAL_UART_RxCpltCallback>:


#include "lidar.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	memcpy(received_data, UART6_rxBuffer, UART_buffer_size);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2c>)
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_UART_RxCpltCallback+0x30>)
 8000fa0:	6810      	ldr	r0, [r2, #0]
 8000fa2:	6851      	ldr	r1, [r2, #4]
 8000fa4:	6018      	str	r0, [r3, #0]
 8000fa6:	6059      	str	r1, [r3, #4]
 8000fa8:	7a12      	ldrb	r2, [r2, #8]
 8000faa:	721a      	strb	r2, [r3, #8]
	osStatus_t ret = osSemaphoreRelease(UART6_Handle);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_UART_RxCpltCallback+0x34>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fcbf 	bl	8006934 <osSemaphoreRelease>
 8000fb6:	60f8      	str	r0, [r7, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000378 	.word	0x20000378
 8000fc4:	2000036c 	.word	0x2000036c
 8000fc8:	2000035c 	.word	0x2000035c

08000fcc <processData>:

int processData(uint8_t num_bytes_received,
				uint16_t *distance, uint16_t *strength){
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
	int checksum_ok = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	uint16_t message_sum = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	83fb      	strh	r3, [r7, #30]
	for(int i = 0; i < num_bytes_received; i++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e00a      	b.n	8000ffe <processData+0x32>
	  message_sum += received_data[i];
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <processData+0xb4>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	8bfb      	ldrh	r3, [r7, #30]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	83fb      	strh	r3, [r7, #30]
	for(int i = 0; i < num_bytes_received; i++){
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf0      	blt.n	8000fe8 <processData+0x1c>
	}
	checksum = received_data[num_bytes_received];
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <processData+0xb4>)
 800100a:	5cd2      	ldrb	r2, [r2, r3]
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <processData+0xb8>)
 800100e:	701a      	strb	r2, [r3, #0]
	// Checksum is lower 8 bits of message sum
	checksum_ok = ((message_sum & 0xFF) == checksum) ? 1 : 0;
 8001010:	8bfb      	ldrh	r3, [r7, #30]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <processData+0xb8>)
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4293      	cmp	r3, r2
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	617b      	str	r3, [r7, #20]

	// Process message if header ok and checksum ok
	if((received_data[0] << 8 | received_data[1]) == frameheader && checksum_ok){
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <processData+0xb4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <processData+0xb4>)
 800102c:	7852      	ldrb	r2, [r2, #1]
 800102e:	4313      	orrs	r3, r2
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <processData+0xbc>)
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	4293      	cmp	r3, r2
 8001036:	d11c      	bne.n	8001072 <processData+0xa6>
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d019      	beq.n	8001072 <processData+0xa6>
		*distance = (uint16_t)(received_data[3] << 8 | received_data[2]);
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <processData+0xb4>)
 8001040:	78db      	ldrb	r3, [r3, #3]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <processData+0xb4>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	801a      	strh	r2, [r3, #0]
		*strength = (uint16_t)(received_data[5] << 8 | received_data[4]);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <processData+0xb4>)
 8001058:	795b      	ldrb	r3, [r3, #5]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <processData+0xb4>)
 8001060:	791b      	ldrb	r3, [r3, #4]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	801a      	strh	r2, [r3, #0]
		return 1;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <processData+0xa8>
	}
	else{
		return 0;
 8001072:	2300      	movs	r3, #0
	}
}
 8001074:	4618      	mov	r0, r3
 8001076:	3724      	adds	r7, #36	; 0x24
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000378 	.word	0x20000378
 8001084:	20000208 	.word	0x20000208
 8001088:	20000000 	.word	0x20000000

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f001 faaa 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f86a 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 f9a8 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 f986 	bl	80013f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80010e8:	f000 f8cc 	bl	8001284 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80010ec:	f000 f958 	bl	80013a0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80010f0:	f000 f8fe 	bl	80012f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize NVIC Priority group
  // Required for proper priority control between tasks and interrupts
  // See configASSERT in port.c for more info
  NVIC_SetPriorityGrouping(0);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ffc9 	bl	800108c <__NVIC_SetPriorityGrouping>

  // Initialize OLED Display
  ssd1306_Init();
 80010fa:	f000 ffdd 	bl	80020b8 <ssd1306_Init>
  ssd1306_Fill(Black);
 80010fe:	2000      	movs	r0, #0
 8001100:	f001 f844 	bl	800218c <ssd1306_Fill>
  ssd1306_WriteString("Rangefinder V3.0", Font_6x8, White);
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <main+0xa8>)
 8001106:	2301      	movs	r3, #1
 8001108:	ca06      	ldmia	r2, {r1, r2}
 800110a:	481d      	ldr	r0, [pc, #116]	; (8001180 <main+0xac>)
 800110c:	f001 f966 	bl	80023dc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001110:	f001 f860 	bl	80021d4 <ssd1306_UpdateScreen>

  // Set up PWM for laser
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001114:	2104      	movs	r1, #4
 8001116:	481b      	ldr	r0, [pc, #108]	; (8001184 <main+0xb0>)
 8001118:	f003 faaa 	bl	8004670 <HAL_TIM_PWM_Start>
  // 50% duty cycle with a prescaled clock freq of 10KHz and period 1ms
  TIM2->CCR2 = 99;
 800111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001120:	2263      	movs	r2, #99	; 0x63
 8001122:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001124:	f005 f940 	bl	80063a8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  // Protects access to Oled screen
  OledLock = osMutexNew(NULL);
 8001128:	2000      	movs	r0, #0
 800112a:	f005 fa19 	bl	8006560 <osMutexNew>
 800112e:	4603      	mov	r3, r0
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <main+0xb4>)
 8001132:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Graph_Handle = osSemaphoreNew(1U, 0U, NULL);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2001      	movs	r0, #1
 800113a:	f005 fb1f 	bl	800677c <osSemaphoreNew>
 800113e:	4603      	mov	r3, r0
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <main+0xb8>)
 8001142:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LidarTask */
  LidarTaskHandle = osThreadNew(StartLidarTask, NULL, &LidarTask_attributes);
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <main+0xbc>)
 8001146:	2100      	movs	r1, #0
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <main+0xc0>)
 800114a:	f005 f977 	bl	800643c <osThreadNew>
 800114e:	4603      	mov	r3, r0
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <main+0xc4>)
 8001152:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <main+0xc8>)
 8001156:	2100      	movs	r1, #0
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <main+0xcc>)
 800115a:	f005 f96f 	bl	800643c <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <main+0xd0>)
 8001162:	6013      	str	r3, [r2, #0]

  /* creation of GraphTask */
  GraphTaskHandle = osThreadNew(StartGraphTask, NULL, &GraphTask_attributes);
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <main+0xd4>)
 8001166:	2100      	movs	r1, #0
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <main+0xd8>)
 800116a:	f005 f967 	bl	800643c <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <main+0xdc>)
 8001172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001174:	f005 f93c 	bl	80063f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001178:	e7fe      	b.n	8001178 <main+0xa4>
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	0800cc3c 	.word	0x0800cc3c
 8001184:	20000264 	.word	0x20000264
 8001188:	20000364 	.word	0x20000364
 800118c:	20000360 	.word	0x20000360
 8001190:	0800cc74 	.word	0x0800cc74
 8001194:	08001505 	.word	0x08001505
 8001198:	20000350 	.word	0x20000350
 800119c:	0800cc98 	.word	0x0800cc98
 80011a0:	08001651 	.word	0x08001651
 80011a4:	20000354 	.word	0x20000354
 80011a8:	0800ccbc 	.word	0x0800ccbc
 80011ac:	08001695 	.word	0x08001695
 80011b0:	20000358 	.word	0x20000358

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	; 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f009 fb49 	bl	800a85a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <SystemClock_Config+0xc8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <SystemClock_Config+0xc8>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <SystemClock_Config+0xc8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <SystemClock_Config+0xcc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <SystemClock_Config+0xcc>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <SystemClock_Config+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f002 f8e1 	bl	8003400 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001244:	f000 fa9e 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fb44 	bl	80038f0 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800126e:	f000 fa89 	bl	8001784 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_SPI1_Init+0x64>)
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <MX_SPI1_Init+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012b8:	2218      	movs	r2, #24
 80012ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_SPI1_Init+0x64>)
 80012d6:	f002 fd1d 	bl	8003d14 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e0:	f000 fa50 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000020c 	.word	0x2000020c
 80012ec:	40013000 	.word	0x40013000

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_TIM2_Init+0xac>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3199;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_TIM2_Init+0xac>)
 800131c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xac>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xac>)
 800132a:	2263      	movs	r2, #99	; 0x63
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <MX_TIM2_Init+0xac>)
 800133c:	f003 f948 	bl	80045d0 <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001346:	f000 fa1d 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <MX_TIM2_Init+0xac>)
 800135a:	f003 fe5d 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001364:	f000 fa0e 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2204      	movs	r2, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM2_Init+0xac>)
 8001380:	f003 fb2e 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800138a:	f000 f9fb 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM2_Init+0xac>)
 8001390:	f000 fba0 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000264 	.word	0x20000264

080013a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART6_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d8:	f003 fea0 	bl	800511c <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f9cf 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002ac 	.word	0x200002ac
 80013f0:	40011400 	.word	0x40011400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <MX_DMA_Init+0x3c>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2105      	movs	r1, #5
 800141a:	2039      	movs	r0, #57	; 0x39
 800141c:	f001 fa26 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001420:	2039      	movs	r0, #57	; 0x39
 8001422:	f001 fa3f 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <MX_GPIO_Init+0xc4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_GPIO_Init+0xc4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <MX_GPIO_Init+0xc4>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_GPIO_Init+0xc4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_CS_Pin|SPI_RST_Pin|OLED_DC_Pin|OLED_DC_new_Pin
 800149e:	2200      	movs	r2, #0
 80014a0:	f64e 010c 	movw	r1, #59404	; 0xe80c
 80014a4:	4815      	ldr	r0, [pc, #84]	; (80014fc <MX_GPIO_Init+0xc8>)
 80014a6:	f001 ff91 	bl	80033cc <HAL_GPIO_WritePin>
                          |OLED_RST_new_Pin|Task_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Task_2_GPIO_Port, Task_2_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2104      	movs	r1, #4
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <MX_GPIO_Init+0xcc>)
 80014b0:	f001 ff8c 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin SPI_RST_Pin OLED_DC_Pin OLED_DC_new_Pin
                           OLED_RST_new_Pin Task_1_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_RST_Pin|OLED_DC_Pin|OLED_DC_new_Pin
 80014b4:	f64e 030c 	movw	r3, #59404	; 0xe80c
 80014b8:	60fb      	str	r3, [r7, #12]
                          |OLED_RST_new_Pin|Task_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <MX_GPIO_Init+0xc8>)
 80014ce:	f001 fdf9 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Task_2_Pin */
  GPIO_InitStruct.Pin = Task_2_Pin;
 80014d2:	2304      	movs	r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Task_2_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0xcc>)
 80014ea:	f001 fdeb 	bl	80030c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00

08001504 <StartLidarTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLidarTask */
void StartLidarTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  TickType_t xLastWakeTime;
  // How often to run, ie. every 10 ms
  const TickType_t xFrequency = 100;
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  xLastWakeTime = xTaskGetTickCount();
 8001510:	f006 ff52 	bl	80083b8 <xTaskGetTickCount>
 8001514:	4603      	mov	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]

  // Create binary semaphore
  UART6_Handle = osSemaphoreNew(1U, 0U, NULL);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f005 f92d 	bl	800677c <osSemaphoreNew>
 8001522:	4603      	mov	r3, r0
 8001524:	4a41      	ldr	r2, [pc, #260]	; (800162c <StartLidarTask+0x128>)
 8001526:	6013      	str	r3, [r2, #0]

  // Start DMA
  HAL_UART_Receive_DMA(&huart6, UART6_rxBuffer, UART_buffer_size);
 8001528:	2209      	movs	r2, #9
 800152a:	4941      	ldr	r1, [pc, #260]	; (8001630 <StartLidarTask+0x12c>)
 800152c:	4841      	ldr	r0, [pc, #260]	; (8001634 <StartLidarTask+0x130>)
 800152e:	f003 fe42 	bl	80051b6 <HAL_UART_Receive_DMA>

  // Lidar Data
  uint16_t distance = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	82fb      	strh	r3, [r7, #22]
  // Distance value unreliable when strength = 0xFFFF or < 140 as 14 <-?
  uint16_t strength = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	82bb      	strh	r3, [r7, #20]
  uint16_t MAX_DISTANCE_M = 9.0;
 800153a:	2309      	movs	r3, #9
 800153c:	857b      	strh	r3, [r7, #42]	; 0x2a

  /* Infinite loop */
  for(;;)
  {
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001544:	4618      	mov	r0, r3
 8001546:	f006 fd9d 	bl	8008084 <vTaskDelayUntil>

	// Wait for semaphore from ISR
	osStatus_t acq_ret = osSemaphoreAcquire(UART6_Handle, osWaitForever);
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <StartLidarTask+0x128>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f04f 31ff 	mov.w	r1, #4294967295
 8001552:	4618      	mov	r0, r3
 8001554:	f005 f99c 	bl	8006890 <osSemaphoreAcquire>
 8001558:	6278      	str	r0, [r7, #36]	; 0x24
	if(acq_ret == osOK){
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <StartLidarTask+0x3a>

		// Verify and read Lidar data
		if(processData(8, &distance, &strength)){
 8001560:	f107 0214 	add.w	r2, r7, #20
 8001564:	f107 0316 	add.w	r3, r7, #22
 8001568:	4619      	mov	r1, r3
 800156a:	2008      	movs	r0, #8
 800156c:	f7ff fd2e 	bl	8000fcc <processData>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0e3      	beq.n	800153e <StartLidarTask+0x3a>
			distance_m = (distance / 100.0);
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffdb 	bl	8000534 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <StartLidarTask+0x134>)
 8001584:	f7ff f96a 	bl	800085c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb32 	bl	8000bf8 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <StartLidarTask+0x138>)
 8001598:	6013      	str	r3, [r2, #0]
			distance_m = distance_m > MAX_DISTANCE_M ? 8.0 : distance_m;
 800159a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <StartLidarTask+0x138>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d502      	bpl.n	80015ba <StartLidarTask+0xb6>
 80015b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80015b8:	e001      	b.n	80015be <StartLidarTask+0xba>
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <StartLidarTask+0x138>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <StartLidarTask+0x138>)
 80015c0:	6013      	str	r3, [r2, #0]
			char data[8];
			int retVal = snprintf(data, sizeof(data), "%.2f m", distance_m);
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <StartLidarTask+0x138>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffc6 	bl	8000558 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	f107 000c 	add.w	r0, r7, #12
 80015d4:	e9cd 2300 	strd	r2, r3, [sp]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <StartLidarTask+0x13c>)
 80015da:	2108      	movs	r1, #8
 80015dc:	f009 f8c6 	bl	800a76c <sniprintf>
 80015e0:	6238      	str	r0, [r7, #32]

			if(retVal > 0 && retVal <= sizeof(data)){
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	ddaa      	ble.n	800153e <StartLidarTask+0x3a>
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d8a7      	bhi.n	800153e <StartLidarTask+0x3a>
				osMutexAcquire(OledLock, osWaitForever);
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <StartLidarTask+0x140>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 31ff 	mov.w	r1, #4294967295
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 f838 	bl	800666c <osMutexAcquire>
				// write data to OLED
				ssd1306_SetCursor(32, 14);
 80015fc:	210e      	movs	r1, #14
 80015fe:	2020      	movs	r0, #32
 8001600:	f000 ff12 	bl	8002428 <ssd1306_SetCursor>
				ssd1306_WriteString(data, Font_11x18, White);
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <StartLidarTask+0x144>)
 8001606:	f107 000c 	add.w	r0, r7, #12
 800160a:	2301      	movs	r3, #1
 800160c:	ca06      	ldmia	r2, {r1, r2}
 800160e:	f000 fee5 	bl	80023dc <ssd1306_WriteString>
				osMutexRelease(OledLock);
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <StartLidarTask+0x140>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f005 f873 	bl	8006702 <osMutexRelease>

				// Allow graph drawing
				osStatus_t ret = osSemaphoreRelease(Graph_Handle);
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <StartLidarTask+0x148>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f005 f987 	bl	8006934 <osSemaphoreRelease>
 8001626:	61f8      	str	r0, [r7, #28]
  {
 8001628:	e789      	b.n	800153e <StartLidarTask+0x3a>
 800162a:	bf00      	nop
 800162c:	2000035c 	.word	0x2000035c
 8001630:	2000036c 	.word	0x2000036c
 8001634:	200002ac 	.word	0x200002ac
 8001638:	40590000 	.word	0x40590000
 800163c:	20000368 	.word	0x20000368
 8001640:	0800cc50 	.word	0x0800cc50
 8001644:	20000364 	.word	0x20000364
 8001648:	20000010 	.word	0x20000010
 800164c:	20000360 	.word	0x20000360

08001650 <StartOledTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
  TickType_t xLastWakeTime;
  // How often to run, ie. every 10 ms
  const TickType_t xFrequency = 100;
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 800165c:	f006 feac 	bl	80083b8 <xTaskGetTickCount>
 8001660:	4603      	mov	r3, r0
 8001662:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	f006 fd0a 	bl	8008084 <vTaskDelayUntil>

	osMutexAcquire(OledLock, osWaitForever);
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <StartOledTask+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fff7 	bl	800666c <osMutexAcquire>
	ssd1306_UpdateScreen();
 800167e:	f000 fda9 	bl	80021d4 <ssd1306_UpdateScreen>
	osMutexRelease(OledLock);
 8001682:	4b03      	ldr	r3, [pc, #12]	; (8001690 <StartOledTask+0x40>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f83b 	bl	8006702 <osMutexRelease>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800168c:	e7ea      	b.n	8001664 <StartOledTask+0x14>
 800168e:	bf00      	nop
 8001690:	20000364 	.word	0x20000364

08001694 <StartGraphTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGraphTask */
void StartGraphTask(void *argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b098      	sub	sp, #96	; 0x60
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGraphTask */
  TickType_t xLastWakeTime;
  // How often to run, ie. every 10 ms
  const TickType_t xFrequency = 100;
 800169c:	2364      	movs	r3, #100	; 0x64
 800169e:	65fb      	str	r3, [r7, #92]	; 0x5c
  xLastWakeTime = xTaskGetTickCount();
 80016a0:	f006 fe8a 	bl	80083b8 <xTaskGetTickCount>
 80016a4:	4603      	mov	r3, r0
 80016a6:	65bb      	str	r3, [r7, #88]	; 0x58

  // Create buffer and plot
  uint8_t distances_buffer[MAX_PLOTTED_VALUES] = {0};
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	2238      	movs	r2, #56	; 0x38
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f009 f8d0 	bl	800a85a <memset>
  buffer_t buf = {distances_buffer, 0, 0, 60};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	233c      	movs	r3, #60	; 0x3c
 80016ca:	61bb      	str	r3, [r7, #24]
  // Define a box to hold our plot
  // (34, 62) origin, 24 x 60 (row x col) pixels
  plot_t plot = {34, 60, 60, 24};
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <StartGraphTask+0xc0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60bb      	str	r3, [r7, #8]

  draw_axes(&plot);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f8c4 	bl	8001864 <draw_axes>
//  Graph_Handle = osSemaphoreNew(1U, 0U, NULL);

  /* Infinite loop */
  for(;;)
  {
	    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80016dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fcce 	bl	8008084 <vTaskDelayUntil>

		osSemaphoreAcquire(Graph_Handle, osWaitForever);
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <StartGraphTask+0xc4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 f8cd 	bl	8006890 <osSemaphoreAcquire>
		// Get new data in when it's available
		// If full, pop value and try again
		if(pushback(&buf, float_to_pixel(distance_m)) == 0){
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <StartGraphTask+0xc8>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f000 f88f 	bl	8001822 <float_to_pixel>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f85e 	bl	80017d0 <pushback>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d113      	bne.n	8001742 <StartGraphTask+0xae>
//			clear_graph(&plot);
			pop(&buf);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f835 	bl	800178e <pop>
			pushback(&buf, float_to_pixel(distance_m));
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <StartGraphTask+0xc8>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f000 f878 	bl	8001822 <float_to_pixel>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f847 	bl	80017d0 <pushback>
		}


//		osMutexAcquire(OledLock, osWaitForever);
		calculate_graph(&buf, &plot);
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f8dd 	bl	800190c <calculate_graph>
	    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001752:	e7c3      	b.n	80016dc <StartGraphTask+0x48>
 8001754:	0800cc58 	.word	0x0800cc58
 8001758:	20000360 	.word	0x20000360
 800175c:	20000368 	.word	0x20000368

08001760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001772:	f000 ff7f 	bl	8002674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40000c00 	.word	0x40000c00

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>

0800178e <pop>:
#include "cmsis_os.h"
#include "ssd1306.h"

extern osMutexId_t OledLock;

int pop(buffer_t *buf/*, uint8_t *data*/){
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	int next;

	// No data
	if (buf->head == buf->tail)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d101      	bne.n	80017a6 <pop+0x18>
		return 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e00e      	b.n	80017c4 <pop+0x36>

	next = buf->tail + 1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
	if(next >= buf->maxlen)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	db01      	blt.n	80017bc <pop+0x2e>
		next = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]

//	*data = buf->distances[buf->tail];
	buf->tail = next;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	609a      	str	r2, [r3, #8]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <pushback>:

int pushback(buffer_t *buf, uint8_t data){
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
	int next;

	// Head pts to next after this write
	next = buf->head + 1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
	if(next >= buf->maxlen)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	db01      	blt.n	80017f2 <pushback+0x22>
		next = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]

	// Buffer full
	if(next == buf->tail)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d101      	bne.n	8001800 <pushback+0x30>
		return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e00a      	b.n	8001816 <pushback+0x46>

	buf->distances[buf->head] = data;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6852      	ldr	r2, [r2, #4]
 8001808:	4413      	add	r3, r2
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	701a      	strb	r2, [r3, #0]
	buf->head = next;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <float_to_pixel>:

// Convert distance from float to pixel value
// Float should range from 0.0 to 8.0
uint8_t float_to_pixel(float val){
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	ed87 0a01 	vstr	s0, [r7, #4]
	// Multiply and ceil number
	return (uint8_t)ceil(val * 3);
 800182c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001830:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	ec43 2b10 	vmov	d0, r2, r3
 8001848:	f00b f95a 	bl	800cb00 <ceil>
 800184c:	ec53 2b10 	vmov	r2, r3, d0
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f9b0 	bl	8000bb8 <__aeabi_d2uiz>
 8001858:	4603      	mov	r3, r0
 800185a:	b2db      	uxtb	r3, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <draw_axes>:


void draw_axes(plot_t *plot){
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
	// x-axis
	ssd1306_Line(plot->oled_plot_x - 1, plot->oled_plot_y + 2,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	b2d8      	uxtb	r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	3302      	adds	r3, #2
 800187a:	b2d9      	uxtb	r1, r3
			plot->oled_plot_x + plot->x_axis_length,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	789b      	ldrb	r3, [r3, #2]
	ssd1306_Line(plot->oled_plot_x - 1, plot->oled_plot_y + 2,
 8001884:	4413      	add	r3, r2
 8001886:	b2da      	uxtb	r2, r3
			plot->oled_plot_y + 2,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	785b      	ldrb	r3, [r3, #1]
	ssd1306_Line(plot->oled_plot_x - 1, plot->oled_plot_y + 2,
 800188c:	3302      	adds	r3, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2401      	movs	r4, #1
 8001892:	9400      	str	r4, [sp, #0]
 8001894:	f000 fde0 	bl	8002458 <ssd1306_Line>
			White);

	// y-axis
	ssd1306_Line(plot->oled_plot_x - 2, plot->oled_plot_y + 1,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	3b02      	subs	r3, #2
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2d9      	uxtb	r1, r3
				plot->oled_plot_x - 2,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
	ssd1306_Line(plot->oled_plot_x - 2, plot->oled_plot_y + 1,
 80018ac:	3b02      	subs	r3, #2
 80018ae:	b2dc      	uxtb	r4, r3
				plot->oled_plot_y - plot->y_axis_length,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	785a      	ldrb	r2, [r3, #1]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78db      	ldrb	r3, [r3, #3]
	ssd1306_Line(plot->oled_plot_x - 2, plot->oled_plot_y + 1,
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2201      	movs	r2, #1
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	4622      	mov	r2, r4
 80018c2:	f000 fdc9 	bl	8002458 <ssd1306_Line>
				White);
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}

080018ce <clear_graph>:


// Use within Oled Locks
void clear_graph(plot_t *plot){
 80018ce:	b590      	push	{r4, r7, lr}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	6078      	str	r0, [r7, #4]
	ssd1306_FillRectangle(plot->oled_plot_x, plot->oled_plot_y,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7859      	ldrb	r1, [r3, #1]
						  plot->oled_plot_x + plot->x_axis_length,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	789b      	ldrb	r3, [r3, #2]
	ssd1306_FillRectangle(plot->oled_plot_x, plot->oled_plot_y,
 80018e6:	4413      	add	r3, r2
 80018e8:	b2dc      	uxtb	r4, r3
						  plot->oled_plot_y - plot->y_axis_length - 4,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	785a      	ldrb	r2, [r3, #1]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b2db      	uxtb	r3, r3
	ssd1306_FillRectangle(plot->oled_plot_x, plot->oled_plot_y,
 80018f6:	3b04      	subs	r3, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	9200      	str	r2, [sp, #0]
 80018fe:	4622      	mov	r2, r4
 8001900:	f000 fe16 	bl	8002530 <ssd1306_FillRectangle>
						  Black);
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}

0800190c <calculate_graph>:

// Calculates and draws pixels in oled memory
int calculate_graph(buffer_t *buf, plot_t *plot){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	osMutexAcquire(OledLock, osWaitForever);
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <calculate_graph+0x70>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f04f 31ff 	mov.w	r1, #4294967295
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fea4 	bl	800666c <osMutexAcquire>

	// clears plot area
	clear_graph(plot);
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f7ff ffd2 	bl	80018ce <clear_graph>

	for(int i = 0; i < MAX_PLOTTED_VALUES; i++){
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e017      	b.n	8001960 <calculate_graph+0x54>
//		if(buf->distances[i] > 0){
		uint8_t x_coord = i + plot->oled_plot_x;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4413      	add	r3, r2
 800193a:	72fb      	strb	r3, [r7, #11]
		uint8_t y_coord = plot->oled_plot_y - buf->distances[i] ;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	785a      	ldrb	r2, [r3, #1]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	440b      	add	r3, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	72bb      	strb	r3, [r7, #10]

		ssd1306_DrawPixel(x_coord, y_coord, White);
 800194e:	7ab9      	ldrb	r1, [r7, #10]
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	2201      	movs	r2, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fc65 	bl	8002224 <ssd1306_DrawPixel>
	for(int i = 0; i < MAX_PLOTTED_VALUES; i++){
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b3b      	cmp	r3, #59	; 0x3b
 8001964:	dde4      	ble.n	8001930 <calculate_graph+0x24>
//		}
	}
	osMutexRelease(OledLock);
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <calculate_graph+0x70>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fec9 	bl	8006702 <osMutexRelease>
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000364 	.word	0x20000364

08001980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_MspInit+0x64>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <HAL_MspInit+0x64>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_MspInit+0x64>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x64>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_MspInit+0x64>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x64>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	210f      	movs	r1, #15
 80019c2:	f06f 0001 	mvn.w	r0, #1
 80019c6:	f000 ff51 	bl	800286c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2051      	movs	r0, #81	; 0x51
 80019d0:	f000 ff4c 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80019d4:	2051      	movs	r0, #81	; 0x51
 80019d6:	f000 ff65 	bl	80028a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_SPI_MspInit+0x94>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d133      	bne.n	8001a72 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_SPI_MspInit+0x98>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a42:	23a0      	movs	r3, #160	; 0xa0
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a52:	2305      	movs	r3, #5
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_SPI_MspInit+0x9c>)
 8001a5e:	f001 fb31 	bl	80030c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	2023      	movs	r0, #35	; 0x23
 8001a68:	f000 ff00 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a6c:	2023      	movs	r0, #35	; 0x23
 8001a6e:	f000 ff19 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d115      	bne.n	8001ac6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_TIM_PWM_MspInit+0x48>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_TIM_PWM_MspInit+0x48>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_TIM_PWM_MspInit+0x48>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	201c      	movs	r0, #28
 8001abc:	f000 fed6 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac0:	201c      	movs	r0, #28
 8001ac2:	f000 feef 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d11d      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b12:	2302      	movs	r3, #2
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b2e:	f001 fac9 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <HAL_UART_MspInit+0xf0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d162      	bne.n	8001c2c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_UART_MspInit+0xf4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <HAL_UART_MspInit+0xf8>)
 8001bba:	f001 fa83 	bl	80030c4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bc0:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <HAL_UART_MspInit+0x100>)
 8001bc2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bc6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001bca:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bde:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001c02:	f000 fe5d 	bl	80028c0 <HAL_DMA_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c0c:	f7ff fdba 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_UART_MspInit+0xfc>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2105      	movs	r1, #5
 8001c20:	2047      	movs	r0, #71	; 0x47
 8001c22:	f000 fe23 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c26:	2047      	movs	r0, #71	; 0x47
 8001c28:	f000 fe3c 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40011400 	.word	0x40011400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	200002f0 	.word	0x200002f0
 8001c44:	40026428 	.word	0x40026428

08001c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	; 0x38
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_InitTick+0xe4>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_InitTick+0xe4>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_InitTick+0xe4>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c74:	f107 0210 	add.w	r2, r7, #16
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f816 	bl	8003cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c8e:	f001 ffe7 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8001c92:	6378      	str	r0, [r7, #52]	; 0x34
 8001c94:	e004      	b.n	8001ca0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c96:	f001 ffe3 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_InitTick+0xe8>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	3b01      	subs	r3, #1
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_InitTick+0xec>)
 8001cb0:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <HAL_InitTick+0xf0>)
 8001cb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_InitTick+0xec>)
 8001cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cba:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_InitTick+0xec>)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_InitTick+0xec>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_InitTick+0xec>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_InitTick+0xec>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001cd4:	4817      	ldr	r0, [pc, #92]	; (8001d34 <HAL_InitTick+0xec>)
 8001cd6:	f002 fbbf 	bl	8004458 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11b      	bne.n	8001d20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001ce8:	4812      	ldr	r0, [pc, #72]	; (8001d34 <HAL_InitTick+0xec>)
 8001cea:	f002 fc0f 	bl	800450c <HAL_TIM_Base_Start_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001cfc:	2032      	movs	r0, #50	; 0x32
 8001cfe:	f000 fdd1 	bl	80028a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d808      	bhi.n	8001d1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	2032      	movs	r0, #50	; 0x32
 8001d0e:	f000 fdad 	bl	800286c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_InitTick+0xf4>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e002      	b.n	8001d20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3738      	adds	r7, #56	; 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	20000384 	.word	0x20000384
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	20000018 	.word	0x20000018

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM2_IRQHandler+0x10>)
 8001d72:	f002 fd2d 	bl	80047d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000264 	.word	0x20000264

08001d80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <SPI1_IRQHandler+0x10>)
 8001d86:	f002 f98b 	bl	80040a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000020c 	.word	0x2000020c

08001d94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <TIM5_IRQHandler+0x10>)
 8001d9a:	f002 fd19 	bl	80047d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000384 	.word	0x20000384

08001da8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA2_Stream1_IRQHandler+0x10>)
 8001dae:	f000 ff1f 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002f0 	.word	0x200002f0

08001dbc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USART6_IRQHandler+0x10>)
 8001dc2:	f003 fa29 	bl	8005218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200002ac 	.word	0x200002ac

08001dd0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_kill>:

int _kill(int pid, int sig)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df8:	f008 fdd8 	bl	800a9ac <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2216      	movs	r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_exit>:

void _exit (int status)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffe7 	bl	8001dee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e20:	e7fe      	b.n	8001e20 <_exit+0x12>

08001e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e00a      	b.n	8001e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e34:	f3af 8000 	nop.w
 8001e38:	4601      	mov	r1, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbf0      	blt.n	8001e34 <_read+0x12>
  }

  return len;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e009      	b.n	8001e82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf1      	blt.n	8001e6e <_write+0x12>
  }
  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_close>:

int _close(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f008 fd3e 	bl	800a9ac <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20020000 	.word	0x20020000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	200003cc 	.word	0x200003cc
 8001f64:	20005310 	.word	0x20005310

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa8:	4c0b      	ldr	r4, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb6:	f7ff ffd7 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f008 fcfd 	bl	800a9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7ff f889 	bl	80010d4 <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fd0:	0800e3cc 	.word	0x0800e3cc
  ldr r2, =_sbss
 8001fd4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001fd8:	20005310 	.word	0x20005310

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	480b      	ldr	r0, [pc, #44]	; (8002018 <ssd1306_Reset+0x38>)
 8001fec:	f001 f9ee 	bl	80033cc <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <ssd1306_Reset+0x38>)
 8001ff8:	f001 f9e8 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	f000 fb59 	bl	80026b4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <ssd1306_Reset+0x38>)
 800200a:	f001 f9df 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800200e:	200a      	movs	r0, #10
 8002010:	f000 fb50 	bl	80026b4 <HAL_Delay>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020800 	.word	0x40020800

0800201c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <ssd1306_WriteCommand+0x44>)
 800202e:	f001 f9cd 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <ssd1306_WriteCommand+0x44>)
 800203a:	f001 f9c7 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800203e:	1df9      	adds	r1, r7, #7
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	2201      	movs	r2, #1
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <ssd1306_WriteCommand+0x48>)
 8002048:	f001 feed 	bl	8003e26 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <ssd1306_WriteCommand+0x44>)
 8002054:	f001 f9ba 	bl	80033cc <HAL_GPIO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020800 	.word	0x40020800
 8002064:	2000020c 	.word	0x2000020c

08002068 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <ssd1306_WriteData+0x48>)
 800207a:	f001 f9a7 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <ssd1306_WriteData+0x48>)
 8002086:	f001 f9a1 	bl	80033cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <ssd1306_WriteData+0x4c>)
 8002096:	f001 fec6 	bl	8003e26 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <ssd1306_WriteData+0x48>)
 80020a2:	f001 f993 	bl	80033cc <HAL_GPIO_WritePin>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40020800 	.word	0x40020800
 80020b4:	2000020c 	.word	0x2000020c

080020b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80020bc:	f7ff ff90 	bl	8001fe0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80020c0:	2064      	movs	r0, #100	; 0x64
 80020c2:	f000 faf7 	bl	80026b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fa94 	bl	80025f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80020cc:	2020      	movs	r0, #32
 80020ce:	f7ff ffa5 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff ffa2 	bl	800201c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020d8:	20b0      	movs	r0, #176	; 0xb0
 80020da:	f7ff ff9f 	bl	800201c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020de:	20c8      	movs	r0, #200	; 0xc8
 80020e0:	f7ff ff9c 	bl	800201c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff ff99 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020ea:	2010      	movs	r0, #16
 80020ec:	f7ff ff96 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020f0:	2040      	movs	r0, #64	; 0x40
 80020f2:	f7ff ff93 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020f6:	20ff      	movs	r0, #255	; 0xff
 80020f8:	f000 fa68 	bl	80025cc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020fc:	20a1      	movs	r0, #161	; 0xa1
 80020fe:	f7ff ff8d 	bl	800201c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002102:	20a6      	movs	r0, #166	; 0xa6
 8002104:	f7ff ff8a 	bl	800201c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002108:	20a8      	movs	r0, #168	; 0xa8
 800210a:	f7ff ff87 	bl	800201c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800210e:	203f      	movs	r0, #63	; 0x3f
 8002110:	f7ff ff84 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002114:	20a4      	movs	r0, #164	; 0xa4
 8002116:	f7ff ff81 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800211a:	20d3      	movs	r0, #211	; 0xd3
 800211c:	f7ff ff7e 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff ff7b 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002126:	20d5      	movs	r0, #213	; 0xd5
 8002128:	f7ff ff78 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800212c:	20f0      	movs	r0, #240	; 0xf0
 800212e:	f7ff ff75 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002132:	20d9      	movs	r0, #217	; 0xd9
 8002134:	f7ff ff72 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002138:	2022      	movs	r0, #34	; 0x22
 800213a:	f7ff ff6f 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800213e:	20da      	movs	r0, #218	; 0xda
 8002140:	f7ff ff6c 	bl	800201c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002144:	2012      	movs	r0, #18
 8002146:	f7ff ff69 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800214a:	20db      	movs	r0, #219	; 0xdb
 800214c:	f7ff ff66 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002150:	2020      	movs	r0, #32
 8002152:	f7ff ff63 	bl	800201c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002156:	208d      	movs	r0, #141	; 0x8d
 8002158:	f7ff ff60 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800215c:	2014      	movs	r0, #20
 800215e:	f7ff ff5d 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002162:	2001      	movs	r0, #1
 8002164:	f000 fa46 	bl	80025f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002168:	2000      	movs	r0, #0
 800216a:	f000 f80f 	bl	800218c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800216e:	f000 f831 	bl	80021d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <ssd1306_Init+0xd0>)
 8002174:	2200      	movs	r2, #0
 8002176:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <ssd1306_Init+0xd0>)
 800217a:	2200      	movs	r2, #0
 800217c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800217e:	4b02      	ldr	r3, [pc, #8]	; (8002188 <ssd1306_Init+0xd0>)
 8002180:	2201      	movs	r2, #1
 8002182:	711a      	strb	r2, [r3, #4]
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200007d0 	.word	0x200007d0

0800218c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e00d      	b.n	80021b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <ssd1306_Fill+0x1a>
 80021a2:	2100      	movs	r1, #0
 80021a4:	e000      	b.n	80021a8 <ssd1306_Fill+0x1c>
 80021a6:	21ff      	movs	r1, #255	; 0xff
 80021a8:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <ssd1306_Fill+0x44>)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d3ed      	bcc.n	800219c <ssd1306_Fill+0x10>
    }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200003d0 	.word	0x200003d0

080021d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	e016      	b.n	800220e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	3b50      	subs	r3, #80	; 0x50
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff18 	bl	800201c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff ff15 	bl	800201c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021f2:	2010      	movs	r0, #16
 80021f4:	f7ff ff12 	bl	800201c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <ssd1306_UpdateScreen+0x4c>)
 80021fe:	4413      	add	r3, r2
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff30 	bl	8002068 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	3301      	adds	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d9e5      	bls.n	80021e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003d0 	.word	0x200003d0

08002224 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	460b      	mov	r3, r1
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	4613      	mov	r3, r2
 8002234:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db3d      	blt.n	80022ba <ssd1306_DrawPixel+0x96>
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	2b3f      	cmp	r3, #63	; 0x3f
 8002242:	d83a      	bhi.n	80022ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002244:	797b      	ldrb	r3, [r7, #5]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11a      	bne.n	8002280 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	b2d8      	uxtb	r0, r3
 8002252:	4603      	mov	r3, r0
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	4413      	add	r3, r2
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <ssd1306_DrawPixel+0xa4>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	b25a      	sxtb	r2, r3
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	b25b      	sxtb	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b259      	sxtb	r1, r3
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	4603      	mov	r3, r0
 8002274:	01db      	lsls	r3, r3, #7
 8002276:	4413      	add	r3, r2
 8002278:	b2c9      	uxtb	r1, r1
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <ssd1306_DrawPixel+0xa4>)
 800227c:	54d1      	strb	r1, [r2, r3]
 800227e:	e01d      	b.n	80022bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	4603      	mov	r3, r0
 800228a:	01db      	lsls	r3, r3, #7
 800228c:	4413      	add	r3, r2
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <ssd1306_DrawPixel+0xa4>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	b25a      	sxtb	r2, r3
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	4013      	ands	r3, r2
 80022a8:	b259      	sxtb	r1, r3
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4603      	mov	r3, r0
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	4413      	add	r3, r2
 80022b2:	b2c9      	uxtb	r1, r1
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <ssd1306_DrawPixel+0xa4>)
 80022b6:	54d1      	strb	r1, [r2, r3]
 80022b8:	e000      	b.n	80022bc <ssd1306_DrawPixel+0x98>
        return;
 80022ba:	bf00      	nop
    }
}
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200003d0 	.word	0x200003d0

080022cc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4604      	mov	r4, r0
 80022d4:	1d38      	adds	r0, r7, #4
 80022d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	4613      	mov	r3, r2
 80022e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b1f      	cmp	r3, #31
 80022e8:	d902      	bls.n	80022f0 <ssd1306_WriteChar+0x24>
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b7e      	cmp	r3, #126	; 0x7e
 80022ee:	d901      	bls.n	80022f4 <ssd1306_WriteChar+0x28>
        return 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e06d      	b.n	80023d0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	793b      	ldrb	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	2b80      	cmp	r3, #128	; 0x80
 8002300:	dc06      	bgt.n	8002310 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	461a      	mov	r2, r3
 8002308:	797b      	ldrb	r3, [r7, #5]
 800230a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	dd01      	ble.n	8002314 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002310:	2300      	movs	r3, #0
 8002312:	e05d      	b.n	80023d0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e04c      	b.n	80023b4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	3b20      	subs	r3, #32
 8002320:	7979      	ldrb	r1, [r7, #5]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4619      	mov	r1, r3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	440b      	add	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e034      	b.n	80023a4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800234a:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b2d8      	uxtb	r0, r3
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 800235a:	885b      	ldrh	r3, [r3, #2]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	7bba      	ldrb	r2, [r7, #14]
 8002368:	4619      	mov	r1, r3
 800236a:	f7ff ff5b 	bl	8002224 <ssd1306_DrawPixel>
 800236e:	e016      	b.n	800239e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4413      	add	r3, r2
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 8002380:	885b      	ldrh	r3, [r3, #2]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b2d9      	uxtb	r1, r3
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff ff43 	bl	8002224 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	793b      	ldrb	r3, [r7, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d3c5      	bcc.n	800233a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	797b      	ldrb	r3, [r7, #5]
 80023b6:	461a      	mov	r2, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d3ad      	bcc.n	800231a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	793b      	ldrb	r3, [r7, #4]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <ssd1306_WriteChar+0x10c>)
 80023cc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3724      	adds	r7, #36	; 0x24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	200007d0 	.word	0x200007d0

080023dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	1d38      	adds	r0, r7, #4
 80023e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80023ea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80023ec:	e012      	b.n	8002414 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	7818      	ldrb	r0, [r3, #0]
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	1d3a      	adds	r2, r7, #4
 80023f6:	ca06      	ldmia	r2, {r1, r2}
 80023f8:	f7ff ff68 	bl	80022cc <ssd1306_WriteChar>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d002      	beq.n	800240e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	e008      	b.n	8002420 <ssd1306_WriteString+0x44>
        }
        str++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e8      	bne.n	80023ee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	781b      	ldrb	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <ssd1306_SetCursor+0x2c>)
 800243e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <ssd1306_SetCursor+0x2c>)
 8002446:	805a      	strh	r2, [r3, #2]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	200007d0 	.word	0x200007d0

08002458 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	4603      	mov	r3, r0
 800246c:	71bb      	strb	r3, [r7, #6]
 800246e:	460b      	mov	r3, r1
 8002470:	717b      	strb	r3, [r7, #5]
 8002472:	4613      	mov	r3, r2
 8002474:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002476:	797a      	ldrb	r2, [r7, #5]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bfb8      	it	lt
 8002480:	425b      	neglt	r3, r3
 8002482:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002484:	793a      	ldrb	r2, [r7, #4]
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bfb8      	it	lt
 800248e:	425b      	neglt	r3, r3
 8002490:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002492:	79fa      	ldrb	r2, [r7, #7]
 8002494:	797b      	ldrb	r3, [r7, #5]
 8002496:	429a      	cmp	r2, r3
 8002498:	d201      	bcs.n	800249e <ssd1306_Line+0x46>
 800249a:	2301      	movs	r3, #1
 800249c:	e001      	b.n	80024a2 <ssd1306_Line+0x4a>
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80024a4:	79ba      	ldrb	r2, [r7, #6]
 80024a6:	793b      	ldrb	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d201      	bcs.n	80024b0 <ssd1306_Line+0x58>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e001      	b.n	80024b4 <ssd1306_Line+0x5c>
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80024be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80024c2:	7939      	ldrb	r1, [r7, #4]
 80024c4:	797b      	ldrb	r3, [r7, #5]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff feac 	bl	8002224 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80024cc:	e024      	b.n	8002518 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80024ce:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80024d2:	79b9      	ldrb	r1, [r7, #6]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fea4 	bl	8002224 <ssd1306_DrawPixel>
        error2 = error * 2;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	425b      	negs	r3, r3
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dd08      	ble.n	80024fe <ssd1306_Line+0xa6>
            error -= deltaY;
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	4413      	add	r3, r2
 80024fc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	429a      	cmp	r2, r3
 8002504:	da08      	bge.n	8002518 <ssd1306_Line+0xc0>
            error += deltaX;
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	4413      	add	r3, r2
 8002516:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	429a      	cmp	r2, r3
 800251e:	d1d6      	bne.n	80024ce <ssd1306_Line+0x76>
 8002520:	79ba      	ldrb	r2, [r7, #6]
 8002522:	793b      	ldrb	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d1d2      	bne.n	80024ce <ssd1306_Line+0x76>
        }
    }
    return;
 8002528:	bf00      	nop
}
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}

08002530 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	4604      	mov	r4, r0
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4623      	mov	r3, r4
 8002540:	71fb      	strb	r3, [r7, #7]
 8002542:	4603      	mov	r3, r0
 8002544:	71bb      	strb	r3, [r7, #6]
 8002546:	460b      	mov	r3, r1
 8002548:	717b      	strb	r3, [r7, #5]
 800254a:	4613      	mov	r3, r2
 800254c:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	797b      	ldrb	r3, [r7, #5]
 8002552:	4293      	cmp	r3, r2
 8002554:	bf28      	it	cs
 8002556:	4613      	movcs	r3, r2
 8002558:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800255a:	797a      	ldrb	r2, [r7, #5]
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4293      	cmp	r3, r2
 8002560:	bf38      	it	cc
 8002562:	4613      	movcc	r3, r2
 8002564:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002566:	79ba      	ldrb	r2, [r7, #6]
 8002568:	793b      	ldrb	r3, [r7, #4]
 800256a:	4293      	cmp	r3, r2
 800256c:	bf28      	it	cs
 800256e:	4613      	movcs	r3, r2
 8002570:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002572:	793a      	ldrb	r2, [r7, #4]
 8002574:	79bb      	ldrb	r3, [r7, #6]
 8002576:	4293      	cmp	r3, r2
 8002578:	bf38      	it	cc
 800257a:	4613      	movcc	r3, r2
 800257c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800257e:	7afb      	ldrb	r3, [r7, #11]
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e017      	b.n	80025b4 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002584:	7b7b      	ldrb	r3, [r7, #13]
 8002586:	73bb      	strb	r3, [r7, #14]
 8002588:	e009      	b.n	800259e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800258a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800258e:	7bf9      	ldrb	r1, [r7, #15]
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fe46 	bl	8002224 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	3301      	adds	r3, #1
 800259c:	73bb      	strb	r3, [r7, #14]
 800259e:	7bba      	ldrb	r2, [r7, #14]
 80025a0:	7b3b      	ldrb	r3, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d803      	bhi.n	80025ae <ssd1306_FillRectangle+0x7e>
 80025a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	daed      	bge.n	800258a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	7abb      	ldrb	r3, [r7, #10]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d803      	bhi.n	80025c4 <ssd1306_FillRectangle+0x94>
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b3f      	cmp	r3, #63	; 0x3f
 80025c0:	d9e0      	bls.n	8002584 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
}
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80025d6:	2381      	movs	r3, #129	; 0x81
 80025d8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fd1d 	bl	800201c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fd19 	bl	800201c <ssd1306_WriteCommand>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002604:	23af      	movs	r3, #175	; 0xaf
 8002606:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <ssd1306_SetDisplayOn+0x38>)
 800260a:	2201      	movs	r2, #1
 800260c:	715a      	strb	r2, [r3, #5]
 800260e:	e004      	b.n	800261a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002610:	23ae      	movs	r3, #174	; 0xae
 8002612:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <ssd1306_SetDisplayOn+0x38>)
 8002616:	2200      	movs	r2, #0
 8002618:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fcfd 	bl	800201c <ssd1306_WriteCommand>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200007d0 	.word	0x200007d0

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f8fc 	bl	8002856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f7ff faf2 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff f98c 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	2000001c 	.word	0x2000001c
 8002698:	200007d8 	.word	0x200007d8

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200007d8 	.word	0x200007d8

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d005      	beq.n	80026da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_Delay+0x44>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026da:	bf00      	nop
 80026dc:	f7ff ffde 	bl	800269c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8f7      	bhi.n	80026dc <HAL_Delay+0x28>
  {
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000001c 	.word	0x2000001c

080026fc <__NVIC_SetPriorityGrouping>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff4c 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287e:	f7ff ff61 	bl	8002744 <__NVIC_GetPriorityGrouping>
 8002882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff ffb1 	bl	80027f0 <NVIC_EncodePriority>
 800288e:	4602      	mov	r2, r0
 8002890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff80 	bl	800279c <__NVIC_SetPriority>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff54 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fee6 	bl	800269c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e099      	b.n	8002a10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fc:	e00f      	b.n	800291e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028fe:	f7ff fecd 	bl	800269c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b05      	cmp	r3, #5
 800290a:	d908      	bls.n	800291e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e078      	b.n	8002a10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e8      	bne.n	80028fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_DMA_Init+0x158>)
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b04      	cmp	r3, #4
 8002976:	d107      	bne.n	8002988 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0307 	bic.w	r3, r3, #7
 800299e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d117      	bne.n	80029e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb01 	bl	8002fcc <DMA_CheckFifoParam>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029de:	2301      	movs	r3, #1
 80029e0:	e016      	b.n	8002a10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fab8 	bl	8002f60 <DMA_CalcBaseAndBitshift>
 80029f0:	4603      	mov	r3, r0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	f010803f 	.word	0xf010803f

08002a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_Start_IT+0x26>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e040      	b.n	8002ac4 <HAL_DMA_Start_IT+0xa8>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d12f      	bne.n	8002ab6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa4a 	bl	8002f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0216 	orr.w	r2, r2, #22
 8002a8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0208 	orr.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e005      	b.n	8002ac2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ada:	f7ff fddf 	bl	800269c <HAL_GetTick>
 8002ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e052      	b.n	8002ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0216 	bic.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_DMA_Abort+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4e:	e013      	b.n	8002b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b50:	f7ff fda4 	bl	800269c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d90c      	bls.n	8002b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2203      	movs	r2, #3
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e015      	b.n	8002ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e4      	bne.n	8002b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	223f      	movs	r2, #63	; 0x3f
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d004      	beq.n	8002bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00c      	b.n	8002be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2205      	movs	r2, #5
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bfc:	4b8e      	ldr	r3, [pc, #568]	; (8002e38 <HAL_DMA_IRQHandler+0x248>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a8e      	ldr	r2, [pc, #568]	; (8002e3c <HAL_DMA_IRQHandler+0x24c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	2204      	movs	r2, #4
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2210      	movs	r2, #16
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d043      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2210      	movs	r2, #16
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
 8002d1e:	e01f      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
 8002d30:	e016      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0208 	bic.w	r2, r2, #8
 8002d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2220      	movs	r2, #32
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 808f 	beq.w	8002e90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8087 	beq.w	8002e90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	2220      	movs	r2, #32
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d136      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0216 	bic.w	r2, r2, #22
 8002da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_DMA_IRQHandler+0x1da>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0208 	bic.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	223f      	movs	r2, #63	; 0x3f
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07e      	beq.n	8002efc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
        }
        return;
 8002e06:	e079      	b.n	8002efc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d031      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	e02c      	b.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
 8002e36:	bf00      	nop
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d023      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
 8002e50:	e01e      	b.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10f      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0210 	bic.w	r2, r2, #16
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d032      	beq.n	8002efe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2205      	movs	r2, #5
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d307      	bcc.n	8002ed8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f2      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x2cc>
 8002ed6:	e000      	b.n	8002eda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ed8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e000      	b.n	8002efe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002efc:	bf00      	nop
    }
  }
}
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d108      	bne.n	8002f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f42:	e007      	b.n	8002f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3b10      	subs	r3, #16
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d909      	bls.n	8002fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa0:	e007      	b.n	8002fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab
 8002fc8:	0800e044 	.word	0x0800e044

08002fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11f      	bne.n	8003026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d856      	bhi.n	800309a <DMA_CheckFifoParam+0xce>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <DMA_CheckFifoParam+0x28>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003017 	.word	0x08003017
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800309b 	.word	0x0800309b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d046      	beq.n	800309e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e043      	b.n	800309e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800301e:	d140      	bne.n	80030a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e03d      	b.n	80030a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	d121      	bne.n	8003074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d837      	bhi.n	80030a6 <DMA_CheckFifoParam+0xda>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x70>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003053 	.word	0x08003053
 8003044:	0800304d 	.word	0x0800304d
 8003048:	08003065 	.word	0x08003065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e030      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d025      	beq.n	80030aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003062:	e022      	b.n	80030aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800306c:	d11f      	bne.n	80030ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003072:	e01c      	b.n	80030ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d903      	bls.n	8003082 <DMA_CheckFifoParam+0xb6>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d003      	beq.n	8003088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003080:	e018      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      break;
 8003086:	e015      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e00b      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 800309a:	bf00      	nop
 800309c:	e00a      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e008      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a2:	bf00      	nop
 80030a4:	e006      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e004      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
    }
  } 
  
  return status; 
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e159      	b.n	8003394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8148 	bne.w	800338e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003112:	2b02      	cmp	r3, #2
 8003114:	d130      	bne.n	8003178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a2 	beq.w	800338e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b57      	ldr	r3, [pc, #348]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b54      	ldr	r3, [pc, #336]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003266:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_GPIO_Init+0x2ec>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a49      	ldr	r2, [pc, #292]	; (80033b4 <HAL_GPIO_Init+0x2f0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x202>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a48      	ldr	r2, [pc, #288]	; (80033b8 <HAL_GPIO_Init+0x2f4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x1fe>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a47      	ldr	r2, [pc, #284]	; (80033bc <HAL_GPIO_Init+0x2f8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x1fa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a46      	ldr	r2, [pc, #280]	; (80033c0 <HAL_GPIO_Init+0x2fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x1f6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a45      	ldr	r2, [pc, #276]	; (80033c4 <HAL_GPIO_Init+0x300>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x1f2>
 80032b2:	2304      	movs	r3, #4
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032b6:	2307      	movs	r3, #7
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	; (80033b0 <HAL_GPIO_Init+0x2ec>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_GPIO_Init+0x304>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_GPIO_Init+0x304>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_GPIO_Init+0x304>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_GPIO_Init+0x304>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_GPIO_Init+0x304>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_GPIO_Init+0x304>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_GPIO_Init+0x304>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <HAL_GPIO_Init+0x304>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f aea2 	bls.w	80030e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	4613      	mov	r3, r2
 80033da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033dc:	787b      	ldrb	r3, [r7, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e8:	e003      	b.n	80033f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e267      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e242      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a75      	ldr	r2, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6f      	ldr	r2, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6c      	ldr	r2, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b69      	ldr	r3, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a68      	ldr	r2, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7ff f8f0 	bl	800269c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff f8ec 	bl	800269c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e207      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff f8dc 	bl	800269c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7ff f8d8 	bl	800269c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1f3      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c7      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4937      	ldr	r1, [pc, #220]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <HAL_RCC_OscConfig+0x244>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7ff f891 	bl	800269c <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7ff f88d 	bl	800269c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a8      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4925      	ldr	r1, [pc, #148]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_OscConfig+0x244>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff f870 	bl	800269c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c0:	f7ff f86c 	bl	800269c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e187      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d036      	beq.n	8003658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_RCC_OscConfig+0x248>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7ff f850 	bl	800269c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003600:	f7ff f84c 	bl	800269c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e167      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
 800361e:	e01b      	b.n	8003658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_OscConfig+0x248>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7ff f839 	bl	800269c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	e00e      	b.n	800364c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362e:	f7ff f835 	bl	800269c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d907      	bls.n	800364c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e150      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	42470000 	.word	0x42470000
 8003648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ea      	bne.n	800362e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8097 	beq.w	8003794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a7c      	ldr	r2, [pc, #496]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b74      	ldr	r3, [pc, #464]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a73      	ldr	r2, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fff5 	bl	800269c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fe fff1 	bl	800269c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e10c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ea>
 80036dc:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e01c      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x30c>
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a5e      	ldr	r2, [pc, #376]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	4b5c      	ldr	r3, [pc, #368]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a5b      	ldr	r2, [pc, #364]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a57      	ldr	r2, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	4b55      	ldr	r3, [pc, #340]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a54      	ldr	r2, [pc, #336]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 0304 	bic.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe ffb6 	bl	800269c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe ffb2 	bl	800269c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0cb      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ee      	beq.n	8003734 <HAL_RCC_OscConfig+0x334>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7fe ffa0 	bl	800269c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe ff9c 	bl	800269c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0b5      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ee      	bne.n	8003760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a1 	beq.w	80038e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379e:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d05c      	beq.n	8003864 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d141      	bne.n	8003836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe ff70 	bl	800269c <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe ff6c 	bl	800269c <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e087      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	491b      	ldr	r1, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe ff45 	bl	800269c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe ff41 	bl	800269c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e05c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x416>
 8003834:	e054      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe ff2e 	bl	800269c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe ff2a 	bl	800269c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e045      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x444>
 8003862:	e03d      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e038      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	40007000 	.word	0x40007000
 8003878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d028      	beq.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d121      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11a      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cc      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d90c      	bls.n	800392c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d044      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e067      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fe fe5c 	bl	800269c <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fe fe58 	bl	800269c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20c      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f8d6 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	0800cce0 	.word	0x0800cce0
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	20000018 	.word	0x20000018

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b090      	sub	sp, #64	; 0x40
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	2300      	movs	r3, #0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80a1 	bhi.w	8003c28 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e09b      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003af4:	e09b      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afa:	e098      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b06:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b24:	2100      	movs	r1, #0
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b28:	fb03 f201 	mul.w	r2, r3, r1
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	fb00 f303 	mul.w	r3, r0, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	4a43      	ldr	r2, [pc, #268]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b36:	fba0 1202 	umull	r1, r2, r0, r2
 8003b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	4413      	add	r3, r2
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	2200      	movs	r2, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	61fa      	str	r2, [r7, #28]
 8003b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b56:	f7fd f89f 	bl	8000c98 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	e053      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b64:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	617a      	str	r2, [r7, #20]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b76:	f04f 0b00 	mov.w	fp, #0
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	465b      	mov	r3, fp
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	0159      	lsls	r1, r3, #5
 8003b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8c:	0150      	lsls	r0, r2, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	ebb2 080a 	subs.w	r8, r2, sl
 8003b96:	eb63 090b 	sbc.w	r9, r3, fp
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ba6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003baa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bae:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb2:	eb63 0509 	sbc.w	r5, r3, r9
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	00eb      	lsls	r3, r5, #3
 8003bc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc4:	00e2      	lsls	r2, r4, #3
 8003bc6:	4614      	mov	r4, r2
 8003bc8:	461d      	mov	r5, r3
 8003bca:	eb14 030a 	adds.w	r3, r4, sl
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	eb45 030b 	adc.w	r3, r5, fp
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be2:	4629      	mov	r1, r5
 8003be4:	028b      	lsls	r3, r1, #10
 8003be6:	4621      	mov	r1, r4
 8003be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bec:	4621      	mov	r1, r4
 8003bee:	028a      	lsls	r2, r1, #10
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c00:	f7fd f84a 	bl	8000c98 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3740      	adds	r7, #64	; 0x40
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	017d7840 	.word	0x017d7840

08003c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000004 	.word	0x20000004

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff0 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a9b      	lsrs	r3, r3, #10
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	0800ccf0 	.word	0x0800ccf0

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffdc 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0b5b      	lsrs	r3, r3, #13
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	0800ccf0 	.word	0x0800ccf0

08003cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <HAL_RCC_GetClockConfig+0x60>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0207 	and.w	r2, r3, #7
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07b      	b.n	8003e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d009      	beq.n	8003d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fe3e 	bl	80019e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0104 	and.w	r1, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0210 	and.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Transmit+0x22>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e126      	b.n	8004096 <HAL_SPI_Transmit+0x270>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e50:	f7fe fc24 	bl	800269c <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e6a:	e10b      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x52>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7c:	e102      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d007      	beq.n	8003f04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d14b      	bne.n	8003fa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Transmit+0xf6>
 8003f16:	8afb      	ldrh	r3, [r7, #22]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d13e      	bne.n	8003f9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f40:	e02b      	b.n	8003f9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d112      	bne.n	8003f76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f74:	e011      	b.n	8003f9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f76:	f7fe fb91 	bl	800269c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d803      	bhi.n	8003f8e <HAL_SPI_Transmit+0x168>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Transmit+0x16e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f98:	e074      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ce      	bne.n	8003f42 <HAL_SPI_Transmit+0x11c>
 8003fa4:	e04c      	b.n	8004040 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0x18e>
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d140      	bne.n	8004036 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fda:	e02c      	b.n	8004036 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d113      	bne.n	8004012 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004010:	e011      	b.n	8004036 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004012:	f7fe fb43 	bl	800269c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d803      	bhi.n	800402a <HAL_SPI_Transmit+0x204>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d102      	bne.n	8004030 <HAL_SPI_Transmit+0x20a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004034:	e026      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1cd      	bne.n	8003fdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f9c5 	bl	80043d4 <SPI_EndRxTxTransaction>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e000      	b.n	8004084 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004094:	7ffb      	ldrb	r3, [r7, #31]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10e      	bne.n	80040e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
    return;
 80040de:	e0ce      	b.n	800427e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_SPI_IRQHandler+0x5e>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
    return;
 80040fc:	e0bf      	b.n	800427e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_SPI_IRQHandler+0x7e>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80b0 	beq.w	800427e <HAL_SPI_IRQHandler+0x1de>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80aa 	beq.w	800427e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d023      	beq.n	800417c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b03      	cmp	r3, #3
 800413e:	d011      	beq.n	8004164 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	e00b      	b.n	800417c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
        return;
 800417a:	e080      	b.n	800427e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0208 	orr.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04f      	beq.n	800427c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_SPI_IRQHandler+0x168>
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d034      	beq.n	8004272 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0203 	bic.w	r2, r2, #3
 8004216:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_SPI_IRQHandler+0x1e4>)
 8004226:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fcbd 	bl	8002bac <HAL_DMA_Abort_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	2b00      	cmp	r3, #0
 800424a:	d016      	beq.n	800427a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <HAL_SPI_IRQHandler+0x1e4>)
 8004252:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fca7 	bl	8002bac <HAL_DMA_Abort_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004270:	e003      	b.n	800427a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f808 	bl	8004288 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004278:	e000      	b.n	800427c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800427a:	bf00      	nop
    return;
 800427c:	bf00      	nop
  }
}
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	0800429d 	.word	0x0800429d

08004288 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff ffe6 	bl	8004288 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d4:	f7fe f9e2 	bl	800269c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e4:	f7fe f9da 	bl	800269c <HAL_GetTick>
 80042e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	0d1b      	lsrs	r3, r3, #20
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fa:	e054      	b.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d050      	beq.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004304:	f7fe f9ca 	bl	800269c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	d902      	bls.n	800431a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d13d      	bne.n	8004396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d111      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d004      	beq.n	8004348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d107      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d10f      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e017      	b.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d19b      	bne.n	80042fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000004 	.word	0x20000004

080043d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <SPI_EndRxTxTransaction+0x7c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <SPI_EndRxTxTransaction+0x80>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0d5b      	lsrs	r3, r3, #21
 80043ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fe:	d112      	bne.n	8004426 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff5a 	bl	80042c4 <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3b01      	subs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d0f2      	beq.n	8004426 <SPI_EndRxTxTransaction+0x52>
 8004440:	e000      	b.n	8004444 <SPI_EndRxTxTransaction+0x70>
        break;
 8004442:	bf00      	nop
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000004 	.word	0x20000004
 8004454:	165e9f81 	.word	0x165e9f81

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e041      	b.n	80044ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f839 	bl	80044f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 fb8c 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d001      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e044      	b.n	80045ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_TIM_Base_Start_IT+0xb0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x6c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d013      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x6c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x6c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x6c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x6c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_TIM_Base_Start_IT+0xc0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d111      	bne.n	800459c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b06      	cmp	r3, #6
 8004588:	d010      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	e007      	b.n	80045ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40010000 	.word	0x40010000
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40014000 	.word	0x40014000

080045d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fa46 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fad0 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_TIM_PWM_Start+0x24>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e022      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d109      	bne.n	80046ae <HAL_TIM_PWM_Start+0x3e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e015      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x58>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e008      	b.n	80046da <HAL_TIM_PWM_Start+0x6a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e068      	b.n	80047b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x82>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	e013      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0x92>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	e00b      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004710:	e003      	b.n	800471a <HAL_TIM_PWM_Start+0xaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc52 	bl	8004fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a23      	ldr	r2, [pc, #140]	; (80047bc <HAL_TIM_PWM_Start+0x14c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d107      	bne.n	8004742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_TIM_PWM_Start+0x14c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_TIM_PWM_Start+0x10e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d013      	beq.n	800477e <HAL_TIM_PWM_Start+0x10e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_TIM_PWM_Start+0x150>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIM_PWM_Start+0x10e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_TIM_PWM_Start+0x154>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIM_PWM_Start+0x10e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_TIM_PWM_Start+0x158>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIM_PWM_Start+0x10e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_TIM_PWM_Start+0x15c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d111      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d010      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	e007      	b.n	80047b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40014000 	.word	0x40014000

080047d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0202 	mvn.w	r2, #2
 80047fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9b0 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f9a2 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9b3 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0204 	mvn.w	r2, #4
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f986 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f978 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f989 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0208 	mvn.w	r2, #8
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2204      	movs	r2, #4
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f95c 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f94e 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f95f 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2208      	movs	r2, #8
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f932 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f924 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f935 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0201 	mvn.w	r2, #1
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc ff06 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbc4 	bl	8005108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d10e      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d107      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8fa 	bl	8004ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0220 	mvn.w	r2, #32
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb8e 	bl	80050f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0ae      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	f200 809f 	bhi.w	8004b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004b4d 	.word	0x08004b4d
 8004a1c:	08004b4d 	.word	0x08004b4d
 8004a20:	08004b4d 	.word	0x08004b4d
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004b4d 	.word	0x08004b4d
 8004a2c:	08004b4d 	.word	0x08004b4d
 8004a30:	08004b4d 	.word	0x08004b4d
 8004a34:	08004acb 	.word	0x08004acb
 8004a38:	08004b4d 	.word	0x08004b4d
 8004a3c:	08004b4d 	.word	0x08004b4d
 8004a40:	08004b4d 	.word	0x08004b4d
 8004a44:	08004b0b 	.word	0x08004b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f930 	bl	8004cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6999      	ldr	r1, [r3, #24]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	619a      	str	r2, [r3, #24]
      break;
 8004a86:	e064      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f976 	bl	8004d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	619a      	str	r2, [r3, #24]
      break;
 8004ac8:	e043      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f9c1 	bl	8004e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0208 	orr.w	r2, r2, #8
 8004ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0204 	bic.w	r2, r2, #4
 8004af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	61da      	str	r2, [r3, #28]
      break;
 8004b08:	e023      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fa0b 	bl	8004f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	021a      	lsls	r2, r3, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	61da      	str	r2, [r3, #28]
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <TIM_Base_SetConfig+0xe4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a31      	ldr	r2, [pc, #196]	; (8004c9c <TIM_Base_SetConfig+0xe8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a30      	ldr	r2, [pc, #192]	; (8004ca0 <TIM_Base_SetConfig+0xec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <TIM_Base_SetConfig+0xf0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <TIM_Base_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d017      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <TIM_Base_SetConfig+0xe8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <TIM_Base_SetConfig+0xec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <TIM_Base_SetConfig+0xf0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <TIM_Base_SetConfig+0xf4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <TIM_Base_SetConfig+0xf8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <TIM_Base_SetConfig+0xfc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <TIM_Base_SetConfig+0xe4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	615a      	str	r2, [r3, #20]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0302 	bic.w	r3, r3, #2
 8004cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <TIM_OC1_SetConfig+0xc8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10c      	bne.n	8004d2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0308 	bic.w	r3, r3, #8
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <TIM_OC1_SetConfig+0xc8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d111      	bne.n	8004d56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40010000 	.word	0x40010000

08004d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0210 	bic.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0320 	bic.w	r3, r3, #32
 8004dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <TIM_OC2_SetConfig+0xd4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10d      	bne.n	8004dfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <TIM_OC2_SetConfig+0xd4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d113      	bne.n	8004e2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000

08004e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <TIM_OC3_SetConfig+0xd0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10d      	bne.n	8004ed2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <TIM_OC3_SetConfig+0xd0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d113      	bne.n	8004f02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40010000 	.word	0x40010000

08004f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <TIM_OC4_SetConfig+0x9c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d109      	bne.n	8004fa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000

08004fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2201      	movs	r2, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e050      	b.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507c:	d013      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10c      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000

080050f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e03f      	b.n	80051ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fcfe 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe69 	bl	8005e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d11d      	bne.n	800520c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Receive_DMA+0x26>
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e016      	b.n	800520e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Receive_DMA+0x38>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e00f      	b.n	800520e <HAL_UART_Receive_DMA+0x58>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	461a      	mov	r2, r3
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fbb8 	bl	8005978 <UART_Start_Receive_DMA>
 8005208:	4603      	mov	r3, r0
 800520a:	e000      	b.n	800520e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b0ba      	sub	sp, #232	; 0xe8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_UART_IRQHandler+0x66>
 800526a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fd23 	bl	8005cc2 <UART_Receive_IT>
      return;
 800527c:	e256      	b.n	800572c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80de 	beq.w	8005444 <HAL_UART_IRQHandler+0x22c>
 8005288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80d1 	beq.w	8005444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xae>
 80052ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_UART_IRQHandler+0xd2>
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0202 	orr.w	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_UART_IRQHandler+0xf6>
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <HAL_UART_IRQHandler+0x126>
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 81ed 	beq.w	8005722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x14e>
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fcae 	bl	8005cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_UART_IRQHandler+0x17a>
 800538a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04f      	beq.n	8005432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fbb6 	bl	8005b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d141      	bne.n	800542a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1d9      	bne.n	80053a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d013      	beq.n	8005422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_UART_IRQHandler+0x3dc>)
 8005400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd fbd0 	bl	8002bac <HAL_DMA_Abort_IT>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	e00e      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f99a 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	e00a      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f996 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	e006      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f992 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800543e:	e170      	b.n	8005722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	bf00      	nop
    return;
 8005442:	e16e      	b.n	8005722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 814a 	bne.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8143 	beq.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 813c 	beq.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	f040 80b4 	bne.w	80055f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800549c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8140 	beq.w	8005726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ae:	429a      	cmp	r2, r3
 80054b0:	f080 8139 	bcs.w	8005726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	f000 8088 	beq.w	80055da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800550e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1d9      	bne.n	80054ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3314      	adds	r3, #20
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800553a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800553e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800554c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e1      	bne.n	8005516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800557c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e3      	bne.n	8005552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	f023 0310 	bic.w	r3, r3, #16
 80055ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e3      	bne.n	8005598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fd fa79 	bl	8002acc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8c0 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055f0:	e099      	b.n	8005726 <HAL_UART_IRQHandler+0x50e>
 80055f2:	bf00      	nop
 80055f4:	08005bcb 	.word	0x08005bcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 808b 	beq.w	800572a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8086 	beq.w	800572a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005642:	647a      	str	r2, [r7, #68]	; 0x44
 8005644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	623b      	str	r3, [r7, #32]
   return(result);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3314      	adds	r3, #20
 8005676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800567a:	633a      	str	r2, [r7, #48]	; 0x30
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e3      	bne.n	8005656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0310 	bic.w	r3, r3, #16
 80056b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	617b      	str	r3, [r7, #20]
   return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e3      	bne.n	800569c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f848 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056e0:	e023      	b.n	800572a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_UART_IRQHandler+0x4ea>
 80056ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa79 	bl	8005bf2 <UART_Transmit_IT>
    return;
 8005700:	e014      	b.n	800572c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <HAL_UART_IRQHandler+0x514>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fab9 	bl	8005c92 <UART_EndTransmit_IT>
    return;
 8005720:	e004      	b.n	800572c <HAL_UART_IRQHandler+0x514>
    return;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <HAL_UART_IRQHandler+0x514>
      return;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_UART_IRQHandler+0x514>
      return;
 800572a:	bf00      	nop
  }
}
 800572c:	37e8      	adds	r7, #232	; 0xe8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop

08005734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b09c      	sub	sp, #112	; 0x70
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d172      	bne.n	800588a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	2200      	movs	r2, #0
 80057a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80057cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e5      	bne.n	80057aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e5      	bne.n	80057de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005832:	633a      	str	r2, [r7, #48]	; 0x30
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	2b01      	cmp	r3, #1
 8005854:	d119      	bne.n	800588a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	60fb      	str	r3, [r7, #12]
   return(result);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f023 0310 	bic.w	r3, r3, #16
 800586c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005876:	61fa      	str	r2, [r7, #28]
 8005878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	617b      	str	r3, [r7, #20]
   return(result);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	2b01      	cmp	r3, #1
 8005890:	d106      	bne.n	80058a0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005896:	4619      	mov	r1, r3
 8005898:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800589a:	f7ff ff69 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800589e:	e002      	b.n	80058a6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80058a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058a2:	f7fb fb77 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 80058a6:	bf00      	nop
 80058a8:	3770      	adds	r7, #112	; 0x70
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d108      	bne.n	80058d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4619      	mov	r1, r3
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ff4e 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058d4:	e002      	b.n	80058dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff ff36 	bl	8005748 <HAL_UART_RxHalfCpltCallback>
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b21      	cmp	r3, #33	; 0x21
 8005916:	d108      	bne.n	800592a <UART_DMAError+0x46>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f000 f8c5 	bl	8005ab4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b22      	cmp	r3, #34	; 0x22
 800594a:	d108      	bne.n	800595e <UART_DMAError+0x7a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f000 f8d3 	bl	8005b04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0210 	orr.w	r2, r3, #16
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f7ff fef6 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b098      	sub	sp, #96	; 0x60
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2222      	movs	r2, #34	; 0x22
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4a40      	ldr	r2, [pc, #256]	; (8005aa8 <UART_Start_Receive_DMA+0x130>)
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	4a3f      	ldr	r2, [pc, #252]	; (8005aac <UART_Start_Receive_DMA+0x134>)
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	4a3e      	ldr	r2, [pc, #248]	; (8005ab0 <UART_Start_Receive_DMA+0x138>)
 80059b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	2200      	movs	r2, #0
 80059be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059c0:	f107 0308 	add.w	r3, r7, #8
 80059c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	f7fd f820 	bl	8002a1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059dc:	2300      	movs	r3, #0
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a56:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a80:	653b      	str	r3, [r7, #80]	; 0x50
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6a39      	ldr	r1, [r7, #32]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3760      	adds	r7, #96	; 0x60
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	08005789 	.word	0x08005789
 8005aac:	080058af 	.word	0x080058af
 8005ab0:	080058e5 	.word	0x080058e5

08005ab4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	61ba      	str	r2, [r7, #24]
 8005ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005af8:	bf00      	nop
 8005afa:	3724      	adds	r7, #36	; 0x24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b095      	sub	sp, #84	; 0x54
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b2c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d119      	bne.n	8005bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9c:	61ba      	str	r2, [r7, #24]
 8005b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bbe:	bf00      	nop
 8005bc0:	3754      	adds	r7, #84	; 0x54
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff fdb9 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b21      	cmp	r3, #33	; 0x21
 8005c04:	d13e      	bne.n	8005c84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	d114      	bne.n	8005c3a <UART_Transmit_IT+0x48>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d110      	bne.n	8005c3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]
 8005c38:	e008      	b.n	8005c4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6211      	str	r1, [r2, #32]
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10f      	bne.n	8005c80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fd3e 	bl	8005734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b08c      	sub	sp, #48	; 0x30
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b22      	cmp	r3, #34	; 0x22
 8005cd4:	f040 80ab 	bne.w	8005e2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce0:	d117      	bne.n	8005d12 <UART_Receive_IT+0x50>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d10:	e026      	b.n	8005d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d24:	d007      	beq.n	8005d36 <UART_Receive_IT+0x74>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <UART_Receive_IT+0x82>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e008      	b.n	8005d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d15a      	bne.n	8005e2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0220 	bic.w	r2, r2, #32
 8005d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d135      	bne.n	8005e20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f023 0310 	bic.w	r3, r3, #16
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dda:	623a      	str	r2, [r7, #32]
 8005ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	69f9      	ldr	r1, [r7, #28]
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e5      	bne.n	8005dba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d10a      	bne.n	8005e12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fca9 	bl	8005770 <HAL_UARTEx_RxEventCallback>
 8005e1e:	e002      	b.n	8005e26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fb f8b7 	bl	8000f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e002      	b.n	8005e30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3730      	adds	r7, #48	; 0x30
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e3c:	b0c0      	sub	sp, #256	; 0x100
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	68d9      	ldr	r1, [r3, #12]
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	ea40 0301 	orr.w	r3, r0, r1
 8005e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e90:	f021 010c 	bic.w	r1, r1, #12
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb2:	6999      	ldr	r1, [r3, #24]
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	ea40 0301 	orr.w	r3, r0, r1
 8005ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b8f      	ldr	r3, [pc, #572]	; (8006104 <UART_SetConfig+0x2cc>)
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d005      	beq.n	8005ed8 <UART_SetConfig+0xa0>
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b8d      	ldr	r3, [pc, #564]	; (8006108 <UART_SetConfig+0x2d0>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d104      	bne.n	8005ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fd fed6 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8005edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ee0:	e003      	b.n	8005eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ee2:	f7fd febd 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8005ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef4:	f040 810c 	bne.w	8006110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	1891      	adds	r1, r2, r2
 8005f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f12:	415b      	adcs	r3, r3
 8005f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	eb12 0801 	adds.w	r8, r2, r1
 8005f20:	4629      	mov	r1, r5
 8005f22:	eb43 0901 	adc.w	r9, r3, r1
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3a:	4690      	mov	r8, r2
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	eb18 0303 	adds.w	r3, r8, r3
 8005f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f48:	462b      	mov	r3, r5
 8005f4a:	eb49 0303 	adc.w	r3, r9, r3
 8005f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f66:	460b      	mov	r3, r1
 8005f68:	18db      	adds	r3, r3, r3
 8005f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	eb42 0303 	adc.w	r3, r2, r3
 8005f72:	657b      	str	r3, [r7, #84]	; 0x54
 8005f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f7c:	f7fa fe8c 	bl	8000c98 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4b61      	ldr	r3, [pc, #388]	; (800610c <UART_SetConfig+0x2d4>)
 8005f86:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	011c      	lsls	r4, r3, #4
 8005f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fd0:	4692      	mov	sl, r2
 8005fd2:	469b      	mov	fp, r3
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	18db      	adds	r3, r3, r3
 8006000:	643b      	str	r3, [r7, #64]	; 0x40
 8006002:	4613      	mov	r3, r2
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
 800600a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800600e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006012:	f7fa fe41 	bl	8000c98 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4611      	mov	r1, r2
 800601c:	4b3b      	ldr	r3, [pc, #236]	; (800610c <UART_SetConfig+0x2d4>)
 800601e:	fba3 2301 	umull	r2, r3, r3, r1
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2264      	movs	r2, #100	; 0x64
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006032:	4b36      	ldr	r3, [pc, #216]	; (800610c <UART_SetConfig+0x2d4>)
 8006034:	fba3 2302 	umull	r2, r3, r3, r2
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006040:	441c      	add	r4, r3
 8006042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006046:	2200      	movs	r2, #0
 8006048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800604c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	1891      	adds	r1, r2, r2
 800605a:	63b9      	str	r1, [r7, #56]	; 0x38
 800605c:	415b      	adcs	r3, r3
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006064:	4641      	mov	r1, r8
 8006066:	1851      	adds	r1, r2, r1
 8006068:	6339      	str	r1, [r7, #48]	; 0x30
 800606a:	4649      	mov	r1, r9
 800606c:	414b      	adcs	r3, r1
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800607c:	4659      	mov	r1, fp
 800607e:	00cb      	lsls	r3, r1, #3
 8006080:	4651      	mov	r1, sl
 8006082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006086:	4651      	mov	r1, sl
 8006088:	00ca      	lsls	r2, r1, #3
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	4603      	mov	r3, r0
 8006090:	4642      	mov	r2, r8
 8006092:	189b      	adds	r3, r3, r2
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006098:	464b      	mov	r3, r9
 800609a:	460a      	mov	r2, r1
 800609c:	eb42 0303 	adc.w	r3, r2, r3
 80060a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060b8:	460b      	mov	r3, r1
 80060ba:	18db      	adds	r3, r3, r3
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060be:	4613      	mov	r3, r2
 80060c0:	eb42 0303 	adc.w	r3, r2, r3
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ce:	f7fa fde3 	bl	8000c98 <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <UART_SetConfig+0x2d4>)
 80060d8:	fba3 1302 	umull	r1, r3, r3, r2
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	2164      	movs	r1, #100	; 0x64
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	3332      	adds	r3, #50	; 0x32
 80060ea:	4a08      	ldr	r2, [pc, #32]	; (800610c <UART_SetConfig+0x2d4>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f003 0207 	and.w	r2, r3, #7
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4422      	add	r2, r4
 80060fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006100:	e106      	b.n	8006310 <UART_SetConfig+0x4d8>
 8006102:	bf00      	nop
 8006104:	40011000 	.word	0x40011000
 8006108:	40011400 	.word	0x40011400
 800610c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800611a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800611e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	1891      	adds	r1, r2, r2
 8006128:	6239      	str	r1, [r7, #32]
 800612a:	415b      	adcs	r3, r3
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006132:	4641      	mov	r1, r8
 8006134:	1854      	adds	r4, r2, r1
 8006136:	4649      	mov	r1, r9
 8006138:	eb43 0501 	adc.w	r5, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	00eb      	lsls	r3, r5, #3
 8006146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614a:	00e2      	lsls	r2, r4, #3
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	4643      	mov	r3, r8
 8006152:	18e3      	adds	r3, r4, r3
 8006154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006158:	464b      	mov	r3, r9
 800615a:	eb45 0303 	adc.w	r3, r5, r3
 800615e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800616e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800617e:	4629      	mov	r1, r5
 8006180:	008b      	lsls	r3, r1, #2
 8006182:	4621      	mov	r1, r4
 8006184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006188:	4621      	mov	r1, r4
 800618a:	008a      	lsls	r2, r1, #2
 800618c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006190:	f7fa fd82 	bl	8000c98 <__aeabi_uldivmod>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4b60      	ldr	r3, [pc, #384]	; (800631c <UART_SetConfig+0x4e4>)
 800619a:	fba3 2302 	umull	r2, r3, r3, r2
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	011c      	lsls	r4, r3, #4
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	1891      	adds	r1, r2, r2
 80061ba:	61b9      	str	r1, [r7, #24]
 80061bc:	415b      	adcs	r3, r3
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c4:	4641      	mov	r1, r8
 80061c6:	1851      	adds	r1, r2, r1
 80061c8:	6139      	str	r1, [r7, #16]
 80061ca:	4649      	mov	r1, r9
 80061cc:	414b      	adcs	r3, r1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061dc:	4659      	mov	r1, fp
 80061de:	00cb      	lsls	r3, r1, #3
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e6:	4651      	mov	r1, sl
 80061e8:	00ca      	lsls	r2, r1, #3
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	4642      	mov	r2, r8
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061f8:	464b      	mov	r3, r9
 80061fa:	460a      	mov	r2, r1
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	67bb      	str	r3, [r7, #120]	; 0x78
 800620e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800621c:	4649      	mov	r1, r9
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	4641      	mov	r1, r8
 8006222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006226:	4641      	mov	r1, r8
 8006228:	008a      	lsls	r2, r1, #2
 800622a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800622e:	f7fa fd33 	bl	8000c98 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4611      	mov	r1, r2
 8006238:	4b38      	ldr	r3, [pc, #224]	; (800631c <UART_SetConfig+0x4e4>)
 800623a:	fba3 2301 	umull	r2, r3, r3, r1
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2264      	movs	r2, #100	; 0x64
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	1acb      	subs	r3, r1, r3
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	3332      	adds	r3, #50	; 0x32
 800624c:	4a33      	ldr	r2, [pc, #204]	; (800631c <UART_SetConfig+0x4e4>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006258:	441c      	add	r4, r3
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	673b      	str	r3, [r7, #112]	; 0x70
 8006262:	677a      	str	r2, [r7, #116]	; 0x74
 8006264:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	1891      	adds	r1, r2, r2
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	415b      	adcs	r3, r3
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006278:	4641      	mov	r1, r8
 800627a:	1851      	adds	r1, r2, r1
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	4649      	mov	r1, r9
 8006280:	414b      	adcs	r3, r1
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006290:	4659      	mov	r1, fp
 8006292:	00cb      	lsls	r3, r1, #3
 8006294:	4651      	mov	r1, sl
 8006296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629a:	4651      	mov	r1, sl
 800629c:	00ca      	lsls	r2, r1, #3
 800629e:	4610      	mov	r0, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	4642      	mov	r2, r8
 80062a6:	189b      	adds	r3, r3, r2
 80062a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062aa:	464b      	mov	r3, r9
 80062ac:	460a      	mov	r2, r1
 80062ae:	eb42 0303 	adc.w	r3, r2, r3
 80062b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	663b      	str	r3, [r7, #96]	; 0x60
 80062be:	667a      	str	r2, [r7, #100]	; 0x64
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062cc:	4649      	mov	r1, r9
 80062ce:	008b      	lsls	r3, r1, #2
 80062d0:	4641      	mov	r1, r8
 80062d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d6:	4641      	mov	r1, r8
 80062d8:	008a      	lsls	r2, r1, #2
 80062da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062de:	f7fa fcdb 	bl	8000c98 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <UART_SetConfig+0x4e4>)
 80062e8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	2164      	movs	r1, #100	; 0x64
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	3332      	adds	r3, #50	; 0x32
 80062fa:	4a08      	ldr	r2, [pc, #32]	; (800631c <UART_SetConfig+0x4e4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4422      	add	r2, r4
 800630e:	609a      	str	r2, [r3, #8]
}
 8006310:	bf00      	nop
 8006312:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006316:	46bd      	mov	sp, r7
 8006318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800631c:	51eb851f 	.word	0x51eb851f

08006320 <__NVIC_SetPriority>:
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	6039      	str	r1, [r7, #0]
 800632a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800632c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006330:	2b00      	cmp	r3, #0
 8006332:	db0a      	blt.n	800634a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	490c      	ldr	r1, [pc, #48]	; (800636c <__NVIC_SetPriority+0x4c>)
 800633a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	440b      	add	r3, r1
 8006344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006348:	e00a      	b.n	8006360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	4908      	ldr	r1, [pc, #32]	; (8006370 <__NVIC_SetPriority+0x50>)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	3b04      	subs	r3, #4
 8006358:	0112      	lsls	r2, r2, #4
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	440b      	add	r3, r1
 800635e:	761a      	strb	r2, [r3, #24]
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	e000e100 	.word	0xe000e100
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <SysTick_Handler+0x1c>)
 800637a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800637c:	f002 fb6c 	bl	8008a58 <xTaskGetSchedulerState>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d001      	beq.n	800638a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006386:	f003 fa4f 	bl	8009828 <xPortSysTickHandler>
  }
}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010

08006394 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006398:	2100      	movs	r1, #0
 800639a:	f06f 0004 	mvn.w	r0, #4
 800639e:	f7ff ffbf 	bl	8006320 <__NVIC_SetPriority>
#endif
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ae:	f3ef 8305 	mrs	r3, IPSR
 80063b2:	603b      	str	r3, [r7, #0]
  return(result);
 80063b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063ba:	f06f 0305 	mvn.w	r3, #5
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	e00c      	b.n	80063dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <osKernelInitialize+0x44>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <osKernelInitialize+0x44>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	e002      	b.n	80063dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063dc:	687b      	ldr	r3, [r7, #4]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	200007dc 	.word	0x200007dc

080063f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	603b      	str	r3, [r7, #0]
  return(result);
 80063fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006402:	f06f 0305 	mvn.w	r3, #5
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e010      	b.n	800642c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <osKernelStart+0x48>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d109      	bne.n	8006426 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006412:	f7ff ffbf 	bl	8006394 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <osKernelStart+0x48>)
 8006418:	2202      	movs	r2, #2
 800641a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800641c:	f001 feb0 	bl	8008180 <vTaskStartScheduler>
      stat = osOK;
 8006420:	2300      	movs	r3, #0
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	e002      	b.n	800642c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800642c:	687b      	ldr	r3, [r7, #4]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200007dc 	.word	0x200007dc

0800643c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af04      	add	r7, sp, #16
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644c:	f3ef 8305 	mrs	r3, IPSR
 8006450:	617b      	str	r3, [r7, #20]
  return(result);
 8006452:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006454:	2b00      	cmp	r3, #0
 8006456:	d17e      	bne.n	8006556 <osThreadNew+0x11a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d07b      	beq.n	8006556 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006462:	2318      	movs	r3, #24
 8006464:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d045      	beq.n	8006502 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <osThreadNew+0x48>
        name = attr->name;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <osThreadNew+0x6e>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2b38      	cmp	r3, #56	; 0x38
 800649c:	d805      	bhi.n	80064aa <osThreadNew+0x6e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <osThreadNew+0x72>
        return (NULL);
 80064aa:	2300      	movs	r3, #0
 80064ac:	e054      	b.n	8006558 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <osThreadNew+0xa8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2ba7      	cmp	r3, #167	; 0xa7
 80064cc:	d90a      	bls.n	80064e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <osThreadNew+0xa8>
        mem = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e010      	b.n	8006506 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10c      	bne.n	8006506 <osThreadNew+0xca>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <osThreadNew+0xca>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <osThreadNew+0xca>
          mem = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e001      	b.n	8006506 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d110      	bne.n	800652e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006514:	9202      	str	r2, [sp, #8]
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f001 fbf6 	bl	8007d14 <xTaskCreateStatic>
 8006528:	4603      	mov	r3, r0
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	e013      	b.n	8006556 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d110      	bne.n	8006556 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	b29a      	uxth	r2, r3
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fc41 	bl	8007dce <xTaskCreate>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d001      	beq.n	8006556 <osThreadNew+0x11a>
            hTask = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006556:	693b      	ldr	r3, [r7, #16]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3728      	adds	r7, #40	; 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656c:	f3ef 8305 	mrs	r3, IPSR
 8006570:	60bb      	str	r3, [r7, #8]
  return(result);
 8006572:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006574:	2b00      	cmp	r3, #0
 8006576:	d174      	bne.n	8006662 <osMutexNew+0x102>
    if (attr != NULL) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <osMutexNew+0x26>
      type = attr->attr_bits;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e001      	b.n	800658a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <osMutexNew+0x3a>
      rmtx = 1U;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e001      	b.n	800659e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d15c      	bne.n	8006662 <osMutexNew+0x102>
      mem = -1;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d015      	beq.n	80065e0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d006      	beq.n	80065ca <osMutexNew+0x6a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b4f      	cmp	r3, #79	; 0x4f
 80065c2:	d902      	bls.n	80065ca <osMutexNew+0x6a>
          mem = 1;
 80065c4:	2301      	movs	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	e00c      	b.n	80065e4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <osMutexNew+0x84>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <osMutexNew+0x84>
            mem = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e001      	b.n	80065e4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d112      	bne.n	8006610 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4619      	mov	r1, r3
 80065f6:	2004      	movs	r0, #4
 80065f8:	f000 fc37 	bl	8006e6a <xQueueCreateMutexStatic>
 80065fc:	61f8      	str	r0, [r7, #28]
 80065fe:	e016      	b.n	800662e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4619      	mov	r1, r3
 8006606:	2001      	movs	r0, #1
 8006608:	f000 fc2f 	bl	8006e6a <xQueueCreateMutexStatic>
 800660c:	61f8      	str	r0, [r7, #28]
 800660e:	e00e      	b.n	800662e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800661c:	2004      	movs	r0, #4
 800661e:	f000 fc0c 	bl	8006e3a <xQueueCreateMutex>
 8006622:	61f8      	str	r0, [r7, #28]
 8006624:	e003      	b.n	800662e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006626:	2001      	movs	r0, #1
 8006628:	f000 fc07 	bl	8006e3a <xQueueCreateMutex>
 800662c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <osMutexNew+0xee>
        if (attr != NULL) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <osMutexNew+0xe2>
          name = attr->name;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e001      	b.n	8006646 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	69f8      	ldr	r0, [r7, #28]
 800664a:	f001 fadb 	bl	8007c04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <osMutexNew+0x102>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006662:	69fb      	ldr	r3, [r7, #28]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800668a:	f3ef 8305 	mrs	r3, IPSR
 800668e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006690:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006696:	f06f 0305 	mvn.w	r3, #5
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e02c      	b.n	80066f8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80066a4:	f06f 0303 	mvn.w	r3, #3
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e025      	b.n	80066f8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d011      	beq.n	80066d6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6938      	ldr	r0, [r7, #16]
 80066b6:	f000 fc27 	bl	8006f08 <xQueueTakeMutexRecursive>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d01b      	beq.n	80066f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80066c6:	f06f 0301 	mvn.w	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e014      	b.n	80066f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e010      	b.n	80066f8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6938      	ldr	r0, [r7, #16]
 80066da:	f000 ffbb 	bl	8007654 <xQueueSemaphoreTake>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d009      	beq.n	80066f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80066ea:	f06f 0301 	mvn.w	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e002      	b.n	80066f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066f2:	f06f 0302 	mvn.w	r3, #2
 80066f6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	60bb      	str	r3, [r7, #8]
  return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osMutexRelease+0x30>
    stat = osErrorISR;
 800672a:	f06f 0305 	mvn.w	r3, #5
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e01f      	b.n	8006772 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006738:	f06f 0303 	mvn.w	r3, #3
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e018      	b.n	8006772 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f000 fbaa 	bl	8006ea0 <xQueueGiveMutexRecursive>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d00f      	beq.n	8006772 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006752:	f06f 0302 	mvn.w	r3, #2
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e00b      	b.n	8006772 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800675a:	2300      	movs	r3, #0
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f000 fc71 	bl	8007048 <xQueueGenericSend>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d002      	beq.n	8006772 <osMutexRelease+0x70>
        stat = osErrorResource;
 800676c:	f06f 0302 	mvn.w	r3, #2
 8006770:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006772:	697b      	ldr	r3, [r7, #20]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	; 0x28
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678c:	f3ef 8305 	mrs	r3, IPSR
 8006790:	613b      	str	r3, [r7, #16]
  return(result);
 8006792:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006794:	2b00      	cmp	r3, #0
 8006796:	d175      	bne.n	8006884 <osSemaphoreNew+0x108>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d072      	beq.n	8006884 <osSemaphoreNew+0x108>
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d86e      	bhi.n	8006884 <osSemaphoreNew+0x108>
    mem = -1;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d015      	beq.n	80067de <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <osSemaphoreNew+0x4c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b4f      	cmp	r3, #79	; 0x4f
 80067c0:	d902      	bls.n	80067c8 <osSemaphoreNew+0x4c>
        mem = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e00c      	b.n	80067e2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <osSemaphoreNew+0x66>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <osSemaphoreNew+0x66>
          mem = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e001      	b.n	80067e2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d04c      	beq.n	8006884 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d128      	bne.n	8006842 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d10a      	bne.n	800680c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2203      	movs	r2, #3
 80067fc:	9200      	str	r2, [sp, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	2100      	movs	r1, #0
 8006802:	2001      	movs	r0, #1
 8006804:	f000 fa2a 	bl	8006c5c <xQueueGenericCreateStatic>
 8006808:	61f8      	str	r0, [r7, #28]
 800680a:	e005      	b.n	8006818 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800680c:	2203      	movs	r2, #3
 800680e:	2100      	movs	r1, #0
 8006810:	2001      	movs	r0, #1
 8006812:	f000 fa9b 	bl	8006d4c <xQueueGenericCreate>
 8006816:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d022      	beq.n	8006864 <osSemaphoreNew+0xe8>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01f      	beq.n	8006864 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	69f8      	ldr	r0, [r7, #28]
 800682c:	f000 fc0c 	bl	8007048 <xQueueGenericSend>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d016      	beq.n	8006864 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006836:	69f8      	ldr	r0, [r7, #28]
 8006838:	f001 f898 	bl	800796c <vQueueDelete>
            hSemaphore = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	e010      	b.n	8006864 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d108      	bne.n	800685a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	461a      	mov	r2, r3
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fb8f 	bl	8006f74 <xQueueCreateCountingSemaphoreStatic>
 8006856:	61f8      	str	r0, [r7, #28]
 8006858:	e004      	b.n	8006864 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fbc0 	bl	8006fe2 <xQueueCreateCountingSemaphore>
 8006862:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00c      	beq.n	8006884 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e001      	b.n	800687c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800687c:	6979      	ldr	r1, [r7, #20]
 800687e:	69f8      	ldr	r0, [r7, #28]
 8006880:	f001 f9c0 	bl	8007c04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006884:	69fb      	ldr	r3, [r7, #28]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80068a8:	f06f 0303 	mvn.w	r3, #3
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e039      	b.n	8006924 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b0:	f3ef 8305 	mrs	r3, IPSR
 80068b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d022      	beq.n	8006902 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80068c2:	f06f 0303 	mvn.w	r3, #3
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e02c      	b.n	8006924 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	461a      	mov	r2, r3
 80068d4:	2100      	movs	r1, #0
 80068d6:	6938      	ldr	r0, [r7, #16]
 80068d8:	f000 ffc8 	bl	800786c <xQueueReceiveFromISR>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d003      	beq.n	80068ea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80068e2:	f06f 0302 	mvn.w	r3, #2
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e01c      	b.n	8006924 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <osSemaphoreAcquire+0x94>
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <osSemaphoreAcquire+0xa0>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	e010      	b.n	8006924 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6938      	ldr	r0, [r7, #16]
 8006906:	f000 fea5 	bl	8007654 <xQueueSemaphoreTake>
 800690a:	4603      	mov	r3, r0
 800690c:	2b01      	cmp	r3, #1
 800690e:	d009      	beq.n	8006924 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006916:	f06f 0301 	mvn.w	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e002      	b.n	8006924 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800691e:	f06f 0302 	mvn.w	r3, #2
 8006922:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006924:	697b      	ldr	r3, [r7, #20]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800694a:	f06f 0303 	mvn.w	r3, #3
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e02c      	b.n	80069ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006952:	f3ef 8305 	mrs	r3, IPSR
 8006956:	60fb      	str	r3, [r7, #12]
  return(result);
 8006958:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01a      	beq.n	8006994 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	6938      	ldr	r0, [r7, #16]
 800696a:	f000 fd06 	bl	800737a <xQueueGiveFromISR>
 800696e:	4603      	mov	r3, r0
 8006970:	2b01      	cmp	r3, #1
 8006972:	d003      	beq.n	800697c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006974:	f06f 0302 	mvn.w	r3, #2
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	e017      	b.n	80069ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <osSemaphoreRelease+0x78>
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <osSemaphoreRelease+0x84>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	e00b      	b.n	80069ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006994:	2300      	movs	r3, #0
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6938      	ldr	r0, [r7, #16]
 800699c:	f000 fb54 	bl	8007048 <xQueueGenericSend>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d002      	beq.n	80069ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80069a6:	f06f 0302 	mvn.w	r3, #2
 80069aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80069ac:	697b      	ldr	r3, [r7, #20]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80069cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a06      	ldr	r2, [pc, #24]	; (80069ec <vApplicationGetIdleTaskMemory+0x30>)
 80069d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	200007e0 	.word	0x200007e0
 80069ec:	20000888 	.word	0x20000888

080069f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <vApplicationGetTimerTaskMemory+0x30>)
 8006a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a0e:	601a      	str	r2, [r3, #0]
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000a88 	.word	0x20000a88
 8006a20:	20000b30 	.word	0x20000b30

08006a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f103 0208 	add.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f103 0208 	add.w	r2, r3, #8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f103 0208 	add.w	r2, r3, #8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d103      	bne.n	8006ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e00c      	b.n	8006b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e002      	b.n	8006af4 <vListInsert+0x2e>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d2f6      	bcs.n	8006aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6892      	ldr	r2, [r2, #8]
 8006b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6852      	ldr	r2, [r2, #4]
 8006b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d103      	bne.n	8006b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bb6:	f002 fda5 	bl	8009704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	441a      	add	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	3b01      	subs	r3, #1
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	22ff      	movs	r2, #255	; 0xff
 8006bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d114      	bne.n	8006c36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01a      	beq.n	8006c4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3310      	adds	r3, #16
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 fd4b 	bl	80086b4 <xTaskRemoveFromEventList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <xQueueGenericReset+0xcc>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	e009      	b.n	8006c4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3310      	adds	r3, #16
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fef2 	bl	8006a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3324      	adds	r3, #36	; 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff feed 	bl	8006a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c4a:	f002 fd8b 	bl	8009764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c4e:	2301      	movs	r3, #1
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <xQueueGenericCreateStatic+0x52>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <xQueueGenericCreateStatic+0x56>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueGenericCreateStatic+0x58>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	623b      	str	r3, [r7, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <xQueueGenericCreateStatic+0x7e>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <xQueueGenericCreateStatic+0x82>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <xQueueGenericCreateStatic+0x84>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	61fb      	str	r3, [r7, #28]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cfa:	2350      	movs	r3, #80	; 0x50
 8006cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b50      	cmp	r3, #80	; 0x50
 8006d02:	d00a      	beq.n	8006d1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	61bb      	str	r3, [r7, #24]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f83f 	bl	8006dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3730      	adds	r7, #48	; 0x30
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	613b      	str	r3, [r7, #16]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3350      	adds	r3, #80	; 0x50
 8006d84:	4618      	mov	r0, r3
 8006d86:	f002 fddf 	bl	8009948 <pvPortMalloc>
 8006d8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	3350      	adds	r3, #80	; 0x50
 8006d9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006da4:	79fa      	ldrb	r2, [r7, #7]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4613      	mov	r3, r2
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f805 	bl	8006dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006db6:	69bb      	ldr	r3, [r7, #24]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dee:	2101      	movs	r1, #1
 8006df0:	69b8      	ldr	r0, [r7, #24]
 8006df2:	f7ff fecb 	bl	8006b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e26:	2300      	movs	r3, #0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f90b 	bl	8007048 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	4603      	mov	r3, r0
 8006e42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6939      	ldr	r1, [r7, #16]
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f7ff ff7a 	bl	8006d4c <xQueueGenericCreate>
 8006e58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff ffd3 	bl	8006e06 <prvInitialiseMutex>

		return xNewQueue;
 8006e60:	68fb      	ldr	r3, [r7, #12]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b088      	sub	sp, #32
 8006e6e:	af02      	add	r7, sp, #8
 8006e70:	4603      	mov	r3, r0
 8006e72:	6039      	str	r1, [r7, #0]
 8006e74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e76:	2301      	movs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f7ff fee7 	bl	8006c5c <xQueueGenericCreateStatic>
 8006e8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff ffb8 	bl	8006e06 <prvInitialiseMutex>

		return xNewQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60fb      	str	r3, [r7, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	689c      	ldr	r4, [r3, #8]
 8006ecc:	f001 fdb4 	bl	8008a38 <xTaskGetCurrentTaskHandle>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d111      	bne.n	8006efa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2200      	movs	r2, #0
 8006eec:	2100      	movs	r1, #0
 8006eee:	6938      	ldr	r0, [r7, #16]
 8006ef0:	f000 f8aa 	bl	8007048 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e001      	b.n	8006efe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006efe:	697b      	ldr	r3, [r7, #20]
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd90      	pop	{r4, r7, pc}

08006f08 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	689c      	ldr	r4, [r3, #8]
 8006f36:	f001 fd7f 	bl	8008a38 <xTaskGetCurrentTaskHandle>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d107      	bne.n	8006f50 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	e00c      	b.n	8006f6a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6938      	ldr	r0, [r7, #16]
 8006f54:	f000 fb7e 	bl	8007654 <xQueueSemaphoreTake>
 8006f58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
	}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd90      	pop	{r4, r7, pc}

08006f74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	61bb      	str	r3, [r7, #24]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d90a      	bls.n	8006fba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	617b      	str	r3, [r7, #20]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006fba:	2302      	movs	r3, #2
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff fe49 	bl	8006c5c <xQueueGenericCreateStatic>
 8006fca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
	}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	613b      	str	r3, [r7, #16]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d90a      	bls.n	8007026 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007026:	2202      	movs	r2, #2
 8007028:	2100      	movs	r1, #0
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fe8e 	bl	8006d4c <xQueueGenericCreate>
 8007030:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800703e:	697b      	ldr	r3, [r7, #20]
	}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xQueueGenericSend+0x32>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <xQueueGenericSend+0x40>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <xQueueGenericSend+0x44>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <xQueueGenericSend+0x46>
 800708c:	2300      	movs	r3, #0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <xQueueGenericSend+0x60>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <xQueueGenericSend+0x6e>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <xQueueGenericSend+0x72>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <xQueueGenericSend+0x74>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	623b      	str	r3, [r7, #32]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070d6:	f001 fcbf 	bl	8008a58 <xTaskGetSchedulerState>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <xQueueGenericSend+0x9e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <xQueueGenericSend+0xa2>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <xQueueGenericSend+0xa4>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xQueueGenericSend+0xbe>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	61fb      	str	r3, [r7, #28]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007106:	f002 fafd 	bl	8009704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <xQueueGenericSend+0xd4>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d129      	bne.n	8007170 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007122:	f000 fc5e 	bl	80079e2 <prvCopyDataToQueue>
 8007126:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	3324      	adds	r3, #36	; 0x24
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fabd 	bl	80086b4 <xTaskRemoveFromEventList>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007140:	4b3f      	ldr	r3, [pc, #252]	; (8007240 <xQueueGenericSend+0x1f8>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	e00a      	b.n	8007168 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007158:	4b39      	ldr	r3, [pc, #228]	; (8007240 <xQueueGenericSend+0x1f8>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007168:	f002 fafc 	bl	8009764 <vPortExitCritical>
				return pdPASS;
 800716c:	2301      	movs	r3, #1
 800716e:	e063      	b.n	8007238 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007176:	f002 faf5 	bl	8009764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800717a:	2300      	movs	r3, #0
 800717c:	e05c      	b.n	8007238 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007184:	f107 0314 	add.w	r3, r7, #20
 8007188:	4618      	mov	r0, r3
 800718a:	f001 faf7 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007192:	f002 fae7 	bl	8009764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007196:	f001 f863 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800719a:	f002 fab3 	bl	8009704 <vPortEnterCritical>
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a4:	b25b      	sxtb	r3, r3
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d103      	bne.n	80071b4 <xQueueGenericSend+0x16c>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d103      	bne.n	80071ca <xQueueGenericSend+0x182>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ca:	f002 facb 	bl	8009764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ce:	1d3a      	adds	r2, r7, #4
 80071d0:	f107 0314 	add.w	r3, r7, #20
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fae6 	bl	80087a8 <xTaskCheckForTimeOut>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d124      	bne.n	800722c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e4:	f000 fcf5 	bl	8007bd2 <prvIsQueueFull>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d018      	beq.n	8007220 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	3310      	adds	r3, #16
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fa0c 	bl	8008614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071fe:	f000 fc80 	bl	8007b02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007202:	f001 f83b 	bl	800827c <xTaskResumeAll>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	f47f af7c 	bne.w	8007106 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <xQueueGenericSend+0x1f8>)
 8007210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	e772      	b.n	8007106 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007222:	f000 fc6e 	bl	8007b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007226:	f001 f829 	bl	800827c <xTaskResumeAll>
 800722a:	e76c      	b.n	8007106 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800722c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722e:	f000 fc68 	bl	8007b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007232:	f001 f823 	bl	800827c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007236:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007238:	4618      	mov	r0, r3
 800723a:	3738      	adds	r7, #56	; 0x38
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b090      	sub	sp, #64	; 0x40
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d103      	bne.n	8007280 <xQueueGenericSendFromISR+0x3c>
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <xQueueGenericSendFromISR+0x40>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <xQueueGenericSendFromISR+0x42>
 8007284:	2300      	movs	r3, #0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d103      	bne.n	80072ae <xQueueGenericSendFromISR+0x6a>
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <xQueueGenericSendFromISR+0x6e>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueGenericSendFromISR+0x70>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	623b      	str	r3, [r7, #32]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ce:	f002 fafb 	bl	80098c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072d2:	f3ef 8211 	mrs	r2, BASEPRI
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	61fa      	str	r2, [r7, #28]
 80072e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <xQueueGenericSendFromISR+0xbc>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d12f      	bne.n	8007360 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007316:	f000 fb64 	bl	80079e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800731a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d112      	bne.n	800734a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d016      	beq.n	800735a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f9bf 	bl	80086b4 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00e      	beq.n	800735a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e007      	b.n	800735a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800734a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800734e:	3301      	adds	r3, #1
 8007350:	b2db      	uxtb	r3, r3
 8007352:	b25a      	sxtb	r2, r3
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800735a:	2301      	movs	r3, #1
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800735e:	e001      	b.n	8007364 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007360:	2300      	movs	r3, #0
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800736e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007372:	4618      	mov	r0, r3
 8007374:	3740      	adds	r7, #64	; 0x40
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08e      	sub	sp, #56	; 0x38
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	623b      	str	r3, [r7, #32]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	61fb      	str	r3, [r7, #28]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <xQueueGiveFromISR+0x58>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <xQueueGiveFromISR+0x5c>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <xQueueGiveFromISR+0x5e>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61bb      	str	r3, [r7, #24]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073f2:	f002 fa69 	bl	80098c8 <vPortValidateInterruptPriority>
	__asm volatile
 80073f6:	f3ef 8211 	mrs	r2, BASEPRI
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	617a      	str	r2, [r7, #20]
 800740c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800740e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800741e:	429a      	cmp	r2, r3
 8007420:	d22b      	bcs.n	800747a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d112      	bne.n	8007464 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d016      	beq.n	8007474 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	3324      	adds	r3, #36	; 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f001 f932 	bl	80086b4 <xTaskRemoveFromEventList>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e007      	b.n	8007474 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007468:	3301      	adds	r3, #1
 800746a:	b2db      	uxtb	r3, r3
 800746c:	b25a      	sxtb	r2, r3
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007474:	2301      	movs	r3, #1
 8007476:	637b      	str	r3, [r7, #52]	; 0x34
 8007478:	e001      	b.n	800747e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800747a:	2300      	movs	r3, #0
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f383 8811 	msr	BASEPRI, r3
}
 8007488:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800748c:	4618      	mov	r0, r3
 800748e:	3738      	adds	r7, #56	; 0x38
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08c      	sub	sp, #48	; 0x30
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <xQueueReceive+0x30>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	623b      	str	r3, [r7, #32]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <xQueueReceive+0x3e>
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <xQueueReceive+0x42>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueReceive+0x44>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueReceive+0x5e>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	61fb      	str	r3, [r7, #28]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074f2:	f001 fab1 	bl	8008a58 <xTaskGetSchedulerState>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <xQueueReceive+0x6e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <xQueueReceive+0x72>
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <xQueueReceive+0x74>
 8007506:	2300      	movs	r3, #0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xQueueReceive+0x8e>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	61bb      	str	r3, [r7, #24]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007522:	f002 f8ef 	bl	8009704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01f      	beq.n	8007572 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007536:	f000 fabe 	bl	8007ab6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00f      	beq.n	800756a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	3310      	adds	r3, #16
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f8b0 	bl	80086b4 <xTaskRemoveFromEventList>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800755a:	4b3d      	ldr	r3, [pc, #244]	; (8007650 <xQueueReceive+0x1bc>)
 800755c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800756a:	f002 f8fb 	bl	8009764 <vPortExitCritical>
				return pdPASS;
 800756e:	2301      	movs	r3, #1
 8007570:	e069      	b.n	8007646 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007578:	f002 f8f4 	bl	8009764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800757c:	2300      	movs	r3, #0
 800757e:	e062      	b.n	8007646 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007586:	f107 0310 	add.w	r3, r7, #16
 800758a:	4618      	mov	r0, r3
 800758c:	f001 f8f6 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007594:	f002 f8e6 	bl	8009764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007598:	f000 fe62 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800759c:	f002 f8b2 	bl	8009704 <vPortEnterCritical>
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d103      	bne.n	80075b6 <xQueueReceive+0x122>
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075bc:	b25b      	sxtb	r3, r3
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d103      	bne.n	80075cc <xQueueReceive+0x138>
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075cc:	f002 f8ca 	bl	8009764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075d0:	1d3a      	adds	r2, r7, #4
 80075d2:	f107 0310 	add.w	r3, r7, #16
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f8e5 	bl	80087a8 <xTaskCheckForTimeOut>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d123      	bne.n	800762c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e6:	f000 fade 	bl	8007ba6 <prvIsQueueEmpty>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d017      	beq.n	8007620 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 f80b 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007600:	f000 fa7f 	bl	8007b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007604:	f000 fe3a 	bl	800827c <xTaskResumeAll>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d189      	bne.n	8007522 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <xQueueReceive+0x1bc>)
 8007610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	e780      	b.n	8007522 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007622:	f000 fa6e 	bl	8007b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007626:	f000 fe29 	bl	800827c <xTaskResumeAll>
 800762a:	e77a      	b.n	8007522 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800762c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762e:	f000 fa68 	bl	8007b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007632:	f000 fe23 	bl	800827c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007638:	f000 fab5 	bl	8007ba6 <prvIsQueueEmpty>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	f43f af6f 	beq.w	8007522 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007646:	4618      	mov	r0, r3
 8007648:	3730      	adds	r7, #48	; 0x30
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08e      	sub	sp, #56	; 0x38
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800765e:	2300      	movs	r3, #0
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	623b      	str	r3, [r7, #32]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	61fb      	str	r3, [r7, #28]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076a4:	f001 f9d8 	bl	8008a58 <xTaskGetSchedulerState>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <xQueueSemaphoreTake+0x60>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <xQueueSemaphoreTake+0x64>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <xQueueSemaphoreTake+0x66>
 80076b8:	2300      	movs	r3, #0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61bb      	str	r3, [r7, #24]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076d4:	f002 f816 	bl	8009704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d024      	beq.n	800772e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076f4:	f001 fb26 	bl	8008d44 <pvTaskIncrementMutexHeldCount>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00f      	beq.n	8007726 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	3310      	adds	r3, #16
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ffd2 	bl	80086b4 <xTaskRemoveFromEventList>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007716:	4b54      	ldr	r3, [pc, #336]	; (8007868 <xQueueSemaphoreTake+0x214>)
 8007718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007726:	f002 f81d 	bl	8009764 <vPortExitCritical>
				return pdPASS;
 800772a:	2301      	movs	r3, #1
 800772c:	e097      	b.n	800785e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d111      	bne.n	8007758 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	617b      	str	r3, [r7, #20]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007750:	f002 f808 	bl	8009764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007754:	2300      	movs	r3, #0
 8007756:	e082      	b.n	800785e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800775e:	f107 030c 	add.w	r3, r7, #12
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f80a 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800776c:	f001 fffa 	bl	8009764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007770:	f000 fd76 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007774:	f001 ffc6 	bl	8009704 <vPortEnterCritical>
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800777e:	b25b      	sxtb	r3, r3
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d103      	bne.n	800778e <xQueueSemaphoreTake+0x13a>
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007794:	b25b      	sxtb	r3, r3
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d103      	bne.n	80077a4 <xQueueSemaphoreTake+0x150>
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077a4:	f001 ffde 	bl	8009764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077a8:	463a      	mov	r2, r7
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fff9 	bl	80087a8 <xTaskCheckForTimeOut>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d132      	bne.n	8007822 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077be:	f000 f9f2 	bl	8007ba6 <prvIsQueueEmpty>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d026      	beq.n	8007816 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80077d0:	f001 ff98 	bl	8009704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f95b 	bl	8008a94 <xTaskPriorityInherit>
 80077de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80077e0:	f001 ffc0 	bl	8009764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 ff11 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f4:	f000 f985 	bl	8007b02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f8:	f000 fd40 	bl	800827c <xTaskResumeAll>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f47f af68 	bne.w	80076d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007804:	4b18      	ldr	r3, [pc, #96]	; (8007868 <xQueueSemaphoreTake+0x214>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	e75e      	b.n	80076d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007818:	f000 f973 	bl	8007b02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800781c:	f000 fd2e 	bl	800827c <xTaskResumeAll>
 8007820:	e758      	b.n	80076d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007824:	f000 f96d 	bl	8007b02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007828:	f000 fd28 	bl	800827c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800782c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800782e:	f000 f9ba 	bl	8007ba6 <prvIsQueueEmpty>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	f43f af4d 	beq.w	80076d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007840:	f001 ff60 	bl	8009704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007846:	f000 f8b4 	bl	80079b2 <prvGetDisinheritPriorityAfterTimeout>
 800784a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f9f4 	bl	8008c40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007858:	f001 ff84 	bl	8009764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800785c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800785e:	4618      	mov	r0, r3
 8007860:	3738      	adds	r7, #56	; 0x38
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	; 0x38
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	623b      	str	r3, [r7, #32]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <xQueueReceiveFromISR+0x3a>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <xQueueReceiveFromISR+0x3e>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <xQueueReceiveFromISR+0x40>
 80078aa:	2300      	movs	r3, #0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61fb      	str	r3, [r7, #28]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078c6:	f001 ffff 	bl	80098c8 <vPortValidateInterruptPriority>
	__asm volatile
 80078ca:	f3ef 8211 	mrs	r2, BASEPRI
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61ba      	str	r2, [r7, #24]
 80078e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d02f      	beq.n	8007952 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007900:	f000 f8d9 	bl	8007ab6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800790c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d112      	bne.n	800793c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d016      	beq.n	800794c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	3310      	adds	r3, #16
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fec6 	bl	80086b4 <xTaskRemoveFromEventList>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e007      	b.n	800794c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007940:	3301      	adds	r3, #1
 8007942:	b2db      	uxtb	r3, r3
 8007944:	b25a      	sxtb	r2, r3
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800794c:	2301      	movs	r3, #1
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	e001      	b.n	8007956 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007952:	2300      	movs	r3, #0
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	613b      	str	r3, [r7, #16]
	__asm volatile
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f383 8811 	msr	BASEPRI, r3
}
 8007960:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007964:	4618      	mov	r0, r3
 8007966:	3738      	adds	r7, #56	; 0x38
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <vQueueDelete+0x28>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f95f 	bl	8007c58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f002 f89b 	bl	8009ae0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e001      	b.n	80079d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80079d4:	68fb      	ldr	r3, [r7, #12]
	}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10d      	bne.n	8007a1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d14d      	bne.n	8007aa4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f8a9 	bl	8008b64 <xTaskPriorityDisinherit>
 8007a12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	609a      	str	r2, [r3, #8]
 8007a1a:	e043      	b.n	8007aa4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d119      	bne.n	8007a56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6858      	ldr	r0, [r3, #4]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	f002 ffea 	bl	800aa06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d32b      	bcc.n	8007aa4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	e026      	b.n	8007aa4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68d8      	ldr	r0, [r3, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	f002 ffd0 	bl	800aa06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	425b      	negs	r3, r3
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d207      	bcs.n	8007a92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	425b      	negs	r3, r3
 8007a8c:	441a      	add	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d105      	bne.n	8007aa4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007aac:	697b      	ldr	r3, [r7, #20]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d018      	beq.n	8007afa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	441a      	add	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d303      	bcc.n	8007aea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68d9      	ldr	r1, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	461a      	mov	r2, r3
 8007af4:	6838      	ldr	r0, [r7, #0]
 8007af6:	f002 ff86 	bl	800aa06 <memcpy>
	}
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b0a:	f001 fdfb 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b16:	e011      	b.n	8007b3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d012      	beq.n	8007b46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fdc5 	bl	80086b4 <xTaskRemoveFromEventList>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b30:	f000 fe9c 	bl	800886c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dce9      	bgt.n	8007b18 <prvUnlockQueue+0x16>
 8007b44:	e000      	b.n	8007b48 <prvUnlockQueue+0x46>
					break;
 8007b46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	22ff      	movs	r2, #255	; 0xff
 8007b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b50:	f001 fe08 	bl	8009764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b54:	f001 fdd6 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b60:	e011      	b.n	8007b86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d012      	beq.n	8007b90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fda0 	bl	80086b4 <xTaskRemoveFromEventList>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b7a:	f000 fe77 	bl	800886c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dce9      	bgt.n	8007b62 <prvUnlockQueue+0x60>
 8007b8e:	e000      	b.n	8007b92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b9a:	f001 fde3 	bl	8009764 <vPortExitCritical>
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bae:	f001 fda9 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e001      	b.n	8007bc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bc4:	f001 fdce 	bl	8009764 <vPortExitCritical>

	return xReturn;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bda:	f001 fd93 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d102      	bne.n	8007bf0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bea:	2301      	movs	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e001      	b.n	8007bf4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bf4:	f001 fdb6 	bl	8009764 <vPortExitCritical>

	return xReturn;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	e014      	b.n	8007c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c14:	4a0f      	ldr	r2, [pc, #60]	; (8007c54 <vQueueAddToRegistry+0x50>)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10b      	bne.n	8007c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c20:	490c      	ldr	r1, [pc, #48]	; (8007c54 <vQueueAddToRegistry+0x50>)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c2a:	4a0a      	ldr	r2, [pc, #40]	; (8007c54 <vQueueAddToRegistry+0x50>)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c36:	e006      	b.n	8007c46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b07      	cmp	r3, #7
 8007c42:	d9e7      	bls.n	8007c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000f30 	.word	0x20000f30

08007c58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e016      	b.n	8007c94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007c66:	4a10      	ldr	r2, [pc, #64]	; (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d10b      	bne.n	8007c8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007c76:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	605a      	str	r2, [r3, #4]
				break;
 8007c8c:	e006      	b.n	8007c9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b07      	cmp	r3, #7
 8007c98:	d9e5      	bls.n	8007c66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	20000f30 	.word	0x20000f30

08007cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cbc:	f001 fd22 	bl	8009704 <vPortEnterCritical>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d103      	bne.n	8007cd6 <vQueueWaitForMessageRestricted+0x2a>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cdc:	b25b      	sxtb	r3, r3
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d103      	bne.n	8007cec <vQueueWaitForMessageRestricted+0x40>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cec:	f001 fd3a 	bl	8009764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fcab 	bl	800865c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d06:	6978      	ldr	r0, [r7, #20]
 8007d08:	f7ff fefb 	bl	8007b02 <prvUnlockQueue>
	}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08e      	sub	sp, #56	; 0x38
 8007d18:	af04      	add	r7, sp, #16
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	623b      	str	r3, [r7, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61fb      	str	r3, [r7, #28]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d5a:	23a8      	movs	r3, #168	; 0xa8
 8007d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2ba8      	cmp	r3, #168	; 0xa8
 8007d62:	d00a      	beq.n	8007d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	61bb      	str	r3, [r7, #24]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01e      	beq.n	8007dc0 <xTaskCreateStatic+0xac>
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f850 	bl	8007e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dba:	f000 f8f3 	bl	8007fa4 <prvAddNewTaskToReadyList>
 8007dbe:	e001      	b.n	8007dc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007dc4:	697b      	ldr	r3, [r7, #20]
	}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3728      	adds	r7, #40	; 0x28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b08c      	sub	sp, #48	; 0x30
 8007dd2:	af04      	add	r7, sp, #16
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fdb0 	bl	8009948 <pvPortMalloc>
 8007de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00e      	beq.n	8007e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007df0:	20a8      	movs	r0, #168	; 0xa8
 8007df2:	f001 fda9 	bl	8009948 <pvPortMalloc>
 8007df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
 8007e04:	e005      	b.n	8007e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e06:	6978      	ldr	r0, [r7, #20]
 8007e08:	f001 fe6a 	bl	8009ae0 <vPortFree>
 8007e0c:	e001      	b.n	8007e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d017      	beq.n	8007e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e20:	88fa      	ldrh	r2, [r7, #6]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f80e 	bl	8007e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e3c:	69f8      	ldr	r0, [r7, #28]
 8007e3e:	f000 f8b1 	bl	8007fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e42:	2301      	movs	r3, #1
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e002      	b.n	8007e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e48:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	21a5      	movs	r1, #165	; 0xa5
 8007e72:	f002 fcf2 	bl	800a85a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e80:	3b01      	subs	r3, #1
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	617b      	str	r3, [r7, #20]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01f      	beq.n	8007ef6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	e012      	b.n	8007ee2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	7819      	ldrb	r1, [r3, #0]
 8007ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	3334      	adds	r3, #52	; 0x34
 8007ecc:	460a      	mov	r2, r1
 8007ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	2b0f      	cmp	r3, #15
 8007ee6:	d9e9      	bls.n	8007ebc <prvInitialiseNewTask+0x64>
 8007ee8:	e000      	b.n	8007eec <prvInitialiseNewTask+0x94>
			{
				break;
 8007eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef4:	e003      	b.n	8007efe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	2b37      	cmp	r3, #55	; 0x37
 8007f02:	d901      	bls.n	8007f08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f04:	2337      	movs	r3, #55	; 0x37
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	2200      	movs	r2, #0
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fda0 	bl	8006a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	3318      	adds	r3, #24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fd9b 	bl	8006a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	3354      	adds	r3, #84	; 0x54
 8007f58:	224c      	movs	r2, #76	; 0x4c
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f002 fc7c 	bl	800a85a <memset>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <prvInitialiseNewTask+0x140>)
 8007f66:	659a      	str	r2, [r3, #88]	; 0x58
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <prvInitialiseNewTask+0x144>)
 8007f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <prvInitialiseNewTask+0x148>)
 8007f72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	68f9      	ldr	r1, [r7, #12]
 8007f78:	69b8      	ldr	r0, [r7, #24]
 8007f7a:	f001 fa99 	bl	80094b0 <pxPortInitialiseStack>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f90:	bf00      	nop
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	200051c4 	.word	0x200051c4
 8007f9c:	2000522c 	.word	0x2000522c
 8007fa0:	20005294 	.word	0x20005294

08007fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fac:	f001 fbaa 	bl	8009704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fb0:	4b2d      	ldr	r3, [pc, #180]	; (8008068 <prvAddNewTaskToReadyList+0xc4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	4a2c      	ldr	r2, [pc, #176]	; (8008068 <prvAddNewTaskToReadyList+0xc4>)
 8007fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fba:	4b2c      	ldr	r3, [pc, #176]	; (800806c <prvAddNewTaskToReadyList+0xc8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fc2:	4a2a      	ldr	r2, [pc, #168]	; (800806c <prvAddNewTaskToReadyList+0xc8>)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fc8:	4b27      	ldr	r3, [pc, #156]	; (8008068 <prvAddNewTaskToReadyList+0xc4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d110      	bne.n	8007ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fd0:	f000 fc70 	bl	80088b4 <prvInitialiseTaskLists>
 8007fd4:	e00d      	b.n	8007ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fd6:	4b26      	ldr	r3, [pc, #152]	; (8008070 <prvAddNewTaskToReadyList+0xcc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fde:	4b23      	ldr	r3, [pc, #140]	; (800806c <prvAddNewTaskToReadyList+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d802      	bhi.n	8007ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fec:	4a1f      	ldr	r2, [pc, #124]	; (800806c <prvAddNewTaskToReadyList+0xc8>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ff2:	4b20      	ldr	r3, [pc, #128]	; (8008074 <prvAddNewTaskToReadyList+0xd0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <prvAddNewTaskToReadyList+0xd0>)
 8007ffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <prvAddNewTaskToReadyList+0xd0>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <prvAddNewTaskToReadyList+0xd4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d903      	bls.n	8008018 <prvAddNewTaskToReadyList+0x74>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	4a18      	ldr	r2, [pc, #96]	; (8008078 <prvAddNewTaskToReadyList+0xd4>)
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <prvAddNewTaskToReadyList+0xd8>)
 8008026:	441a      	add	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f7fe fd25 	bl	8006a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008034:	f001 fb96 	bl	8009764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <prvAddNewTaskToReadyList+0xcc>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00e      	beq.n	800805e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <prvAddNewTaskToReadyList+0xc8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	429a      	cmp	r2, r3
 800804c:	d207      	bcs.n	800805e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <prvAddNewTaskToReadyList+0xdc>)
 8008050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20001444 	.word	0x20001444
 800806c:	20000f70 	.word	0x20000f70
 8008070:	20001450 	.word	0x20001450
 8008074:	20001460 	.word	0x20001460
 8008078:	2000144c 	.word	0x2000144c
 800807c:	20000f74 	.word	0x20000f74
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800808e:	2300      	movs	r3, #0
 8008090:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <vTaskDelayUntil+0x2a>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	617b      	str	r3, [r7, #20]
}
 80080aa:	bf00      	nop
 80080ac:	e7fe      	b.n	80080ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <vTaskDelayUntil+0x46>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	613b      	str	r3, [r7, #16]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80080ca:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <vTaskDelayUntil+0xf0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <vTaskDelayUntil+0x64>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60fb      	str	r3, [r7, #12]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80080e8:	f000 f8ba 	bl	8008260 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80080ec:	4b22      	ldr	r3, [pc, #136]	; (8008178 <vTaskDelayUntil+0xf4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4413      	add	r3, r2
 80080fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	429a      	cmp	r2, r3
 8008104:	d20b      	bcs.n	800811e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	429a      	cmp	r2, r3
 800810e:	d211      	bcs.n	8008134 <vTaskDelayUntil+0xb0>
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	429a      	cmp	r2, r3
 8008116:	d90d      	bls.n	8008134 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
 800811c:	e00a      	b.n	8008134 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	429a      	cmp	r2, r3
 8008126:	d303      	bcc.n	8008130 <vTaskDelayUntil+0xac>
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	429a      	cmp	r2, r3
 800812e:	d901      	bls.n	8008134 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fe0f 	bl	8008d6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800814e:	f000 f895 	bl	800827c <xTaskResumeAll>
 8008152:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d107      	bne.n	800816a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800815a:	4b08      	ldr	r3, [pc, #32]	; (800817c <vTaskDelayUntil+0xf8>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800816a:	bf00      	nop
 800816c:	3728      	adds	r7, #40	; 0x28
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	2000146c 	.word	0x2000146c
 8008178:	20001448 	.word	0x20001448
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800818e:	463a      	mov	r2, r7
 8008190:	1d39      	adds	r1, r7, #4
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fc10 	bl	80069bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	9202      	str	r2, [sp, #8]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	460a      	mov	r2, r1
 80081ae:	4924      	ldr	r1, [pc, #144]	; (8008240 <vTaskStartScheduler+0xc0>)
 80081b0:	4824      	ldr	r0, [pc, #144]	; (8008244 <vTaskStartScheduler+0xc4>)
 80081b2:	f7ff fdaf 	bl	8007d14 <xTaskCreateStatic>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4a23      	ldr	r2, [pc, #140]	; (8008248 <vTaskStartScheduler+0xc8>)
 80081ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081bc:	4b22      	ldr	r3, [pc, #136]	; (8008248 <vTaskStartScheduler+0xc8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e001      	b.n	80081ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081d4:	f000 fe1e 	bl	8008e14 <xTimerCreateTimerTask>
 80081d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d11b      	bne.n	8008218 <vTaskStartScheduler+0x98>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <vTaskStartScheduler+0xcc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3354      	adds	r3, #84	; 0x54
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <vTaskStartScheduler+0xd0>)
 80081fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <vTaskStartScheduler+0xd4>)
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <vTaskStartScheduler+0xd8>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800820c:	4b13      	ldr	r3, [pc, #76]	; (800825c <vTaskStartScheduler+0xdc>)
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008212:	f001 f9d5 	bl	80095c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008216:	e00e      	b.n	8008236 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d10a      	bne.n	8008236 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <vTaskStartScheduler+0xb4>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	0800cc5c 	.word	0x0800cc5c
 8008244:	08008885 	.word	0x08008885
 8008248:	20001468 	.word	0x20001468
 800824c:	20000f70 	.word	0x20000f70
 8008250:	2000007c 	.word	0x2000007c
 8008254:	20001464 	.word	0x20001464
 8008258:	20001450 	.word	0x20001450
 800825c:	20001448 	.word	0x20001448

08008260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <vTaskSuspendAll+0x18>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	4a03      	ldr	r2, [pc, #12]	; (8008278 <vTaskSuspendAll+0x18>)
 800826c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800826e:	bf00      	nop
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	2000146c 	.word	0x2000146c

0800827c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800828a:	4b42      	ldr	r3, [pc, #264]	; (8008394 <xTaskResumeAll+0x118>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	603b      	str	r3, [r7, #0]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082a8:	f001 fa2c 	bl	8009704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082ac:	4b39      	ldr	r3, [pc, #228]	; (8008394 <xTaskResumeAll+0x118>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	4a38      	ldr	r2, [pc, #224]	; (8008394 <xTaskResumeAll+0x118>)
 80082b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b6:	4b37      	ldr	r3, [pc, #220]	; (8008394 <xTaskResumeAll+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d162      	bne.n	8008384 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082be:	4b36      	ldr	r3, [pc, #216]	; (8008398 <xTaskResumeAll+0x11c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d05e      	beq.n	8008384 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082c6:	e02f      	b.n	8008328 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c8:	4b34      	ldr	r3, [pc, #208]	; (800839c <xTaskResumeAll+0x120>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3318      	adds	r3, #24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fc2f 	bl	8006b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fc2a 	bl	8006b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <xTaskResumeAll+0x124>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d903      	bls.n	80082f8 <xTaskResumeAll+0x7c>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	4a2a      	ldr	r2, [pc, #168]	; (80083a0 <xTaskResumeAll+0x124>)
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4a27      	ldr	r2, [pc, #156]	; (80083a4 <xTaskResumeAll+0x128>)
 8008306:	441a      	add	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe fbb5 	bl	8006a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4b23      	ldr	r3, [pc, #140]	; (80083a8 <xTaskResumeAll+0x12c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <xTaskResumeAll+0x130>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <xTaskResumeAll+0x120>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1cb      	bne.n	80082c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008336:	f000 fb5f 	bl	80089f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800833a:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <xTaskResumeAll+0x134>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d010      	beq.n	8008368 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008346:	f000 f847 	bl	80083d8 <xTaskIncrementTick>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008350:	4b16      	ldr	r3, [pc, #88]	; (80083ac <xTaskResumeAll+0x130>)
 8008352:	2201      	movs	r2, #1
 8008354:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3b01      	subs	r3, #1
 800835a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f1      	bne.n	8008346 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <xTaskResumeAll+0x134>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <xTaskResumeAll+0x130>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTaskResumeAll+0x138>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008384:	f001 f9ee 	bl	8009764 <vPortExitCritical>

	return xAlreadyYielded;
 8008388:	68bb      	ldr	r3, [r7, #8]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	2000146c 	.word	0x2000146c
 8008398:	20001444 	.word	0x20001444
 800839c:	20001404 	.word	0x20001404
 80083a0:	2000144c 	.word	0x2000144c
 80083a4:	20000f74 	.word	0x20000f74
 80083a8:	20000f70 	.word	0x20000f70
 80083ac:	20001458 	.word	0x20001458
 80083b0:	20001454 	.word	0x20001454
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <xTaskGetTickCount+0x1c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083c4:	687b      	ldr	r3, [r7, #4]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20001448 	.word	0x20001448

080083d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e2:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <xTaskIncrementTick+0x148>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 808f 	bne.w	800850a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <xTaskIncrementTick+0x14c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f4:	4a4b      	ldr	r2, [pc, #300]	; (8008524 <xTaskIncrementTick+0x14c>)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d120      	bne.n	8008442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008400:	4b49      	ldr	r3, [pc, #292]	; (8008528 <xTaskIncrementTick+0x150>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <xTaskIncrementTick+0x48>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	603b      	str	r3, [r7, #0]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xTaskIncrementTick+0x46>
 8008420:	4b41      	ldr	r3, [pc, #260]	; (8008528 <xTaskIncrementTick+0x150>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	4b41      	ldr	r3, [pc, #260]	; (800852c <xTaskIncrementTick+0x154>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3f      	ldr	r2, [pc, #252]	; (8008528 <xTaskIncrementTick+0x150>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	4a3f      	ldr	r2, [pc, #252]	; (800852c <xTaskIncrementTick+0x154>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <xTaskIncrementTick+0x158>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	4a3d      	ldr	r2, [pc, #244]	; (8008530 <xTaskIncrementTick+0x158>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	f000 fadb 	bl	80089f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008442:	4b3c      	ldr	r3, [pc, #240]	; (8008534 <xTaskIncrementTick+0x15c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d349      	bcc.n	80084e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <xTaskIncrementTick+0x150>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008456:	4b37      	ldr	r3, [pc, #220]	; (8008534 <xTaskIncrementTick+0x15c>)
 8008458:	f04f 32ff 	mov.w	r2, #4294967295
 800845c:	601a      	str	r2, [r3, #0]
					break;
 800845e:	e03f      	b.n	80084e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008460:	4b31      	ldr	r3, [pc, #196]	; (8008528 <xTaskIncrementTick+0x150>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d203      	bcs.n	8008480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008478:	4a2e      	ldr	r2, [pc, #184]	; (8008534 <xTaskIncrementTick+0x15c>)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800847e:	e02f      	b.n	80084e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3304      	adds	r3, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fb57 	bl	8006b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3318      	adds	r3, #24
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fb4e 	bl	8006b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <xTaskIncrementTick+0x160>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <xTaskIncrementTick+0xd8>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <xTaskIncrementTick+0x160>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <xTaskIncrementTick+0x164>)
 80084be:	441a      	add	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fad9 	bl	8006a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <xTaskIncrementTick+0x168>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d3b8      	bcc.n	800844c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084de:	e7b5      	b.n	800844c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e0:	4b17      	ldr	r3, [pc, #92]	; (8008540 <xTaskIncrementTick+0x168>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	4915      	ldr	r1, [pc, #84]	; (800853c <xTaskIncrementTick+0x164>)
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d901      	bls.n	80084fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <xTaskIncrementTick+0x16c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e004      	b.n	8008514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskIncrementTick+0x170>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <xTaskIncrementTick+0x170>)
 8008512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000146c 	.word	0x2000146c
 8008524:	20001448 	.word	0x20001448
 8008528:	200013fc 	.word	0x200013fc
 800852c:	20001400 	.word	0x20001400
 8008530:	2000145c 	.word	0x2000145c
 8008534:	20001464 	.word	0x20001464
 8008538:	2000144c 	.word	0x2000144c
 800853c:	20000f74 	.word	0x20000f74
 8008540:	20000f70 	.word	0x20000f70
 8008544:	20001458 	.word	0x20001458
 8008548:	20001454 	.word	0x20001454

0800854c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008552:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <vTaskSwitchContext+0xb0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855a:	4b29      	ldr	r3, [pc, #164]	; (8008600 <vTaskSwitchContext+0xb4>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008560:	e046      	b.n	80085f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008562:	4b27      	ldr	r3, [pc, #156]	; (8008600 <vTaskSwitchContext+0xb4>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <vTaskSwitchContext+0xb8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e010      	b.n	8008592 <vTaskSwitchContext+0x46>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <vTaskSwitchContext+0x40>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	607b      	str	r3, [r7, #4]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <vTaskSwitchContext+0x3e>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3b01      	subs	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	491d      	ldr	r1, [pc, #116]	; (8008608 <vTaskSwitchContext+0xbc>)
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0e4      	beq.n	8008570 <vTaskSwitchContext+0x24>
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4a15      	ldr	r2, [pc, #84]	; (8008608 <vTaskSwitchContext+0xbc>)
 80085b2:	4413      	add	r3, r2
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3308      	adds	r3, #8
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d104      	bne.n	80085d6 <vTaskSwitchContext+0x8a>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a0b      	ldr	r2, [pc, #44]	; (800860c <vTaskSwitchContext+0xc0>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4a08      	ldr	r2, [pc, #32]	; (8008604 <vTaskSwitchContext+0xb8>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <vTaskSwitchContext+0xc0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3354      	adds	r3, #84	; 0x54
 80085ec:	4a08      	ldr	r2, [pc, #32]	; (8008610 <vTaskSwitchContext+0xc4>)
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	2000146c 	.word	0x2000146c
 8008600:	20001458 	.word	0x20001458
 8008604:	2000144c 	.word	0x2000144c
 8008608:	20000f74 	.word	0x20000f74
 800860c:	20000f70 	.word	0x20000f70
 8008610:	2000007c 	.word	0x2000007c

08008614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <vTaskPlaceOnEventList+0x44>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3318      	adds	r3, #24
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe fa3f 	bl	8006ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008648:	2101      	movs	r1, #1
 800864a:	6838      	ldr	r0, [r7, #0]
 800864c:	f000 fb8e 	bl	8008d6c <prvAddCurrentTaskToDelayedList>
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000f70 	.word	0x20000f70

0800865c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	617b      	str	r3, [r7, #20]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3318      	adds	r3, #24
 800868a:	4619      	mov	r1, r3
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7fe f9f6 	bl	8006a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f000 fb63 	bl	8008d6c <prvAddCurrentTaskToDelayedList>
	}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000f70 	.word	0x20000f70

080086b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60fb      	str	r3, [r7, #12]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3318      	adds	r3, #24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fa27 	bl	8006b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ea:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <xTaskRemoveFromEventList+0xb0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11d      	bne.n	800872e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fa1e 	bl	8006b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <xTaskRemoveFromEventList+0xb4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <xTaskRemoveFromEventList+0x5c>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a16      	ldr	r2, [pc, #88]	; (8008768 <xTaskRemoveFromEventList+0xb4>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <xTaskRemoveFromEventList+0xb8>)
 800871e:	441a      	add	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe f9a9 	bl	8006a7e <vListInsertEnd>
 800872c:	e005      	b.n	800873a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3318      	adds	r3, #24
 8008732:	4619      	mov	r1, r3
 8008734:	480e      	ldr	r0, [pc, #56]	; (8008770 <xTaskRemoveFromEventList+0xbc>)
 8008736:	f7fe f9a2 	bl	8006a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <xTaskRemoveFromEventList+0xc0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	429a      	cmp	r2, r3
 8008746:	d905      	bls.n	8008754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <xTaskRemoveFromEventList+0xc4>)
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e001      	b.n	8008758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008758:	697b      	ldr	r3, [r7, #20]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	2000146c 	.word	0x2000146c
 8008768:	2000144c 	.word	0x2000144c
 800876c:	20000f74 	.word	0x20000f74
 8008770:	20001404 	.word	0x20001404
 8008774:	20000f70 	.word	0x20000f70
 8008778:	20001458 	.word	0x20001458

0800877c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <vTaskInternalSetTimeOutState+0x24>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <vTaskInternalSetTimeOutState+0x28>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	605a      	str	r2, [r3, #4]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	2000145c 	.word	0x2000145c
 80087a4:	20001448 	.word	0x20001448

080087a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	613b      	str	r3, [r7, #16]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60fb      	str	r3, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ea:	f000 ff8b 	bl	8009704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <xTaskCheckForTimeOut+0xbc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e023      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <xTaskCheckForTimeOut+0xc0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d007      	beq.n	800882a <xTaskCheckForTimeOut+0x82>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	e015      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	d20b      	bcs.n	800884c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff9b 	bl	800877c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	e004      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008852:	2301      	movs	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008856:	f000 ff85 	bl	8009764 <vPortExitCritical>

	return xReturn;
 800885a:	69fb      	ldr	r3, [r7, #28]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20001448 	.word	0x20001448
 8008868:	2000145c 	.word	0x2000145c

0800886c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008870:	4b03      	ldr	r3, [pc, #12]	; (8008880 <vTaskMissedYield+0x14>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]
}
 8008876:	bf00      	nop
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20001458 	.word	0x20001458

08008884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800888c:	f000 f852 	bl	8008934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <prvIdleTask+0x28>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d9f9      	bls.n	800888c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <prvIdleTask+0x2c>)
 800889a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088a8:	e7f0      	b.n	800888c <prvIdleTask+0x8>
 80088aa:	bf00      	nop
 80088ac:	20000f74 	.word	0x20000f74
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	e00c      	b.n	80088da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a12      	ldr	r2, [pc, #72]	; (8008914 <prvInitialiseTaskLists+0x60>)
 80088cc:	4413      	add	r3, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f8a8 	bl	8006a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3301      	adds	r3, #1
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b37      	cmp	r3, #55	; 0x37
 80088de:	d9ef      	bls.n	80088c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088e0:	480d      	ldr	r0, [pc, #52]	; (8008918 <prvInitialiseTaskLists+0x64>)
 80088e2:	f7fe f89f 	bl	8006a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088e6:	480d      	ldr	r0, [pc, #52]	; (800891c <prvInitialiseTaskLists+0x68>)
 80088e8:	f7fe f89c 	bl	8006a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088ec:	480c      	ldr	r0, [pc, #48]	; (8008920 <prvInitialiseTaskLists+0x6c>)
 80088ee:	f7fe f899 	bl	8006a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088f2:	480c      	ldr	r0, [pc, #48]	; (8008924 <prvInitialiseTaskLists+0x70>)
 80088f4:	f7fe f896 	bl	8006a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088f8:	480b      	ldr	r0, [pc, #44]	; (8008928 <prvInitialiseTaskLists+0x74>)
 80088fa:	f7fe f893 	bl	8006a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088fe:	4b0b      	ldr	r3, [pc, #44]	; (800892c <prvInitialiseTaskLists+0x78>)
 8008900:	4a05      	ldr	r2, [pc, #20]	; (8008918 <prvInitialiseTaskLists+0x64>)
 8008902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvInitialiseTaskLists+0x7c>)
 8008906:	4a05      	ldr	r2, [pc, #20]	; (800891c <prvInitialiseTaskLists+0x68>)
 8008908:	601a      	str	r2, [r3, #0]
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000f74 	.word	0x20000f74
 8008918:	200013d4 	.word	0x200013d4
 800891c:	200013e8 	.word	0x200013e8
 8008920:	20001404 	.word	0x20001404
 8008924:	20001418 	.word	0x20001418
 8008928:	20001430 	.word	0x20001430
 800892c:	200013fc 	.word	0x200013fc
 8008930:	20001400 	.word	0x20001400

08008934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800893a:	e019      	b.n	8008970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800893c:	f000 fee2 	bl	8009704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b10      	ldr	r3, [pc, #64]	; (8008984 <prvCheckTasksWaitingTermination+0x50>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3304      	adds	r3, #4
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe f8f3 	bl	8006b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <prvCheckTasksWaitingTermination+0x54>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3b01      	subs	r3, #1
 8008958:	4a0b      	ldr	r2, [pc, #44]	; (8008988 <prvCheckTasksWaitingTermination+0x54>)
 800895a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800895c:	4b0b      	ldr	r3, [pc, #44]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 8008964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008966:	f000 fefd 	bl	8009764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f810 	bl	8008990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e1      	bne.n	800893c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20001418 	.word	0x20001418
 8008988:	20001444 	.word	0x20001444
 800898c:	2000142c 	.word	0x2000142c

08008990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3354      	adds	r3, #84	; 0x54
 800899c:	4618      	mov	r0, r3
 800899e:	f001 ff79 	bl	800a894 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d108      	bne.n	80089be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 f895 	bl	8009ae0 <vPortFree>
				vPortFree( pxTCB );
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 f892 	bl	8009ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089bc:	e018      	b.n	80089f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d103      	bne.n	80089d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f889 	bl	8009ae0 <vPortFree>
	}
 80089ce:	e00f      	b.n	80089f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d00a      	beq.n	80089f0 <prvDeleteTCB+0x60>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	60fb      	str	r3, [r7, #12]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <prvDeleteTCB+0x5e>
	}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a08:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a10:	e008      	b.n	8008a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4a04      	ldr	r2, [pc, #16]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a22:	6013      	str	r3, [r2, #0]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	200013fc 	.word	0x200013fc
 8008a34:	20001464 	.word	0x20001464

08008a38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <xTaskGetCurrentTaskHandle+0x1c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008a44:	687b      	ldr	r3, [r7, #4]
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000f70 	.word	0x20000f70

08008a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <xTaskGetSchedulerState+0x34>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a66:	2301      	movs	r3, #1
 8008a68:	607b      	str	r3, [r7, #4]
 8008a6a:	e008      	b.n	8008a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6c:	4b08      	ldr	r3, [pc, #32]	; (8008a90 <xTaskGetSchedulerState+0x38>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a74:	2302      	movs	r3, #2
 8008a76:	607b      	str	r3, [r7, #4]
 8008a78:	e001      	b.n	8008a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a7e:	687b      	ldr	r3, [r7, #4]
	}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20001450 	.word	0x20001450
 8008a90:	2000146c 	.word	0x2000146c

08008a94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d051      	beq.n	8008b4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <xTaskPriorityInherit+0xc4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d241      	bcs.n	8008b3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db06      	blt.n	8008ace <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <xTaskPriorityInherit+0xc4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6959      	ldr	r1, [r3, #20]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4a1f      	ldr	r2, [pc, #124]	; (8008b5c <xTaskPriorityInherit+0xc8>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	4299      	cmp	r1, r3
 8008ae4:	d122      	bne.n	8008b2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe f824 	bl	8006b38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008af0:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <xTaskPriorityInherit+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <xTaskPriorityInherit+0xcc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d903      	bls.n	8008b0e <xTaskPriorityInherit+0x7a>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <xTaskPriorityInherit+0xcc>)
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <xTaskPriorityInherit+0xc8>)
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fd ffaa 	bl	8006a7e <vListInsertEnd>
 8008b2a:	e004      	b.n	8008b36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <xTaskPriorityInherit+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e008      	b.n	8008b4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <xTaskPriorityInherit+0xc4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d201      	bcs.n	8008b4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000f70 	.word	0x20000f70
 8008b5c:	20000f74 	.word	0x20000f74
 8008b60:	2000144c 	.word	0x2000144c

08008b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d056      	beq.n	8008c28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b7a:	4b2e      	ldr	r3, [pc, #184]	; (8008c34 <xTaskPriorityDisinherit+0xd0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d00a      	beq.n	8008b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60bb      	str	r3, [r7, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbc:	1e5a      	subs	r2, r3, #1
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d02c      	beq.n	8008c28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d128      	bne.n	8008c28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fd ffac 	bl	8006b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <xTaskPriorityDisinherit+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d903      	bls.n	8008c08 <xTaskPriorityDisinherit+0xa4>
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a0c      	ldr	r2, [pc, #48]	; (8008c38 <xTaskPriorityDisinherit+0xd4>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <xTaskPriorityDisinherit+0xd8>)
 8008c16:	441a      	add	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fd ff2d 	bl	8006a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c24:	2301      	movs	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c28:	697b      	ldr	r3, [r7, #20]
	}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000f70 	.word	0x20000f70
 8008c38:	2000144c 	.word	0x2000144c
 8008c3c:	20000f74 	.word	0x20000f74

08008c40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d06a      	beq.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d902      	bls.n	8008c86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e002      	b.n	8008c8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d04b      	beq.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d146      	bne.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d10a      	bne.n	8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60bb      	str	r3, [r7, #8]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db04      	blt.n	8008cde <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	6959      	ldr	r1, [r3, #20]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d11c      	bne.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fd ff1d 	bl	8006b38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d903      	bls.n	8008d12 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a07      	ldr	r2, [pc, #28]	; (8008d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d20:	441a      	add	r2, r3
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fd fea8 	bl	8006a7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d2e:	bf00      	nop
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000f70 	.word	0x20000f70
 8008d3c:	20000f74 	.word	0x20000f74
 8008d40:	2000144c 	.word	0x2000144c

08008d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d56:	3201      	adds	r2, #1
 8008d58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008d5a:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
	}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000f70 	.word	0x20000f70

08008d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x90>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d7c:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fd fed8 	bl	8006b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d10a      	bne.n	8008da6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d96:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4819      	ldr	r0, [pc, #100]	; (8008e04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008da0:	f7fd fe6d 	bl	8006a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008da4:	e026      	b.n	8008df4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dae:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d209      	bcs.n	8008dd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f7fd fe7b 	bl	8006ac6 <vListInsert>
}
 8008dd0:	e010      	b.n	8008df4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dd2:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4610      	mov	r0, r2
 8008de0:	f7fd fe71 	bl	8006ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d202      	bcs.n	8008df4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dee:	4a08      	ldr	r2, [pc, #32]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6013      	str	r3, [r2, #0]
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20001448 	.word	0x20001448
 8008e00:	20000f70 	.word	0x20000f70
 8008e04:	20001430 	.word	0x20001430
 8008e08:	20001400 	.word	0x20001400
 8008e0c:	200013fc 	.word	0x200013fc
 8008e10:	20001464 	.word	0x20001464

08008e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e1e:	f000 fb07 	bl	8009430 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e22:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <xTimerCreateTimerTask+0x80>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d021      	beq.n	8008e6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e32:	1d3a      	adds	r2, r7, #4
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fd fdd7 	bl	80069f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	9202      	str	r2, [sp, #8]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	2300      	movs	r3, #0
 8008e52:	460a      	mov	r2, r1
 8008e54:	4910      	ldr	r1, [pc, #64]	; (8008e98 <xTimerCreateTimerTask+0x84>)
 8008e56:	4811      	ldr	r0, [pc, #68]	; (8008e9c <xTimerCreateTimerTask+0x88>)
 8008e58:	f7fe ff5c 	bl	8007d14 <xTaskCreateStatic>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4a10      	ldr	r2, [pc, #64]	; (8008ea0 <xTimerCreateTimerTask+0x8c>)
 8008e60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e62:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <xTimerCreateTimerTask+0x8c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	613b      	str	r3, [r7, #16]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e8a:	697b      	ldr	r3, [r7, #20]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	200014a0 	.word	0x200014a0
 8008e98:	0800cc64 	.word	0x0800cc64
 8008e9c:	08008fd9 	.word	0x08008fd9
 8008ea0:	200014a4 	.word	0x200014a4

08008ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08a      	sub	sp, #40	; 0x28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	623b      	str	r3, [r7, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ed2:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <xTimerGenericCommand+0x98>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d02a      	beq.n	8008f30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b05      	cmp	r3, #5
 8008eea:	dc18      	bgt.n	8008f1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eec:	f7ff fdb4 	bl	8008a58 <xTaskGetSchedulerState>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d109      	bne.n	8008f0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <xTimerGenericCommand+0x98>)
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f107 0110 	add.w	r1, r7, #16
 8008efe:	2300      	movs	r3, #0
 8008f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f02:	f7fe f8a1 	bl	8007048 <xQueueGenericSend>
 8008f06:	6278      	str	r0, [r7, #36]	; 0x24
 8008f08:	e012      	b.n	8008f30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <xTimerGenericCommand+0x98>)
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f107 0110 	add.w	r1, r7, #16
 8008f12:	2300      	movs	r3, #0
 8008f14:	2200      	movs	r2, #0
 8008f16:	f7fe f897 	bl	8007048 <xQueueGenericSend>
 8008f1a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f1c:	e008      	b.n	8008f30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f1e:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <xTimerGenericCommand+0x98>)
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	f107 0110 	add.w	r1, r7, #16
 8008f26:	2300      	movs	r3, #0
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	f7fe f98b 	bl	8007244 <xQueueGenericSendFromISR>
 8008f2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3728      	adds	r7, #40	; 0x28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200014a0 	.word	0x200014a0

08008f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4a:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <prvProcessExpiredTimer+0x94>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fd fded 	bl	8006b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d022      	beq.n	8008fb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	699a      	ldr	r2, [r3, #24]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	18d1      	adds	r1, r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	6978      	ldr	r0, [r7, #20]
 8008f7a:	f000 f8d1 	bl	8009120 <prvInsertTimerInActiveList>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01f      	beq.n	8008fc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f84:	2300      	movs	r3, #0
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6978      	ldr	r0, [r7, #20]
 8008f90:	f7ff ff88 	bl	8008ea4 <xTimerGenericCommand>
 8008f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d113      	bne.n	8008fc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	60fb      	str	r3, [r7, #12]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	6978      	ldr	r0, [r7, #20]
 8008fca:	4798      	blx	r3
}
 8008fcc:	bf00      	nop
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20001498 	.word	0x20001498

08008fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f857 	bl	8009098 <prvGetNextExpireTime>
 8008fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 f803 	bl	8008ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ff6:	f000 f8d5 	bl	80091a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ffa:	e7f1      	b.n	8008fe0 <prvTimerTask+0x8>

08008ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009006:	f7ff f92b 	bl	8008260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f866 	bl	80090e0 <prvSampleTimeNow>
 8009014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d130      	bne.n	800907e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <prvProcessTimerOrBlockTask+0x3c>
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	429a      	cmp	r2, r3
 8009028:	d806      	bhi.n	8009038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800902a:	f7ff f927 	bl	800827c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff ff85 	bl	8008f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009036:	e024      	b.n	8009082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800903e:	4b13      	ldr	r3, [pc, #76]	; (800908c <prvProcessTimerOrBlockTask+0x90>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <prvProcessTimerOrBlockTask+0x50>
 8009048:	2301      	movs	r3, #1
 800904a:	e000      	b.n	800904e <prvProcessTimerOrBlockTask+0x52>
 800904c:	2300      	movs	r3, #0
 800904e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009050:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <prvProcessTimerOrBlockTask+0x94>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	f7fe fe25 	bl	8007cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009062:	f7ff f90b 	bl	800827c <xTaskResumeAll>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <prvProcessTimerOrBlockTask+0x98>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	f3bf 8f6f 	isb	sy
}
 800907c:	e001      	b.n	8009082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800907e:	f7ff f8fd 	bl	800827c <xTaskResumeAll>
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000149c 	.word	0x2000149c
 8009090:	200014a0 	.word	0x200014a0
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090a0:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <prvGetNextExpireTime+0x44>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <prvGetNextExpireTime+0x16>
 80090aa:	2201      	movs	r2, #1
 80090ac:	e000      	b.n	80090b0 <prvGetNextExpireTime+0x18>
 80090ae:	2200      	movs	r2, #0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090bc:	4b07      	ldr	r3, [pc, #28]	; (80090dc <prvGetNextExpireTime+0x44>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	e001      	b.n	80090cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090cc:	68fb      	ldr	r3, [r7, #12]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20001498 	.word	0x20001498

080090e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090e8:	f7ff f966 	bl	80083b8 <xTaskGetTickCount>
 80090ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <prvSampleTimeNow+0x3c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d205      	bcs.n	8009104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090f8:	f000 f936 	bl	8009368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e002      	b.n	800910a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800910a:	4a04      	ldr	r2, [pc, #16]	; (800911c <prvSampleTimeNow+0x3c>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009110:	68fb      	ldr	r3, [r7, #12]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200014a8 	.word	0x200014a8

08009120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d812      	bhi.n	800916c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	1ad2      	subs	r2, r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	429a      	cmp	r2, r3
 8009152:	d302      	bcc.n	800915a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e01b      	b.n	8009192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <prvInsertTimerInActiveList+0x7c>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3304      	adds	r3, #4
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f7fd fcae 	bl	8006ac6 <vListInsert>
 800916a:	e012      	b.n	8009192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d206      	bcs.n	8009182 <prvInsertTimerInActiveList+0x62>
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d302      	bcc.n	8009182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e007      	b.n	8009192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009182:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <prvInsertTimerInActiveList+0x80>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f7fd fc9a 	bl	8006ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009192:	697b      	ldr	r3, [r7, #20]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	2000149c 	.word	0x2000149c
 80091a0:	20001498 	.word	0x20001498

080091a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08e      	sub	sp, #56	; 0x38
 80091a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091aa:	e0ca      	b.n	8009342 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da18      	bge.n	80091e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091b2:	1d3b      	adds	r3, r7, #4
 80091b4:	3304      	adds	r3, #4
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	61fb      	str	r3, [r7, #28]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091da:	6850      	ldr	r0, [r2, #4]
 80091dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091de:	6892      	ldr	r2, [r2, #8]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f2c0 80ab 	blt.w	8009342 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	3304      	adds	r3, #4
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fd fc9b 	bl	8006b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009202:	463b      	mov	r3, r7
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff ff6b 	bl	80090e0 <prvSampleTimeNow>
 800920a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b09      	cmp	r3, #9
 8009210:	f200 8096 	bhi.w	8009340 <prvProcessReceivedCommands+0x19c>
 8009214:	a201      	add	r2, pc, #4	; (adr r2, 800921c <prvProcessReceivedCommands+0x78>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009245 	.word	0x08009245
 8009220:	08009245 	.word	0x08009245
 8009224:	08009245 	.word	0x08009245
 8009228:	080092b9 	.word	0x080092b9
 800922c:	080092cd 	.word	0x080092cd
 8009230:	08009317 	.word	0x08009317
 8009234:	08009245 	.word	0x08009245
 8009238:	08009245 	.word	0x08009245
 800923c:	080092b9 	.word	0x080092b9
 8009240:	080092cd 	.word	0x080092cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	b2da      	uxtb	r2, r3
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	18d1      	adds	r1, r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009264:	f7ff ff5c 	bl	8009120 <prvInsertTimerInActiveList>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d069      	beq.n	8009342 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d05e      	beq.n	8009342 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	441a      	add	r2, r3
 800928c:	2300      	movs	r3, #0
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	2100      	movs	r1, #0
 8009294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009296:	f7ff fe05 	bl	8008ea4 <xTimerGenericCommand>
 800929a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d14f      	bne.n	8009342 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	61bb      	str	r3, [r7, #24]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092ca:	e03a      	b.n	8009342 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	617b      	str	r3, [r7, #20]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009310:	f7ff ff06 	bl	8009120 <prvInsertTimerInActiveList>
					break;
 8009314:	e015      	b.n	8009342 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d103      	bne.n	800932c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009326:	f000 fbdb 	bl	8009ae0 <vPortFree>
 800932a:	e00a      	b.n	8009342 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	b2da      	uxtb	r2, r3
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800933e:	e000      	b.n	8009342 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009342:	4b08      	ldr	r3, [pc, #32]	; (8009364 <prvProcessReceivedCommands+0x1c0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	1d39      	adds	r1, r7, #4
 8009348:	2200      	movs	r2, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe f8a2 	bl	8007494 <xQueueReceive>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	f47f af2a 	bne.w	80091ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	3730      	adds	r7, #48	; 0x30
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200014a0 	.word	0x200014a0

08009368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800936e:	e048      	b.n	8009402 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009370:	4b2d      	ldr	r3, [pc, #180]	; (8009428 <prvSwitchTimerLists+0xc0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937a:	4b2b      	ldr	r3, [pc, #172]	; (8009428 <prvSwitchTimerLists+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3304      	adds	r3, #4
 8009388:	4618      	mov	r0, r3
 800938a:	f7fd fbd5 	bl	8006b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d02e      	beq.n	8009402 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d90e      	bls.n	80093d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093c2:	4b19      	ldr	r3, [pc, #100]	; (8009428 <prvSwitchTimerLists+0xc0>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fd fb7a 	bl	8006ac6 <vListInsert>
 80093d2:	e016      	b.n	8009402 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093d4:	2300      	movs	r3, #0
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	2100      	movs	r1, #0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff fd60 	bl	8008ea4 <xTimerGenericCommand>
 80093e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	603b      	str	r3, [r7, #0]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <prvSwitchTimerLists+0xc0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1b1      	bne.n	8009370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <prvSwitchTimerLists+0xc0>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009412:	4b06      	ldr	r3, [pc, #24]	; (800942c <prvSwitchTimerLists+0xc4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a04      	ldr	r2, [pc, #16]	; (8009428 <prvSwitchTimerLists+0xc0>)
 8009418:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800941a:	4a04      	ldr	r2, [pc, #16]	; (800942c <prvSwitchTimerLists+0xc4>)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	6013      	str	r3, [r2, #0]
}
 8009420:	bf00      	nop
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20001498 	.word	0x20001498
 800942c:	2000149c 	.word	0x2000149c

08009430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009436:	f000 f965 	bl	8009704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <prvCheckForValidListAndQueue+0x60>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d120      	bne.n	8009484 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009442:	4814      	ldr	r0, [pc, #80]	; (8009494 <prvCheckForValidListAndQueue+0x64>)
 8009444:	f7fd faee 	bl	8006a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009448:	4813      	ldr	r0, [pc, #76]	; (8009498 <prvCheckForValidListAndQueue+0x68>)
 800944a:	f7fd faeb 	bl	8006a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <prvCheckForValidListAndQueue+0x6c>)
 8009450:	4a10      	ldr	r2, [pc, #64]	; (8009494 <prvCheckForValidListAndQueue+0x64>)
 8009452:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009454:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <prvCheckForValidListAndQueue+0x70>)
 8009456:	4a10      	ldr	r2, [pc, #64]	; (8009498 <prvCheckForValidListAndQueue+0x68>)
 8009458:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800945a:	2300      	movs	r3, #0
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4b11      	ldr	r3, [pc, #68]	; (80094a4 <prvCheckForValidListAndQueue+0x74>)
 8009460:	4a11      	ldr	r2, [pc, #68]	; (80094a8 <prvCheckForValidListAndQueue+0x78>)
 8009462:	2110      	movs	r1, #16
 8009464:	200a      	movs	r0, #10
 8009466:	f7fd fbf9 	bl	8006c5c <xQueueGenericCreateStatic>
 800946a:	4603      	mov	r3, r0
 800946c:	4a08      	ldr	r2, [pc, #32]	; (8009490 <prvCheckForValidListAndQueue+0x60>)
 800946e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <prvCheckForValidListAndQueue+0x60>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <prvCheckForValidListAndQueue+0x60>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	490b      	ldr	r1, [pc, #44]	; (80094ac <prvCheckForValidListAndQueue+0x7c>)
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fbc0 	bl	8007c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009484:	f000 f96e 	bl	8009764 <vPortExitCritical>
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200014a0 	.word	0x200014a0
 8009494:	20001470 	.word	0x20001470
 8009498:	20001484 	.word	0x20001484
 800949c:	20001498 	.word	0x20001498
 80094a0:	2000149c 	.word	0x2000149c
 80094a4:	2000154c 	.word	0x2000154c
 80094a8:	200014ac 	.word	0x200014ac
 80094ac:	0800cc6c 	.word	0x0800cc6c

080094b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3b04      	subs	r3, #4
 80094c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3b04      	subs	r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f023 0201 	bic.w	r2, r3, #1
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b04      	subs	r3, #4
 80094de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <pxPortInitialiseStack+0x64>)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3b14      	subs	r3, #20
 80094ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3b04      	subs	r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f06f 0202 	mvn.w	r2, #2
 80094fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3b20      	subs	r3, #32
 8009504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009506:	68fb      	ldr	r3, [r7, #12]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	08009519 	.word	0x08009519

08009518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <prvTaskExitError+0x54>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952a:	d00a      	beq.n	8009542 <prvTaskExitError+0x2a>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60fb      	str	r3, [r7, #12]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <prvTaskExitError+0x28>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	60bb      	str	r3, [r7, #8]
}
 8009554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009556:	bf00      	nop
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0fc      	beq.n	8009558 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000020 	.word	0x20000020

08009570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <pxCurrentTCBConst2>)
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	6808      	ldr	r0, [r1, #0]
 8009576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	f380 8809 	msr	PSP, r0
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	4770      	bx	lr
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst2>:
 8009590:	20000f70 	.word	0x20000f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009598:	4808      	ldr	r0, [pc, #32]	; (80095bc <prvPortStartFirstTask+0x24>)
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f380 8808 	msr	MSP, r0
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f380 8814 	msr	CONTROL, r0
 80095aa:	b662      	cpsie	i
 80095ac:	b661      	cpsie	f
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	df00      	svc	0
 80095b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ba:	bf00      	nop
 80095bc:	e000ed08 	.word	0xe000ed08

080095c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095c6:	4b46      	ldr	r3, [pc, #280]	; (80096e0 <xPortStartScheduler+0x120>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a46      	ldr	r2, [pc, #280]	; (80096e4 <xPortStartScheduler+0x124>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10a      	bne.n	80095e6 <xPortStartScheduler+0x26>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	613b      	str	r3, [r7, #16]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095e6:	4b3e      	ldr	r3, [pc, #248]	; (80096e0 <xPortStartScheduler+0x120>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a3f      	ldr	r2, [pc, #252]	; (80096e8 <xPortStartScheduler+0x128>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d10a      	bne.n	8009606 <xPortStartScheduler+0x46>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	60fb      	str	r3, [r7, #12]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <xPortStartScheduler+0x12c>)
 8009608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	22ff      	movs	r2, #255	; 0xff
 8009616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009628:	b2da      	uxtb	r2, r3
 800962a:	4b31      	ldr	r3, [pc, #196]	; (80096f0 <xPortStartScheduler+0x130>)
 800962c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800962e:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <xPortStartScheduler+0x134>)
 8009630:	2207      	movs	r2, #7
 8009632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009634:	e009      	b.n	800964a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009636:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <xPortStartScheduler+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3b01      	subs	r3, #1
 800963c:	4a2d      	ldr	r2, [pc, #180]	; (80096f4 <xPortStartScheduler+0x134>)
 800963e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d0ef      	beq.n	8009636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009656:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <xPortStartScheduler+0x134>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1c3 0307 	rsb	r3, r3, #7
 800965e:	2b04      	cmp	r3, #4
 8009660:	d00a      	beq.n	8009678 <xPortStartScheduler+0xb8>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60bb      	str	r3, [r7, #8]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009678:	4b1e      	ldr	r3, [pc, #120]	; (80096f4 <xPortStartScheduler+0x134>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	4a1d      	ldr	r2, [pc, #116]	; (80096f4 <xPortStartScheduler+0x134>)
 8009680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009682:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <xPortStartScheduler+0x134>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800968a:	4a1a      	ldr	r2, [pc, #104]	; (80096f4 <xPortStartScheduler+0x134>)
 800968c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009696:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <xPortStartScheduler+0x138>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <xPortStartScheduler+0x138>)
 800969c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <xPortStartScheduler+0x138>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a14      	ldr	r2, [pc, #80]	; (80096f8 <xPortStartScheduler+0x138>)
 80096a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096ae:	f000 f8dd 	bl	800986c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <xPortStartScheduler+0x13c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096b8:	f000 f8fc 	bl	80098b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <xPortStartScheduler+0x140>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <xPortStartScheduler+0x140>)
 80096c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096c8:	f7ff ff66 	bl	8009598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096cc:	f7fe ff3e 	bl	800854c <vTaskSwitchContext>
	prvTaskExitError();
 80096d0:	f7ff ff22 	bl	8009518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	e000ed00 	.word	0xe000ed00
 80096e4:	410fc271 	.word	0x410fc271
 80096e8:	410fc270 	.word	0x410fc270
 80096ec:	e000e400 	.word	0xe000e400
 80096f0:	2000159c 	.word	0x2000159c
 80096f4:	200015a0 	.word	0x200015a0
 80096f8:	e000ed20 	.word	0xe000ed20
 80096fc:	20000020 	.word	0x20000020
 8009700:	e000ef34 	.word	0xe000ef34

08009704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
}
 800971c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800971e:	4b0f      	ldr	r3, [pc, #60]	; (800975c <vPortEnterCritical+0x58>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a0d      	ldr	r2, [pc, #52]	; (800975c <vPortEnterCritical+0x58>)
 8009726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009728:	4b0c      	ldr	r3, [pc, #48]	; (800975c <vPortEnterCritical+0x58>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10f      	bne.n	8009750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <vPortEnterCritical+0x5c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <vPortEnterCritical+0x4c>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	603b      	str	r3, [r7, #0]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <vPortEnterCritical+0x4a>
	}
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20000020 	.word	0x20000020
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800976a:	4b12      	ldr	r3, [pc, #72]	; (80097b4 <vPortExitCritical+0x50>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <vPortExitCritical+0x24>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	607b      	str	r3, [r7, #4]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <vPortExitCritical+0x50>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <vPortExitCritical+0x50>)
 8009790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009792:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <vPortExitCritical+0x50>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <vPortExitCritical+0x42>
 800979a:	2300      	movs	r3, #0
 800979c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f383 8811 	msr	BASEPRI, r3
}
 80097a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000020 	.word	0x20000020
	...

080097c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097c0:	f3ef 8009 	mrs	r0, PSP
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4b15      	ldr	r3, [pc, #84]	; (8009820 <pxCurrentTCBConst>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	f01e 0f10 	tst.w	lr, #16
 80097d0:	bf08      	it	eq
 80097d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	6010      	str	r0, [r2, #0]
 80097dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097e4:	f380 8811 	msr	BASEPRI, r0
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f7fe feac 	bl	800854c <vTaskSwitchContext>
 80097f4:	f04f 0000 	mov.w	r0, #0
 80097f8:	f380 8811 	msr	BASEPRI, r0
 80097fc:	bc09      	pop	{r0, r3}
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	6808      	ldr	r0, [r1, #0]
 8009802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009806:	f01e 0f10 	tst.w	lr, #16
 800980a:	bf08      	it	eq
 800980c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009810:	f380 8809 	msr	PSP, r0
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w

08009820 <pxCurrentTCBConst>:
 8009820:	20000f70 	.word	0x20000f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009842:	f7fe fdc9 	bl	80083d8 <xTaskIncrementTick>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <xPortSysTickHandler+0x40>)
 800984e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	2300      	movs	r3, #0
 8009856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f383 8811 	msr	BASEPRI, r3
}
 800985e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <vPortSetupTimerInterrupt+0x34>)
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <vPortSetupTimerInterrupt+0x38>)
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800987c:	4b0a      	ldr	r3, [pc, #40]	; (80098a8 <vPortSetupTimerInterrupt+0x3c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <vPortSetupTimerInterrupt+0x40>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	099b      	lsrs	r3, r3, #6
 8009888:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <vPortSetupTimerInterrupt+0x44>)
 800988a:	3b01      	subs	r3, #1
 800988c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800988e:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <vPortSetupTimerInterrupt+0x34>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	e000e010 	.word	0xe000e010
 80098a4:	e000e018 	.word	0xe000e018
 80098a8:	20000004 	.word	0x20000004
 80098ac:	10624dd3 	.word	0x10624dd3
 80098b0:	e000e014 	.word	0xe000e014

080098b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098c4 <vPortEnableVFP+0x10>
 80098b8:	6801      	ldr	r1, [r0, #0]
 80098ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098be:	6001      	str	r1, [r0, #0]
 80098c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098c2:	bf00      	nop
 80098c4:	e000ed88 	.word	0xe000ed88

080098c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ce:	f3ef 8305 	mrs	r3, IPSR
 80098d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d914      	bls.n	8009904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <vPortValidateInterruptPriority+0x70>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098e4:	4b15      	ldr	r3, [pc, #84]	; (800993c <vPortValidateInterruptPriority+0x74>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	7afa      	ldrb	r2, [r7, #11]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d20a      	bcs.n	8009904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	607b      	str	r3, [r7, #4]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009904:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <vPortValidateInterruptPriority+0x78>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <vPortValidateInterruptPriority+0x7c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d90a      	bls.n	800992a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	603b      	str	r3, [r7, #0]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <vPortValidateInterruptPriority+0x60>
	}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	e000e3f0 	.word	0xe000e3f0
 800993c:	2000159c 	.word	0x2000159c
 8009940:	e000ed0c 	.word	0xe000ed0c
 8009944:	200015a0 	.word	0x200015a0

08009948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009954:	f7fe fc84 	bl	8008260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009958:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <pvPortMalloc+0x180>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009960:	f000 f920 	bl	8009ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009964:	4b59      	ldr	r3, [pc, #356]	; (8009acc <pvPortMalloc+0x184>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	f040 8093 	bne.w	8009a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01d      	beq.n	80099b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009978:	2208      	movs	r2, #8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d014      	beq.n	80099b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f023 0307 	bic.w	r3, r3, #7
 8009990:	3308      	adds	r3, #8
 8009992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <pvPortMalloc+0x6c>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	617b      	str	r3, [r7, #20]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d06e      	beq.n	8009a98 <pvPortMalloc+0x150>
 80099ba:	4b45      	ldr	r3, [pc, #276]	; (8009ad0 <pvPortMalloc+0x188>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d869      	bhi.n	8009a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099c4:	4b43      	ldr	r3, [pc, #268]	; (8009ad4 <pvPortMalloc+0x18c>)
 80099c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099c8:	4b42      	ldr	r3, [pc, #264]	; (8009ad4 <pvPortMalloc+0x18c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ce:	e004      	b.n	80099da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d903      	bls.n	80099ec <pvPortMalloc+0xa4>
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f1      	bne.n	80099d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099ec:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <pvPortMalloc+0x180>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d050      	beq.n	8009a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2208      	movs	r2, #8
 80099fc:	4413      	add	r3, r2
 80099fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	2308      	movs	r3, #8
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d91f      	bls.n	8009a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <pvPortMalloc+0xf8>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	613b      	str	r3, [r7, #16]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	1ad2      	subs	r2, r2, r3
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a52:	69b8      	ldr	r0, [r7, #24]
 8009a54:	f000 f908 	bl	8009c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a58:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a66:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ad8 <pvPortMalloc+0x190>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d203      	bcs.n	8009a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a18      	ldr	r2, [pc, #96]	; (8009ad8 <pvPortMalloc+0x190>)
 8009a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <pvPortMalloc+0x184>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <pvPortMalloc+0x194>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	4a11      	ldr	r2, [pc, #68]	; (8009adc <pvPortMalloc+0x194>)
 8009a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a98:	f7fe fbf0 	bl	800827c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <pvPortMalloc+0x174>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	60fb      	str	r3, [r7, #12]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <pvPortMalloc+0x172>
	return pvReturn;
 8009abc:	69fb      	ldr	r3, [r7, #28]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3728      	adds	r7, #40	; 0x28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200051ac 	.word	0x200051ac
 8009acc:	200051c0 	.word	0x200051c0
 8009ad0:	200051b0 	.word	0x200051b0
 8009ad4:	200051a4 	.word	0x200051a4
 8009ad8:	200051b4 	.word	0x200051b4
 8009adc:	200051b8 	.word	0x200051b8

08009ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d04d      	beq.n	8009b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009af2:	2308      	movs	r3, #8
 8009af4:	425b      	negs	r3, r3
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4413      	add	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	4b24      	ldr	r3, [pc, #144]	; (8009b98 <vPortFree+0xb8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <vPortFree+0x44>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60fb      	str	r3, [r7, #12]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <vPortFree+0x62>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60bb      	str	r3, [r7, #8]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <vPortFree+0xb8>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01e      	beq.n	8009b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11a      	bne.n	8009b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <vPortFree+0xb8>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	401a      	ands	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b68:	f7fe fb7a 	bl	8008260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <vPortFree+0xbc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4413      	add	r3, r2
 8009b76:	4a09      	ldr	r2, [pc, #36]	; (8009b9c <vPortFree+0xbc>)
 8009b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b7a:	6938      	ldr	r0, [r7, #16]
 8009b7c:	f000 f874 	bl	8009c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <vPortFree+0xc0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	4a06      	ldr	r2, [pc, #24]	; (8009ba0 <vPortFree+0xc0>)
 8009b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b8a:	f7fe fb77 	bl	800827c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b8e:	bf00      	nop
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200051c0 	.word	0x200051c0
 8009b9c:	200051b0 	.word	0x200051b0
 8009ba0:	200051bc 	.word	0x200051bc

08009ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bb0:	4b27      	ldr	r3, [pc, #156]	; (8009c50 <prvHeapInit+0xac>)
 8009bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00c      	beq.n	8009bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3307      	adds	r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <prvHeapInit+0xac>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	; (8009c54 <prvHeapInit+0xb0>)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <prvHeapInit+0xb0>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <prvHeapInit+0xb4>)
 8009c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <prvHeapInit+0xb4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <prvHeapInit+0xb4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c24:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <prvHeapInit+0xb4>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <prvHeapInit+0xb8>)
 8009c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <prvHeapInit+0xbc>)
 8009c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <prvHeapInit+0xc0>)
 8009c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	200015a4 	.word	0x200015a4
 8009c54:	200051a4 	.word	0x200051a4
 8009c58:	200051ac 	.word	0x200051ac
 8009c5c:	200051b4 	.word	0x200051b4
 8009c60:	200051b0 	.word	0x200051b0
 8009c64:	200051c0 	.word	0x200051c0

08009c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c70:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <prvInsertBlockIntoFreeList+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e002      	b.n	8009c7c <prvInsertBlockIntoFreeList+0x14>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d8f7      	bhi.n	8009c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d108      	bne.n	8009caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d118      	bne.n	8009cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d00d      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	441a      	add	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e008      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e003      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d002      	beq.n	8009d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	200051a4 	.word	0x200051a4
 8009d18:	200051ac 	.word	0x200051ac

08009d1c <__cvt>:
 8009d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	ec55 4b10 	vmov	r4, r5, d0
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	460e      	mov	r6, r1
 8009d28:	4619      	mov	r1, r3
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	bfbb      	ittet	lt
 8009d2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d32:	461d      	movlt	r5, r3
 8009d34:	2300      	movge	r3, #0
 8009d36:	232d      	movlt	r3, #45	; 0x2d
 8009d38:	700b      	strb	r3, [r1, #0]
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d40:	4691      	mov	r9, r2
 8009d42:	f023 0820 	bic.w	r8, r3, #32
 8009d46:	bfbc      	itt	lt
 8009d48:	4622      	movlt	r2, r4
 8009d4a:	4614      	movlt	r4, r2
 8009d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d50:	d005      	beq.n	8009d5e <__cvt+0x42>
 8009d52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d56:	d100      	bne.n	8009d5a <__cvt+0x3e>
 8009d58:	3601      	adds	r6, #1
 8009d5a:	2102      	movs	r1, #2
 8009d5c:	e000      	b.n	8009d60 <__cvt+0x44>
 8009d5e:	2103      	movs	r1, #3
 8009d60:	ab03      	add	r3, sp, #12
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	ab02      	add	r3, sp, #8
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	ec45 4b10 	vmov	d0, r4, r5
 8009d6c:	4653      	mov	r3, sl
 8009d6e:	4632      	mov	r2, r6
 8009d70:	f000 fee2 	bl	800ab38 <_dtoa_r>
 8009d74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d78:	4607      	mov	r7, r0
 8009d7a:	d102      	bne.n	8009d82 <__cvt+0x66>
 8009d7c:	f019 0f01 	tst.w	r9, #1
 8009d80:	d022      	beq.n	8009dc8 <__cvt+0xac>
 8009d82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d86:	eb07 0906 	add.w	r9, r7, r6
 8009d8a:	d110      	bne.n	8009dae <__cvt+0x92>
 8009d8c:	783b      	ldrb	r3, [r7, #0]
 8009d8e:	2b30      	cmp	r3, #48	; 0x30
 8009d90:	d10a      	bne.n	8009da8 <__cvt+0x8c>
 8009d92:	2200      	movs	r2, #0
 8009d94:	2300      	movs	r3, #0
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d9e:	b918      	cbnz	r0, 8009da8 <__cvt+0x8c>
 8009da0:	f1c6 0601 	rsb	r6, r6, #1
 8009da4:	f8ca 6000 	str.w	r6, [sl]
 8009da8:	f8da 3000 	ldr.w	r3, [sl]
 8009dac:	4499      	add	r9, r3
 8009dae:	2200      	movs	r2, #0
 8009db0:	2300      	movs	r3, #0
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dba:	b108      	cbz	r0, 8009dc0 <__cvt+0xa4>
 8009dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dc0:	2230      	movs	r2, #48	; 0x30
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	454b      	cmp	r3, r9
 8009dc6:	d307      	bcc.n	8009dd8 <__cvt+0xbc>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dcc:	1bdb      	subs	r3, r3, r7
 8009dce:	4638      	mov	r0, r7
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	b004      	add	sp, #16
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	1c59      	adds	r1, r3, #1
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	e7f0      	b.n	8009dc2 <__cvt+0xa6>

08009de0 <__exponent>:
 8009de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de2:	4603      	mov	r3, r0
 8009de4:	2900      	cmp	r1, #0
 8009de6:	bfb8      	it	lt
 8009de8:	4249      	neglt	r1, r1
 8009dea:	f803 2b02 	strb.w	r2, [r3], #2
 8009dee:	bfb4      	ite	lt
 8009df0:	222d      	movlt	r2, #45	; 0x2d
 8009df2:	222b      	movge	r2, #43	; 0x2b
 8009df4:	2909      	cmp	r1, #9
 8009df6:	7042      	strb	r2, [r0, #1]
 8009df8:	dd2a      	ble.n	8009e50 <__exponent+0x70>
 8009dfa:	f10d 0207 	add.w	r2, sp, #7
 8009dfe:	4617      	mov	r7, r2
 8009e00:	260a      	movs	r6, #10
 8009e02:	4694      	mov	ip, r2
 8009e04:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e08:	fb06 1415 	mls	r4, r6, r5, r1
 8009e0c:	3430      	adds	r4, #48	; 0x30
 8009e0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e12:	460c      	mov	r4, r1
 8009e14:	2c63      	cmp	r4, #99	; 0x63
 8009e16:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	dcf1      	bgt.n	8009e02 <__exponent+0x22>
 8009e1e:	3130      	adds	r1, #48	; 0x30
 8009e20:	f1ac 0402 	sub.w	r4, ip, #2
 8009e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e28:	1c41      	adds	r1, r0, #1
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	42ba      	cmp	r2, r7
 8009e2e:	d30a      	bcc.n	8009e46 <__exponent+0x66>
 8009e30:	f10d 0209 	add.w	r2, sp, #9
 8009e34:	eba2 020c 	sub.w	r2, r2, ip
 8009e38:	42bc      	cmp	r4, r7
 8009e3a:	bf88      	it	hi
 8009e3c:	2200      	movhi	r2, #0
 8009e3e:	4413      	add	r3, r2
 8009e40:	1a18      	subs	r0, r3, r0
 8009e42:	b003      	add	sp, #12
 8009e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009e4e:	e7ed      	b.n	8009e2c <__exponent+0x4c>
 8009e50:	2330      	movs	r3, #48	; 0x30
 8009e52:	3130      	adds	r1, #48	; 0x30
 8009e54:	7083      	strb	r3, [r0, #2]
 8009e56:	70c1      	strb	r1, [r0, #3]
 8009e58:	1d03      	adds	r3, r0, #4
 8009e5a:	e7f1      	b.n	8009e40 <__exponent+0x60>

08009e5c <_printf_float>:
 8009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	ed2d 8b02 	vpush	{d8}
 8009e64:	b08d      	sub	sp, #52	; 0x34
 8009e66:	460c      	mov	r4, r1
 8009e68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	461f      	mov	r7, r3
 8009e70:	4605      	mov	r5, r0
 8009e72:	f000 fcfb 	bl	800a86c <_localeconv_r>
 8009e76:	f8d0 a000 	ldr.w	sl, [r0]
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	f7f6 fa00 	bl	8000280 <strlen>
 8009e80:	2300      	movs	r3, #0
 8009e82:	930a      	str	r3, [sp, #40]	; 0x28
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	f8d8 3000 	ldr.w	r3, [r8]
 8009e8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e90:	3307      	adds	r3, #7
 8009e92:	f023 0307 	bic.w	r3, r3, #7
 8009e96:	f103 0208 	add.w	r2, r3, #8
 8009e9a:	f8c8 2000 	str.w	r2, [r8]
 8009e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ea2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009eac:	ee08 0a10 	vmov	s16, r0
 8009eb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eb8:	4b9e      	ldr	r3, [pc, #632]	; (800a134 <_printf_float+0x2d8>)
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebe:	f7f6 fe3d 	bl	8000b3c <__aeabi_dcmpun>
 8009ec2:	bb88      	cbnz	r0, 8009f28 <_printf_float+0xcc>
 8009ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec8:	4b9a      	ldr	r3, [pc, #616]	; (800a134 <_printf_float+0x2d8>)
 8009eca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ece:	f7f6 fe17 	bl	8000b00 <__aeabi_dcmple>
 8009ed2:	bb48      	cbnz	r0, 8009f28 <_printf_float+0xcc>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fe06 	bl	8000aec <__aeabi_dcmplt>
 8009ee0:	b110      	cbz	r0, 8009ee8 <_printf_float+0x8c>
 8009ee2:	232d      	movs	r3, #45	; 0x2d
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	4a93      	ldr	r2, [pc, #588]	; (800a138 <_printf_float+0x2dc>)
 8009eea:	4b94      	ldr	r3, [pc, #592]	; (800a13c <_printf_float+0x2e0>)
 8009eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ef0:	bf94      	ite	ls
 8009ef2:	4690      	movls	r8, r2
 8009ef4:	4698      	movhi	r8, r3
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	f023 0304 	bic.w	r3, r3, #4
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	f04f 0900 	mov.w	r9, #0
 8009f06:	9700      	str	r7, [sp, #0]
 8009f08:	4633      	mov	r3, r6
 8009f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f9da 	bl	800a2c8 <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	f040 8090 	bne.w	800a03a <_printf_float+0x1de>
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	b00d      	add	sp, #52	; 0x34
 8009f20:	ecbd 8b02 	vpop	{d8}
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 fe04 	bl	8000b3c <__aeabi_dcmpun>
 8009f34:	b140      	cbz	r0, 8009f48 <_printf_float+0xec>
 8009f36:	464b      	mov	r3, r9
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbc      	itt	lt
 8009f3c:	232d      	movlt	r3, #45	; 0x2d
 8009f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f42:	4a7f      	ldr	r2, [pc, #508]	; (800a140 <_printf_float+0x2e4>)
 8009f44:	4b7f      	ldr	r3, [pc, #508]	; (800a144 <_printf_float+0x2e8>)
 8009f46:	e7d1      	b.n	8009eec <_printf_float+0x90>
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	d13f      	bne.n	8009fd4 <_printf_float+0x178>
 8009f54:	2306      	movs	r3, #6
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	6861      	ldr	r1, [r4, #4]
 8009f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f60:	2300      	movs	r3, #0
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	ab0a      	add	r3, sp, #40	; 0x28
 8009f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f6a:	ab09      	add	r3, sp, #36	; 0x24
 8009f6c:	ec49 8b10 	vmov	d0, r8, r9
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6022      	str	r2, [r4, #0]
 8009f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fecf 	bl	8009d1c <__cvt>
 8009f7e:	9b06      	ldr	r3, [sp, #24]
 8009f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f82:	2b47      	cmp	r3, #71	; 0x47
 8009f84:	4680      	mov	r8, r0
 8009f86:	d108      	bne.n	8009f9a <_printf_float+0x13e>
 8009f88:	1cc8      	adds	r0, r1, #3
 8009f8a:	db02      	blt.n	8009f92 <_printf_float+0x136>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	dd41      	ble.n	800a016 <_printf_float+0x1ba>
 8009f92:	f1ab 0302 	sub.w	r3, fp, #2
 8009f96:	fa5f fb83 	uxtb.w	fp, r3
 8009f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f9e:	d820      	bhi.n	8009fe2 <_printf_float+0x186>
 8009fa0:	3901      	subs	r1, #1
 8009fa2:	465a      	mov	r2, fp
 8009fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8009faa:	f7ff ff19 	bl	8009de0 <__exponent>
 8009fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb0:	1813      	adds	r3, r2, r0
 8009fb2:	2a01      	cmp	r2, #1
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	dc02      	bgt.n	8009fc0 <_printf_float+0x164>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d2      	lsls	r2, r2, #31
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_float+0x168>
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d09c      	beq.n	8009f06 <_printf_float+0xaa>
 8009fcc:	232d      	movs	r3, #45	; 0x2d
 8009fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd2:	e798      	b.n	8009f06 <_printf_float+0xaa>
 8009fd4:	9a06      	ldr	r2, [sp, #24]
 8009fd6:	2a47      	cmp	r2, #71	; 0x47
 8009fd8:	d1be      	bne.n	8009f58 <_printf_float+0xfc>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1bc      	bne.n	8009f58 <_printf_float+0xfc>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e7b9      	b.n	8009f56 <_printf_float+0xfa>
 8009fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fe6:	d118      	bne.n	800a01a <_printf_float+0x1be>
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	dd0b      	ble.n	800a006 <_printf_float+0x1aa>
 8009fee:	6121      	str	r1, [r4, #16]
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_printf_float+0x19c>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	07d0      	lsls	r0, r2, #31
 8009ff6:	d502      	bpl.n	8009ffe <_printf_float+0x1a2>
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	440b      	add	r3, r1
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a000:	f04f 0900 	mov.w	r9, #0
 800a004:	e7de      	b.n	8009fc4 <_printf_float+0x168>
 800a006:	b913      	cbnz	r3, 800a00e <_printf_float+0x1b2>
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	07d2      	lsls	r2, r2, #31
 800a00c:	d501      	bpl.n	800a012 <_printf_float+0x1b6>
 800a00e:	3302      	adds	r3, #2
 800a010:	e7f4      	b.n	8009ffc <_printf_float+0x1a0>
 800a012:	2301      	movs	r3, #1
 800a014:	e7f2      	b.n	8009ffc <_printf_float+0x1a0>
 800a016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	4299      	cmp	r1, r3
 800a01e:	db05      	blt.n	800a02c <_printf_float+0x1d0>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	6121      	str	r1, [r4, #16]
 800a024:	07d8      	lsls	r0, r3, #31
 800a026:	d5ea      	bpl.n	8009ffe <_printf_float+0x1a2>
 800a028:	1c4b      	adds	r3, r1, #1
 800a02a:	e7e7      	b.n	8009ffc <_printf_float+0x1a0>
 800a02c:	2900      	cmp	r1, #0
 800a02e:	bfd4      	ite	le
 800a030:	f1c1 0202 	rsble	r2, r1, #2
 800a034:	2201      	movgt	r2, #1
 800a036:	4413      	add	r3, r2
 800a038:	e7e0      	b.n	8009ffc <_printf_float+0x1a0>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	055a      	lsls	r2, r3, #21
 800a03e:	d407      	bmi.n	800a050 <_printf_float+0x1f4>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	4642      	mov	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d12c      	bne.n	800a0a8 <_printf_float+0x24c>
 800a04e:	e764      	b.n	8009f1a <_printf_float+0xbe>
 800a050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a054:	f240 80e0 	bls.w	800a218 <_printf_float+0x3bc>
 800a058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 fd3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a064:	2800      	cmp	r0, #0
 800a066:	d034      	beq.n	800a0d2 <_printf_float+0x276>
 800a068:	4a37      	ldr	r2, [pc, #220]	; (800a148 <_printf_float+0x2ec>)
 800a06a:	2301      	movs	r3, #1
 800a06c:	4631      	mov	r1, r6
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	f43f af51 	beq.w	8009f1a <_printf_float+0xbe>
 800a078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	db02      	blt.n	800a086 <_printf_float+0x22a>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	07d8      	lsls	r0, r3, #31
 800a084:	d510      	bpl.n	800a0a8 <_printf_float+0x24c>
 800a086:	ee18 3a10 	vmov	r3, s16
 800a08a:	4652      	mov	r2, sl
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af41 	beq.w	8009f1a <_printf_float+0xbe>
 800a098:	f04f 0800 	mov.w	r8, #0
 800a09c:	f104 091a 	add.w	r9, r4, #26
 800a0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4543      	cmp	r3, r8
 800a0a6:	dc09      	bgt.n	800a0bc <_printf_float+0x260>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	079b      	lsls	r3, r3, #30
 800a0ac:	f100 8107 	bmi.w	800a2be <_printf_float+0x462>
 800a0b0:	68e0      	ldr	r0, [r4, #12]
 800a0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b4:	4298      	cmp	r0, r3
 800a0b6:	bfb8      	it	lt
 800a0b8:	4618      	movlt	r0, r3
 800a0ba:	e730      	b.n	8009f1e <_printf_float+0xc2>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	464a      	mov	r2, r9
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af27 	beq.w	8009f1a <_printf_float+0xbe>
 800a0cc:	f108 0801 	add.w	r8, r8, #1
 800a0d0:	e7e6      	b.n	800a0a0 <_printf_float+0x244>
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dc39      	bgt.n	800a14c <_printf_float+0x2f0>
 800a0d8:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <_printf_float+0x2ec>)
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f af19 	beq.w	8009f1a <_printf_float+0xbe>
 800a0e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	d102      	bne.n	800a0f6 <_printf_float+0x29a>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	d5d8      	bpl.n	800a0a8 <_printf_float+0x24c>
 800a0f6:	ee18 3a10 	vmov	r3, s16
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f af09 	beq.w	8009f1a <_printf_float+0xbe>
 800a108:	f04f 0900 	mov.w	r9, #0
 800a10c:	f104 0a1a 	add.w	sl, r4, #26
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	425b      	negs	r3, r3
 800a114:	454b      	cmp	r3, r9
 800a116:	dc01      	bgt.n	800a11c <_printf_float+0x2c0>
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	e792      	b.n	800a042 <_printf_float+0x1e6>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4652      	mov	r2, sl
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f aef7 	beq.w	8009f1a <_printf_float+0xbe>
 800a12c:	f109 0901 	add.w	r9, r9, #1
 800a130:	e7ee      	b.n	800a110 <_printf_float+0x2b4>
 800a132:	bf00      	nop
 800a134:	7fefffff 	.word	0x7fefffff
 800a138:	0800e04c 	.word	0x0800e04c
 800a13c:	0800e050 	.word	0x0800e050
 800a140:	0800e054 	.word	0x0800e054
 800a144:	0800e058 	.word	0x0800e058
 800a148:	0800e05c 	.word	0x0800e05c
 800a14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a150:	429a      	cmp	r2, r3
 800a152:	bfa8      	it	ge
 800a154:	461a      	movge	r2, r3
 800a156:	2a00      	cmp	r2, #0
 800a158:	4691      	mov	r9, r2
 800a15a:	dc37      	bgt.n	800a1cc <_printf_float+0x370>
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a164:	f104 021a 	add.w	r2, r4, #26
 800a168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	eba3 0309 	sub.w	r3, r3, r9
 800a170:	455b      	cmp	r3, fp
 800a172:	dc33      	bgt.n	800a1dc <_printf_float+0x380>
 800a174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a178:	429a      	cmp	r2, r3
 800a17a:	db3b      	blt.n	800a1f4 <_printf_float+0x398>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07da      	lsls	r2, r3, #31
 800a180:	d438      	bmi.n	800a1f4 <_printf_float+0x398>
 800a182:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a186:	eba2 0903 	sub.w	r9, r2, r3
 800a18a:	9b05      	ldr	r3, [sp, #20]
 800a18c:	1ad2      	subs	r2, r2, r3
 800a18e:	4591      	cmp	r9, r2
 800a190:	bfa8      	it	ge
 800a192:	4691      	movge	r9, r2
 800a194:	f1b9 0f00 	cmp.w	r9, #0
 800a198:	dc35      	bgt.n	800a206 <_printf_float+0x3aa>
 800a19a:	f04f 0800 	mov.w	r8, #0
 800a19e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a2:	f104 0a1a 	add.w	sl, r4, #26
 800a1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	eba3 0309 	sub.w	r3, r3, r9
 800a1b0:	4543      	cmp	r3, r8
 800a1b2:	f77f af79 	ble.w	800a0a8 <_printf_float+0x24c>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f aeaa 	beq.w	8009f1a <_printf_float+0xbe>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	e7ec      	b.n	800a1a6 <_printf_float+0x34a>
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d1c0      	bne.n	800a15c <_printf_float+0x300>
 800a1da:	e69e      	b.n	8009f1a <_printf_float+0xbe>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	9205      	str	r2, [sp, #20]
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f ae97 	beq.w	8009f1a <_printf_float+0xbe>
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	f10b 0b01 	add.w	fp, fp, #1
 800a1f2:	e7b9      	b.n	800a168 <_printf_float+0x30c>
 800a1f4:	ee18 3a10 	vmov	r3, s16
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	d1be      	bne.n	800a182 <_printf_float+0x326>
 800a204:	e689      	b.n	8009f1a <_printf_float+0xbe>
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	464b      	mov	r3, r9
 800a20a:	4442      	add	r2, r8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	d1c1      	bne.n	800a19a <_printf_float+0x33e>
 800a216:	e680      	b.n	8009f1a <_printf_float+0xbe>
 800a218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21a:	2a01      	cmp	r2, #1
 800a21c:	dc01      	bgt.n	800a222 <_printf_float+0x3c6>
 800a21e:	07db      	lsls	r3, r3, #31
 800a220:	d53a      	bpl.n	800a298 <_printf_float+0x43c>
 800a222:	2301      	movs	r3, #1
 800a224:	4642      	mov	r2, r8
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f ae74 	beq.w	8009f1a <_printf_float+0xbe>
 800a232:	ee18 3a10 	vmov	r3, s16
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f ae6b 	beq.w	8009f1a <_printf_float+0xbe>
 800a244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a250:	f7f6 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 800a254:	b9d8      	cbnz	r0, 800a28e <_printf_float+0x432>
 800a256:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a25a:	f108 0201 	add.w	r2, r8, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	d10e      	bne.n	800a286 <_printf_float+0x42a>
 800a268:	e657      	b.n	8009f1a <_printf_float+0xbe>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4652      	mov	r2, sl
 800a26e:	4631      	mov	r1, r6
 800a270:	4628      	mov	r0, r5
 800a272:	47b8      	blx	r7
 800a274:	3001      	adds	r0, #1
 800a276:	f43f ae50 	beq.w	8009f1a <_printf_float+0xbe>
 800a27a:	f108 0801 	add.w	r8, r8, #1
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	3b01      	subs	r3, #1
 800a282:	4543      	cmp	r3, r8
 800a284:	dcf1      	bgt.n	800a26a <_printf_float+0x40e>
 800a286:	464b      	mov	r3, r9
 800a288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a28c:	e6da      	b.n	800a044 <_printf_float+0x1e8>
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	f104 0a1a 	add.w	sl, r4, #26
 800a296:	e7f2      	b.n	800a27e <_printf_float+0x422>
 800a298:	2301      	movs	r3, #1
 800a29a:	4642      	mov	r2, r8
 800a29c:	e7df      	b.n	800a25e <_printf_float+0x402>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae36 	beq.w	8009f1a <_printf_float+0xbe>
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	68e3      	ldr	r3, [r4, #12]
 800a2b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b6:	1a5b      	subs	r3, r3, r1
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	dcf0      	bgt.n	800a29e <_printf_float+0x442>
 800a2bc:	e6f8      	b.n	800a0b0 <_printf_float+0x254>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	f104 0919 	add.w	r9, r4, #25
 800a2c6:	e7f4      	b.n	800a2b2 <_printf_float+0x456>

0800a2c8 <_printf_common>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	688a      	ldr	r2, [r1, #8]
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bfb8      	it	lt
 800a2dc:	4613      	movlt	r3, r2
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_printf_common+0x26>
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0699      	lsls	r1, r3, #26
 800a2f2:	bf42      	ittt	mi
 800a2f4:	6833      	ldrmi	r3, [r6, #0]
 800a2f6:	3302      	addmi	r3, #2
 800a2f8:	6033      	strmi	r3, [r6, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	f015 0506 	ands.w	r5, r5, #6
 800a300:	d106      	bne.n	800a310 <_printf_common+0x48>
 800a302:	f104 0a19 	add.w	sl, r4, #25
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	6832      	ldr	r2, [r6, #0]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc26      	bgt.n	800a35e <_printf_common+0x96>
 800a310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a314:	1e13      	subs	r3, r2, #0
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	bf18      	it	ne
 800a31a:	2301      	movne	r3, #1
 800a31c:	0692      	lsls	r2, r2, #26
 800a31e:	d42b      	bmi.n	800a378 <_printf_common+0xb0>
 800a320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a324:	4649      	mov	r1, r9
 800a326:	4638      	mov	r0, r7
 800a328:	47c0      	blx	r8
 800a32a:	3001      	adds	r0, #1
 800a32c:	d01e      	beq.n	800a36c <_printf_common+0xa4>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	f003 0306 	and.w	r3, r3, #6
 800a336:	2b04      	cmp	r3, #4
 800a338:	bf02      	ittt	eq
 800a33a:	68e5      	ldreq	r5, [r4, #12]
 800a33c:	6833      	ldreq	r3, [r6, #0]
 800a33e:	1aed      	subeq	r5, r5, r3
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	bf0c      	ite	eq
 800a344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a348:	2500      	movne	r5, #0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfc4      	itt	gt
 800a34e:	1a9b      	subgt	r3, r3, r2
 800a350:	18ed      	addgt	r5, r5, r3
 800a352:	2600      	movs	r6, #0
 800a354:	341a      	adds	r4, #26
 800a356:	42b5      	cmp	r5, r6
 800a358:	d11a      	bne.n	800a390 <_printf_common+0xc8>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e008      	b.n	800a370 <_printf_common+0xa8>
 800a35e:	2301      	movs	r3, #1
 800a360:	4652      	mov	r2, sl
 800a362:	4649      	mov	r1, r9
 800a364:	4638      	mov	r0, r7
 800a366:	47c0      	blx	r8
 800a368:	3001      	adds	r0, #1
 800a36a:	d103      	bne.n	800a374 <_printf_common+0xac>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	3501      	adds	r5, #1
 800a376:	e7c6      	b.n	800a306 <_printf_common+0x3e>
 800a378:	18e1      	adds	r1, r4, r3
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	2030      	movs	r0, #48	; 0x30
 800a37e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a382:	4422      	add	r2, r4
 800a384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a38c:	3302      	adds	r3, #2
 800a38e:	e7c7      	b.n	800a320 <_printf_common+0x58>
 800a390:	2301      	movs	r3, #1
 800a392:	4622      	mov	r2, r4
 800a394:	4649      	mov	r1, r9
 800a396:	4638      	mov	r0, r7
 800a398:	47c0      	blx	r8
 800a39a:	3001      	adds	r0, #1
 800a39c:	d0e6      	beq.n	800a36c <_printf_common+0xa4>
 800a39e:	3601      	adds	r6, #1
 800a3a0:	e7d9      	b.n	800a356 <_printf_common+0x8e>
	...

0800a3a4 <_printf_i>:
 800a3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	7e0f      	ldrb	r7, [r1, #24]
 800a3aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3ac:	2f78      	cmp	r7, #120	; 0x78
 800a3ae:	4691      	mov	r9, r2
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	469a      	mov	sl, r3
 800a3b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3ba:	d807      	bhi.n	800a3cc <_printf_i+0x28>
 800a3bc:	2f62      	cmp	r7, #98	; 0x62
 800a3be:	d80a      	bhi.n	800a3d6 <_printf_i+0x32>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f000 80d4 	beq.w	800a56e <_printf_i+0x1ca>
 800a3c6:	2f58      	cmp	r7, #88	; 0x58
 800a3c8:	f000 80c0 	beq.w	800a54c <_printf_i+0x1a8>
 800a3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3d4:	e03a      	b.n	800a44c <_printf_i+0xa8>
 800a3d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3da:	2b15      	cmp	r3, #21
 800a3dc:	d8f6      	bhi.n	800a3cc <_printf_i+0x28>
 800a3de:	a101      	add	r1, pc, #4	; (adr r1, 800a3e4 <_printf_i+0x40>)
 800a3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e4:	0800a43d 	.word	0x0800a43d
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a3cd 	.word	0x0800a3cd
 800a3f0:	0800a3cd 	.word	0x0800a3cd
 800a3f4:	0800a3cd 	.word	0x0800a3cd
 800a3f8:	0800a3cd 	.word	0x0800a3cd
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a3cd 	.word	0x0800a3cd
 800a404:	0800a3cd 	.word	0x0800a3cd
 800a408:	0800a3cd 	.word	0x0800a3cd
 800a40c:	0800a3cd 	.word	0x0800a3cd
 800a410:	0800a555 	.word	0x0800a555
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a50f 	.word	0x0800a50f
 800a41c:	0800a3cd 	.word	0x0800a3cd
 800a420:	0800a3cd 	.word	0x0800a3cd
 800a424:	0800a577 	.word	0x0800a577
 800a428:	0800a3cd 	.word	0x0800a3cd
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a3cd 	.word	0x0800a3cd
 800a434:	0800a3cd 	.word	0x0800a3cd
 800a438:	0800a517 	.word	0x0800a517
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	602a      	str	r2, [r5, #0]
 800a444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a44c:	2301      	movs	r3, #1
 800a44e:	e09f      	b.n	800a590 <_printf_i+0x1ec>
 800a450:	6820      	ldr	r0, [r4, #0]
 800a452:	682b      	ldr	r3, [r5, #0]
 800a454:	0607      	lsls	r7, r0, #24
 800a456:	f103 0104 	add.w	r1, r3, #4
 800a45a:	6029      	str	r1, [r5, #0]
 800a45c:	d501      	bpl.n	800a462 <_printf_i+0xbe>
 800a45e:	681e      	ldr	r6, [r3, #0]
 800a460:	e003      	b.n	800a46a <_printf_i+0xc6>
 800a462:	0646      	lsls	r6, r0, #25
 800a464:	d5fb      	bpl.n	800a45e <_printf_i+0xba>
 800a466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	da03      	bge.n	800a476 <_printf_i+0xd2>
 800a46e:	232d      	movs	r3, #45	; 0x2d
 800a470:	4276      	negs	r6, r6
 800a472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a476:	485a      	ldr	r0, [pc, #360]	; (800a5e0 <_printf_i+0x23c>)
 800a478:	230a      	movs	r3, #10
 800a47a:	e012      	b.n	800a4a2 <_printf_i+0xfe>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	1d19      	adds	r1, r3, #4
 800a482:	6029      	str	r1, [r5, #0]
 800a484:	0605      	lsls	r5, r0, #24
 800a486:	d501      	bpl.n	800a48c <_printf_i+0xe8>
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	e002      	b.n	800a492 <_printf_i+0xee>
 800a48c:	0641      	lsls	r1, r0, #25
 800a48e:	d5fb      	bpl.n	800a488 <_printf_i+0xe4>
 800a490:	881e      	ldrh	r6, [r3, #0]
 800a492:	4853      	ldr	r0, [pc, #332]	; (800a5e0 <_printf_i+0x23c>)
 800a494:	2f6f      	cmp	r7, #111	; 0x6f
 800a496:	bf0c      	ite	eq
 800a498:	2308      	moveq	r3, #8
 800a49a:	230a      	movne	r3, #10
 800a49c:	2100      	movs	r1, #0
 800a49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4a2:	6865      	ldr	r5, [r4, #4]
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	bfa2      	ittt	ge
 800a4aa:	6821      	ldrge	r1, [r4, #0]
 800a4ac:	f021 0104 	bicge.w	r1, r1, #4
 800a4b0:	6021      	strge	r1, [r4, #0]
 800a4b2:	b90e      	cbnz	r6, 800a4b8 <_printf_i+0x114>
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	d04b      	beq.n	800a550 <_printf_i+0x1ac>
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4be:	fb03 6711 	mls	r7, r3, r1, r6
 800a4c2:	5dc7      	ldrb	r7, [r0, r7]
 800a4c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c8:	4637      	mov	r7, r6
 800a4ca:	42bb      	cmp	r3, r7
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	d9f4      	bls.n	800a4ba <_printf_i+0x116>
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d10b      	bne.n	800a4ec <_printf_i+0x148>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	07de      	lsls	r6, r3, #31
 800a4d8:	d508      	bpl.n	800a4ec <_printf_i+0x148>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	6861      	ldr	r1, [r4, #4]
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	bfde      	ittt	le
 800a4e2:	2330      	movle	r3, #48	; 0x30
 800a4e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4ec:	1b52      	subs	r2, r2, r5
 800a4ee:	6122      	str	r2, [r4, #16]
 800a4f0:	f8cd a000 	str.w	sl, [sp]
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	aa03      	add	r2, sp, #12
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7ff fee4 	bl	800a2c8 <_printf_common>
 800a500:	3001      	adds	r0, #1
 800a502:	d14a      	bne.n	800a59a <_printf_i+0x1f6>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b004      	add	sp, #16
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	f043 0320 	orr.w	r3, r3, #32
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	4833      	ldr	r0, [pc, #204]	; (800a5e4 <_printf_i+0x240>)
 800a518:	2778      	movs	r7, #120	; 0x78
 800a51a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6829      	ldr	r1, [r5, #0]
 800a522:	061f      	lsls	r7, r3, #24
 800a524:	f851 6b04 	ldr.w	r6, [r1], #4
 800a528:	d402      	bmi.n	800a530 <_printf_i+0x18c>
 800a52a:	065f      	lsls	r7, r3, #25
 800a52c:	bf48      	it	mi
 800a52e:	b2b6      	uxthmi	r6, r6
 800a530:	07df      	lsls	r7, r3, #31
 800a532:	bf48      	it	mi
 800a534:	f043 0320 	orrmi.w	r3, r3, #32
 800a538:	6029      	str	r1, [r5, #0]
 800a53a:	bf48      	it	mi
 800a53c:	6023      	strmi	r3, [r4, #0]
 800a53e:	b91e      	cbnz	r6, 800a548 <_printf_i+0x1a4>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	f023 0320 	bic.w	r3, r3, #32
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	2310      	movs	r3, #16
 800a54a:	e7a7      	b.n	800a49c <_printf_i+0xf8>
 800a54c:	4824      	ldr	r0, [pc, #144]	; (800a5e0 <_printf_i+0x23c>)
 800a54e:	e7e4      	b.n	800a51a <_printf_i+0x176>
 800a550:	4615      	mov	r5, r2
 800a552:	e7bd      	b.n	800a4d0 <_printf_i+0x12c>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	6826      	ldr	r6, [r4, #0]
 800a558:	6961      	ldr	r1, [r4, #20]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6028      	str	r0, [r5, #0]
 800a55e:	0635      	lsls	r5, r6, #24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	d501      	bpl.n	800a568 <_printf_i+0x1c4>
 800a564:	6019      	str	r1, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0x1ca>
 800a568:	0670      	lsls	r0, r6, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0x1c0>
 800a56c:	8019      	strh	r1, [r3, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	4615      	mov	r5, r2
 800a574:	e7bc      	b.n	800a4f0 <_printf_i+0x14c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	602a      	str	r2, [r5, #0]
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	2100      	movs	r1, #0
 800a582:	4628      	mov	r0, r5
 800a584:	f7f5 fe2c 	bl	80001e0 <memchr>
 800a588:	b108      	cbz	r0, 800a58e <_printf_i+0x1ea>
 800a58a:	1b40      	subs	r0, r0, r5
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a598:	e7aa      	b.n	800a4f0 <_printf_i+0x14c>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4649      	mov	r1, r9
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	47d0      	blx	sl
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d0ad      	beq.n	800a504 <_printf_i+0x160>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	079b      	lsls	r3, r3, #30
 800a5ac:	d413      	bmi.n	800a5d6 <_printf_i+0x232>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	4618      	movlt	r0, r3
 800a5b8:	e7a6      	b.n	800a508 <_printf_i+0x164>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d09d      	beq.n	800a504 <_printf_i+0x160>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	9903      	ldr	r1, [sp, #12]
 800a5ce:	1a5b      	subs	r3, r3, r1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dcf2      	bgt.n	800a5ba <_printf_i+0x216>
 800a5d4:	e7eb      	b.n	800a5ae <_printf_i+0x20a>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	f104 0619 	add.w	r6, r4, #25
 800a5dc:	e7f5      	b.n	800a5ca <_printf_i+0x226>
 800a5de:	bf00      	nop
 800a5e0:	0800e05e 	.word	0x0800e05e
 800a5e4:	0800e06f 	.word	0x0800e06f

0800a5e8 <std>:
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f6:	6083      	str	r3, [r0, #8]
 800a5f8:	8181      	strh	r1, [r0, #12]
 800a5fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a5fc:	81c2      	strh	r2, [r0, #14]
 800a5fe:	6183      	str	r3, [r0, #24]
 800a600:	4619      	mov	r1, r3
 800a602:	2208      	movs	r2, #8
 800a604:	305c      	adds	r0, #92	; 0x5c
 800a606:	f000 f928 	bl	800a85a <memset>
 800a60a:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <std+0x58>)
 800a60c:	6263      	str	r3, [r4, #36]	; 0x24
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <std+0x5c>)
 800a610:	62a3      	str	r3, [r4, #40]	; 0x28
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <std+0x60>)
 800a614:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <std+0x64>)
 800a618:	6323      	str	r3, [r4, #48]	; 0x30
 800a61a:	4b0d      	ldr	r3, [pc, #52]	; (800a650 <std+0x68>)
 800a61c:	6224      	str	r4, [r4, #32]
 800a61e:	429c      	cmp	r4, r3
 800a620:	d006      	beq.n	800a630 <std+0x48>
 800a622:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a626:	4294      	cmp	r4, r2
 800a628:	d002      	beq.n	800a630 <std+0x48>
 800a62a:	33d0      	adds	r3, #208	; 0xd0
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d105      	bne.n	800a63c <std+0x54>
 800a630:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f000 b9e2 	b.w	800aa00 <__retarget_lock_init_recursive>
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	0800a7d5 	.word	0x0800a7d5
 800a644:	0800a7f7 	.word	0x0800a7f7
 800a648:	0800a82f 	.word	0x0800a82f
 800a64c:	0800a853 	.word	0x0800a853
 800a650:	200051c4 	.word	0x200051c4

0800a654 <stdio_exit_handler>:
 800a654:	4a02      	ldr	r2, [pc, #8]	; (800a660 <stdio_exit_handler+0xc>)
 800a656:	4903      	ldr	r1, [pc, #12]	; (800a664 <stdio_exit_handler+0x10>)
 800a658:	4803      	ldr	r0, [pc, #12]	; (800a668 <stdio_exit_handler+0x14>)
 800a65a:	f000 b869 	b.w	800a730 <_fwalk_sglue>
 800a65e:	bf00      	nop
 800a660:	20000024 	.word	0x20000024
 800a664:	0800c3d1 	.word	0x0800c3d1
 800a668:	20000030 	.word	0x20000030

0800a66c <cleanup_stdio>:
 800a66c:	6841      	ldr	r1, [r0, #4]
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <cleanup_stdio+0x34>)
 800a670:	4299      	cmp	r1, r3
 800a672:	b510      	push	{r4, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	d001      	beq.n	800a67c <cleanup_stdio+0x10>
 800a678:	f001 feaa 	bl	800c3d0 <_fflush_r>
 800a67c:	68a1      	ldr	r1, [r4, #8]
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <cleanup_stdio+0x38>)
 800a680:	4299      	cmp	r1, r3
 800a682:	d002      	beq.n	800a68a <cleanup_stdio+0x1e>
 800a684:	4620      	mov	r0, r4
 800a686:	f001 fea3 	bl	800c3d0 <_fflush_r>
 800a68a:	68e1      	ldr	r1, [r4, #12]
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <cleanup_stdio+0x3c>)
 800a68e:	4299      	cmp	r1, r3
 800a690:	d004      	beq.n	800a69c <cleanup_stdio+0x30>
 800a692:	4620      	mov	r0, r4
 800a694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a698:	f001 be9a 	b.w	800c3d0 <_fflush_r>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	bf00      	nop
 800a6a0:	200051c4 	.word	0x200051c4
 800a6a4:	2000522c 	.word	0x2000522c
 800a6a8:	20005294 	.word	0x20005294

0800a6ac <global_stdio_init.part.0>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <global_stdio_init.part.0+0x30>)
 800a6b0:	4c0b      	ldr	r4, [pc, #44]	; (800a6e0 <global_stdio_init.part.0+0x34>)
 800a6b2:	4a0c      	ldr	r2, [pc, #48]	; (800a6e4 <global_stdio_init.part.0+0x38>)
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	f7ff ff94 	bl	800a5e8 <std>
 800a6c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	2109      	movs	r1, #9
 800a6c8:	f7ff ff8e 	bl	800a5e8 <std>
 800a6cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d6:	2112      	movs	r1, #18
 800a6d8:	f7ff bf86 	b.w	800a5e8 <std>
 800a6dc:	200052fc 	.word	0x200052fc
 800a6e0:	200051c4 	.word	0x200051c4
 800a6e4:	0800a655 	.word	0x0800a655

0800a6e8 <__sfp_lock_acquire>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sfp_lock_acquire+0x8>)
 800a6ea:	f000 b98a 	b.w	800aa02 <__retarget_lock_acquire_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20005305 	.word	0x20005305

0800a6f4 <__sfp_lock_release>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sfp_lock_release+0x8>)
 800a6f6:	f000 b985 	b.w	800aa04 <__retarget_lock_release_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20005305 	.word	0x20005305

0800a700 <__sinit>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	f7ff fff0 	bl	800a6e8 <__sfp_lock_acquire>
 800a708:	6a23      	ldr	r3, [r4, #32]
 800a70a:	b11b      	cbz	r3, 800a714 <__sinit+0x14>
 800a70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a710:	f7ff bff0 	b.w	800a6f4 <__sfp_lock_release>
 800a714:	4b04      	ldr	r3, [pc, #16]	; (800a728 <__sinit+0x28>)
 800a716:	6223      	str	r3, [r4, #32]
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <__sinit+0x2c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f5      	bne.n	800a70c <__sinit+0xc>
 800a720:	f7ff ffc4 	bl	800a6ac <global_stdio_init.part.0>
 800a724:	e7f2      	b.n	800a70c <__sinit+0xc>
 800a726:	bf00      	nop
 800a728:	0800a66d 	.word	0x0800a66d
 800a72c:	200052fc 	.word	0x200052fc

0800a730 <_fwalk_sglue>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	4607      	mov	r7, r0
 800a736:	4688      	mov	r8, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	2600      	movs	r6, #0
 800a73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a740:	f1b9 0901 	subs.w	r9, r9, #1
 800a744:	d505      	bpl.n	800a752 <_fwalk_sglue+0x22>
 800a746:	6824      	ldr	r4, [r4, #0]
 800a748:	2c00      	cmp	r4, #0
 800a74a:	d1f7      	bne.n	800a73c <_fwalk_sglue+0xc>
 800a74c:	4630      	mov	r0, r6
 800a74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d907      	bls.n	800a768 <_fwalk_sglue+0x38>
 800a758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a75c:	3301      	adds	r3, #1
 800a75e:	d003      	beq.n	800a768 <_fwalk_sglue+0x38>
 800a760:	4629      	mov	r1, r5
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	4306      	orrs	r6, r0
 800a768:	3568      	adds	r5, #104	; 0x68
 800a76a:	e7e9      	b.n	800a740 <_fwalk_sglue+0x10>

0800a76c <sniprintf>:
 800a76c:	b40c      	push	{r2, r3}
 800a76e:	b530      	push	{r4, r5, lr}
 800a770:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <sniprintf+0x64>)
 800a772:	1e0c      	subs	r4, r1, #0
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	b09d      	sub	sp, #116	; 0x74
 800a778:	da08      	bge.n	800a78c <sniprintf+0x20>
 800a77a:	238b      	movs	r3, #139	; 0x8b
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295
 800a782:	b01d      	add	sp, #116	; 0x74
 800a784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a788:	b002      	add	sp, #8
 800a78a:	4770      	bx	lr
 800a78c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a790:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a794:	bf14      	ite	ne
 800a796:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a79a:	4623      	moveq	r3, r4
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	9307      	str	r3, [sp, #28]
 800a7a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7a4:	9002      	str	r0, [sp, #8]
 800a7a6:	9006      	str	r0, [sp, #24]
 800a7a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7ae:	ab21      	add	r3, sp, #132	; 0x84
 800a7b0:	a902      	add	r1, sp, #8
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	f001 fc87 	bl	800c0c8 <_svfiprintf_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	bfbc      	itt	lt
 800a7be:	238b      	movlt	r3, #139	; 0x8b
 800a7c0:	602b      	strlt	r3, [r5, #0]
 800a7c2:	2c00      	cmp	r4, #0
 800a7c4:	d0dd      	beq.n	800a782 <sniprintf+0x16>
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	701a      	strb	r2, [r3, #0]
 800a7cc:	e7d9      	b.n	800a782 <sniprintf+0x16>
 800a7ce:	bf00      	nop
 800a7d0:	2000007c 	.word	0x2000007c

0800a7d4 <__sread>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7dc:	f000 f8c2 	bl	800a964 <_read_r>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	bfab      	itete	ge
 800a7e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7e8:	181b      	addge	r3, r3, r0
 800a7ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7ee:	bfac      	ite	ge
 800a7f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7f2:	81a3      	strhlt	r3, [r4, #12]
 800a7f4:	bd10      	pop	{r4, pc}

0800a7f6 <__swrite>:
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	898b      	ldrh	r3, [r1, #12]
 800a7fe:	05db      	lsls	r3, r3, #23
 800a800:	4605      	mov	r5, r0
 800a802:	460c      	mov	r4, r1
 800a804:	4616      	mov	r6, r2
 800a806:	d505      	bpl.n	800a814 <__swrite+0x1e>
 800a808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80c:	2302      	movs	r3, #2
 800a80e:	2200      	movs	r2, #0
 800a810:	f000 f896 	bl	800a940 <_lseek_r>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a81a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	4632      	mov	r2, r6
 800a822:	463b      	mov	r3, r7
 800a824:	4628      	mov	r0, r5
 800a826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82a:	f000 b8ad 	b.w	800a988 <_write_r>

0800a82e <__sseek>:
 800a82e:	b510      	push	{r4, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a836:	f000 f883 	bl	800a940 <_lseek_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	bf15      	itete	ne
 800a840:	6560      	strne	r0, [r4, #84]	; 0x54
 800a842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a84a:	81a3      	strheq	r3, [r4, #12]
 800a84c:	bf18      	it	ne
 800a84e:	81a3      	strhne	r3, [r4, #12]
 800a850:	bd10      	pop	{r4, pc}

0800a852 <__sclose>:
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f000 b80d 	b.w	800a874 <_close_r>

0800a85a <memset>:
 800a85a:	4402      	add	r2, r0
 800a85c:	4603      	mov	r3, r0
 800a85e:	4293      	cmp	r3, r2
 800a860:	d100      	bne.n	800a864 <memset+0xa>
 800a862:	4770      	bx	lr
 800a864:	f803 1b01 	strb.w	r1, [r3], #1
 800a868:	e7f9      	b.n	800a85e <memset+0x4>
	...

0800a86c <_localeconv_r>:
 800a86c:	4800      	ldr	r0, [pc, #0]	; (800a870 <_localeconv_r+0x4>)
 800a86e:	4770      	bx	lr
 800a870:	20000170 	.word	0x20000170

0800a874 <_close_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d06      	ldr	r5, [pc, #24]	; (800a890 <_close_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	f7f7 fb08 	bl	8001e94 <_close>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_close_r+0x1a>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_close_r+0x1a>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20005300 	.word	0x20005300

0800a894 <_reclaim_reent>:
 800a894:	4b29      	ldr	r3, [pc, #164]	; (800a93c <_reclaim_reent+0xa8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4283      	cmp	r3, r0
 800a89a:	b570      	push	{r4, r5, r6, lr}
 800a89c:	4604      	mov	r4, r0
 800a89e:	d04b      	beq.n	800a938 <_reclaim_reent+0xa4>
 800a8a0:	69c3      	ldr	r3, [r0, #28]
 800a8a2:	b143      	cbz	r3, 800a8b6 <_reclaim_reent+0x22>
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d144      	bne.n	800a934 <_reclaim_reent+0xa0>
 800a8aa:	69e3      	ldr	r3, [r4, #28]
 800a8ac:	6819      	ldr	r1, [r3, #0]
 800a8ae:	b111      	cbz	r1, 800a8b6 <_reclaim_reent+0x22>
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 ff33 	bl	800b71c <_free_r>
 800a8b6:	6961      	ldr	r1, [r4, #20]
 800a8b8:	b111      	cbz	r1, 800a8c0 <_reclaim_reent+0x2c>
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 ff2e 	bl	800b71c <_free_r>
 800a8c0:	69e1      	ldr	r1, [r4, #28]
 800a8c2:	b111      	cbz	r1, 800a8ca <_reclaim_reent+0x36>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 ff29 	bl	800b71c <_free_r>
 800a8ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8cc:	b111      	cbz	r1, 800a8d4 <_reclaim_reent+0x40>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 ff24 	bl	800b71c <_free_r>
 800a8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8d6:	b111      	cbz	r1, 800a8de <_reclaim_reent+0x4a>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 ff1f 	bl	800b71c <_free_r>
 800a8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8e0:	b111      	cbz	r1, 800a8e8 <_reclaim_reent+0x54>
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 ff1a 	bl	800b71c <_free_r>
 800a8e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8ea:	b111      	cbz	r1, 800a8f2 <_reclaim_reent+0x5e>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 ff15 	bl	800b71c <_free_r>
 800a8f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a8f4:	b111      	cbz	r1, 800a8fc <_reclaim_reent+0x68>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 ff10 	bl	800b71c <_free_r>
 800a8fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a8fe:	b111      	cbz	r1, 800a906 <_reclaim_reent+0x72>
 800a900:	4620      	mov	r0, r4
 800a902:	f000 ff0b 	bl	800b71c <_free_r>
 800a906:	6a23      	ldr	r3, [r4, #32]
 800a908:	b1b3      	cbz	r3, 800a938 <_reclaim_reent+0xa4>
 800a90a:	4620      	mov	r0, r4
 800a90c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a910:	4718      	bx	r3
 800a912:	5949      	ldr	r1, [r1, r5]
 800a914:	b941      	cbnz	r1, 800a928 <_reclaim_reent+0x94>
 800a916:	3504      	adds	r5, #4
 800a918:	69e3      	ldr	r3, [r4, #28]
 800a91a:	2d80      	cmp	r5, #128	; 0x80
 800a91c:	68d9      	ldr	r1, [r3, #12]
 800a91e:	d1f8      	bne.n	800a912 <_reclaim_reent+0x7e>
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fefb 	bl	800b71c <_free_r>
 800a926:	e7c0      	b.n	800a8aa <_reclaim_reent+0x16>
 800a928:	680e      	ldr	r6, [r1, #0]
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fef6 	bl	800b71c <_free_r>
 800a930:	4631      	mov	r1, r6
 800a932:	e7ef      	b.n	800a914 <_reclaim_reent+0x80>
 800a934:	2500      	movs	r5, #0
 800a936:	e7ef      	b.n	800a918 <_reclaim_reent+0x84>
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	bf00      	nop
 800a93c:	2000007c 	.word	0x2000007c

0800a940 <_lseek_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_lseek_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f7 fac7 	bl	8001ee2 <_lseek>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_lseek_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_lseek_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20005300 	.word	0x20005300

0800a964 <_read_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	; (800a984 <_read_r+0x20>)
 800a968:	4604      	mov	r4, r0
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f7 fa55 	bl	8001e22 <_read>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_read_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_read_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20005300 	.word	0x20005300

0800a988 <_write_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d07      	ldr	r5, [pc, #28]	; (800a9a8 <_write_r+0x20>)
 800a98c:	4604      	mov	r4, r0
 800a98e:	4608      	mov	r0, r1
 800a990:	4611      	mov	r1, r2
 800a992:	2200      	movs	r2, #0
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f7 fa60 	bl	8001e5c <_write>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_write_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_write_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20005300 	.word	0x20005300

0800a9ac <__errno>:
 800a9ac:	4b01      	ldr	r3, [pc, #4]	; (800a9b4 <__errno+0x8>)
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	2000007c 	.word	0x2000007c

0800a9b8 <__libc_init_array>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	4d0d      	ldr	r5, [pc, #52]	; (800a9f0 <__libc_init_array+0x38>)
 800a9bc:	4c0d      	ldr	r4, [pc, #52]	; (800a9f4 <__libc_init_array+0x3c>)
 800a9be:	1b64      	subs	r4, r4, r5
 800a9c0:	10a4      	asrs	r4, r4, #2
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	42a6      	cmp	r6, r4
 800a9c6:	d109      	bne.n	800a9dc <__libc_init_array+0x24>
 800a9c8:	4d0b      	ldr	r5, [pc, #44]	; (800a9f8 <__libc_init_array+0x40>)
 800a9ca:	4c0c      	ldr	r4, [pc, #48]	; (800a9fc <__libc_init_array+0x44>)
 800a9cc:	f002 f918 	bl	800cc00 <_init>
 800a9d0:	1b64      	subs	r4, r4, r5
 800a9d2:	10a4      	asrs	r4, r4, #2
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	42a6      	cmp	r6, r4
 800a9d8:	d105      	bne.n	800a9e6 <__libc_init_array+0x2e>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e0:	4798      	blx	r3
 800a9e2:	3601      	adds	r6, #1
 800a9e4:	e7ee      	b.n	800a9c4 <__libc_init_array+0xc>
 800a9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ea:	4798      	blx	r3
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	e7f2      	b.n	800a9d6 <__libc_init_array+0x1e>
 800a9f0:	0800e3c4 	.word	0x0800e3c4
 800a9f4:	0800e3c4 	.word	0x0800e3c4
 800a9f8:	0800e3c4 	.word	0x0800e3c4
 800a9fc:	0800e3c8 	.word	0x0800e3c8

0800aa00 <__retarget_lock_init_recursive>:
 800aa00:	4770      	bx	lr

0800aa02 <__retarget_lock_acquire_recursive>:
 800aa02:	4770      	bx	lr

0800aa04 <__retarget_lock_release_recursive>:
 800aa04:	4770      	bx	lr

0800aa06 <memcpy>:
 800aa06:	440a      	add	r2, r1
 800aa08:	4291      	cmp	r1, r2
 800aa0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa0e:	d100      	bne.n	800aa12 <memcpy+0xc>
 800aa10:	4770      	bx	lr
 800aa12:	b510      	push	{r4, lr}
 800aa14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa1c:	4291      	cmp	r1, r2
 800aa1e:	d1f9      	bne.n	800aa14 <memcpy+0xe>
 800aa20:	bd10      	pop	{r4, pc}

0800aa22 <quorem>:
 800aa22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	6903      	ldr	r3, [r0, #16]
 800aa28:	690c      	ldr	r4, [r1, #16]
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	db7e      	blt.n	800ab2e <quorem+0x10c>
 800aa30:	3c01      	subs	r4, #1
 800aa32:	f101 0814 	add.w	r8, r1, #20
 800aa36:	f100 0514 	add.w	r5, r0, #20
 800aa3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa54:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa58:	d331      	bcc.n	800aabe <quorem+0x9c>
 800aa5a:	f04f 0e00 	mov.w	lr, #0
 800aa5e:	4640      	mov	r0, r8
 800aa60:	46ac      	mov	ip, r5
 800aa62:	46f2      	mov	sl, lr
 800aa64:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa68:	b293      	uxth	r3, r2
 800aa6a:	fb06 e303 	mla	r3, r6, r3, lr
 800aa6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa72:	0c1a      	lsrs	r2, r3, #16
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	ebaa 0303 	sub.w	r3, sl, r3
 800aa7a:	f8dc a000 	ldr.w	sl, [ip]
 800aa7e:	fa13 f38a 	uxtah	r3, r3, sl
 800aa82:	fb06 220e 	mla	r2, r6, lr, r2
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa98:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa9c:	4581      	cmp	r9, r0
 800aa9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaa2:	f84c 3b04 	str.w	r3, [ip], #4
 800aaa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aaaa:	d2db      	bcs.n	800aa64 <quorem+0x42>
 800aaac:	f855 300b 	ldr.w	r3, [r5, fp]
 800aab0:	b92b      	cbnz	r3, 800aabe <quorem+0x9c>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	3b04      	subs	r3, #4
 800aab6:	429d      	cmp	r5, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	d32c      	bcc.n	800ab16 <quorem+0xf4>
 800aabc:	613c      	str	r4, [r7, #16]
 800aabe:	4638      	mov	r0, r7
 800aac0:	f001 f9a8 	bl	800be14 <__mcmp>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	db22      	blt.n	800ab0e <quorem+0xec>
 800aac8:	3601      	adds	r6, #1
 800aaca:	4629      	mov	r1, r5
 800aacc:	2000      	movs	r0, #0
 800aace:	f858 2b04 	ldr.w	r2, [r8], #4
 800aad2:	f8d1 c000 	ldr.w	ip, [r1]
 800aad6:	b293      	uxth	r3, r2
 800aad8:	1ac3      	subs	r3, r0, r3
 800aada:	0c12      	lsrs	r2, r2, #16
 800aadc:	fa13 f38c 	uxtah	r3, r3, ip
 800aae0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaee:	45c1      	cmp	r9, r8
 800aaf0:	f841 3b04 	str.w	r3, [r1], #4
 800aaf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaf8:	d2e9      	bcs.n	800aace <quorem+0xac>
 800aafa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab02:	b922      	cbnz	r2, 800ab0e <quorem+0xec>
 800ab04:	3b04      	subs	r3, #4
 800ab06:	429d      	cmp	r5, r3
 800ab08:	461a      	mov	r2, r3
 800ab0a:	d30a      	bcc.n	800ab22 <quorem+0x100>
 800ab0c:	613c      	str	r4, [r7, #16]
 800ab0e:	4630      	mov	r0, r6
 800ab10:	b003      	add	sp, #12
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	3b04      	subs	r3, #4
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d1ce      	bne.n	800aabc <quorem+0x9a>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	e7c9      	b.n	800aab6 <quorem+0x94>
 800ab22:	6812      	ldr	r2, [r2, #0]
 800ab24:	3b04      	subs	r3, #4
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	d1f0      	bne.n	800ab0c <quorem+0xea>
 800ab2a:	3c01      	subs	r4, #1
 800ab2c:	e7eb      	b.n	800ab06 <quorem+0xe4>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e7ee      	b.n	800ab10 <quorem+0xee>
 800ab32:	0000      	movs	r0, r0
 800ab34:	0000      	movs	r0, r0
	...

0800ab38 <_dtoa_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	ed2d 8b04 	vpush	{d8-d9}
 800ab40:	69c5      	ldr	r5, [r0, #28]
 800ab42:	b093      	sub	sp, #76	; 0x4c
 800ab44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab48:	ec57 6b10 	vmov	r6, r7, d0
 800ab4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab50:	9107      	str	r1, [sp, #28]
 800ab52:	4604      	mov	r4, r0
 800ab54:	920a      	str	r2, [sp, #40]	; 0x28
 800ab56:	930d      	str	r3, [sp, #52]	; 0x34
 800ab58:	b975      	cbnz	r5, 800ab78 <_dtoa_r+0x40>
 800ab5a:	2010      	movs	r0, #16
 800ab5c:	f000 fe2a 	bl	800b7b4 <malloc>
 800ab60:	4602      	mov	r2, r0
 800ab62:	61e0      	str	r0, [r4, #28]
 800ab64:	b920      	cbnz	r0, 800ab70 <_dtoa_r+0x38>
 800ab66:	4bae      	ldr	r3, [pc, #696]	; (800ae20 <_dtoa_r+0x2e8>)
 800ab68:	21ef      	movs	r1, #239	; 0xef
 800ab6a:	48ae      	ldr	r0, [pc, #696]	; (800ae24 <_dtoa_r+0x2ec>)
 800ab6c:	f001 fc82 	bl	800c474 <__assert_func>
 800ab70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab74:	6005      	str	r5, [r0, #0]
 800ab76:	60c5      	str	r5, [r0, #12]
 800ab78:	69e3      	ldr	r3, [r4, #28]
 800ab7a:	6819      	ldr	r1, [r3, #0]
 800ab7c:	b151      	cbz	r1, 800ab94 <_dtoa_r+0x5c>
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	604a      	str	r2, [r1, #4]
 800ab82:	2301      	movs	r3, #1
 800ab84:	4093      	lsls	r3, r2
 800ab86:	608b      	str	r3, [r1, #8]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 ff07 	bl	800b99c <_Bfree>
 800ab8e:	69e3      	ldr	r3, [r4, #28]
 800ab90:	2200      	movs	r2, #0
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	1e3b      	subs	r3, r7, #0
 800ab96:	bfbb      	ittet	lt
 800ab98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab9c:	9303      	strlt	r3, [sp, #12]
 800ab9e:	2300      	movge	r3, #0
 800aba0:	2201      	movlt	r2, #1
 800aba2:	bfac      	ite	ge
 800aba4:	f8c8 3000 	strge.w	r3, [r8]
 800aba8:	f8c8 2000 	strlt.w	r2, [r8]
 800abac:	4b9e      	ldr	r3, [pc, #632]	; (800ae28 <_dtoa_r+0x2f0>)
 800abae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800abb2:	ea33 0308 	bics.w	r3, r3, r8
 800abb6:	d11b      	bne.n	800abf0 <_dtoa_r+0xb8>
 800abb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abba:	f242 730f 	movw	r3, #9999	; 0x270f
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800abc4:	4333      	orrs	r3, r6
 800abc6:	f000 8593 	beq.w	800b6f0 <_dtoa_r+0xbb8>
 800abca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abcc:	b963      	cbnz	r3, 800abe8 <_dtoa_r+0xb0>
 800abce:	4b97      	ldr	r3, [pc, #604]	; (800ae2c <_dtoa_r+0x2f4>)
 800abd0:	e027      	b.n	800ac22 <_dtoa_r+0xea>
 800abd2:	4b97      	ldr	r3, [pc, #604]	; (800ae30 <_dtoa_r+0x2f8>)
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	9800      	ldr	r0, [sp, #0]
 800abde:	b013      	add	sp, #76	; 0x4c
 800abe0:	ecbd 8b04 	vpop	{d8-d9}
 800abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe8:	4b90      	ldr	r3, [pc, #576]	; (800ae2c <_dtoa_r+0x2f4>)
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	3303      	adds	r3, #3
 800abee:	e7f3      	b.n	800abd8 <_dtoa_r+0xa0>
 800abf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abf4:	2200      	movs	r2, #0
 800abf6:	ec51 0b17 	vmov	r0, r1, d7
 800abfa:	eeb0 8a47 	vmov.f32	s16, s14
 800abfe:	eef0 8a67 	vmov.f32	s17, s15
 800ac02:	2300      	movs	r3, #0
 800ac04:	f7f5 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac08:	4681      	mov	r9, r0
 800ac0a:	b160      	cbz	r0, 800ac26 <_dtoa_r+0xee>
 800ac0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac0e:	2301      	movs	r3, #1
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 8568 	beq.w	800b6ea <_dtoa_r+0xbb2>
 800ac1a:	4b86      	ldr	r3, [pc, #536]	; (800ae34 <_dtoa_r+0x2fc>)
 800ac1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	e7da      	b.n	800abdc <_dtoa_r+0xa4>
 800ac26:	aa10      	add	r2, sp, #64	; 0x40
 800ac28:	a911      	add	r1, sp, #68	; 0x44
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac30:	eef0 0a68 	vmov.f32	s1, s17
 800ac34:	f001 f994 	bl	800bf60 <__d2b>
 800ac38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	d07f      	beq.n	800ad42 <_dtoa_r+0x20a>
 800ac42:	ee18 3a90 	vmov	r3, s17
 800ac46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac4e:	ec51 0b18 	vmov	r0, r1, d8
 800ac52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ac5e:	4619      	mov	r1, r3
 800ac60:	2200      	movs	r2, #0
 800ac62:	4b75      	ldr	r3, [pc, #468]	; (800ae38 <_dtoa_r+0x300>)
 800ac64:	f7f5 fb18 	bl	8000298 <__aeabi_dsub>
 800ac68:	a367      	add	r3, pc, #412	; (adr r3, 800ae08 <_dtoa_r+0x2d0>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f7f5 fccb 	bl	8000608 <__aeabi_dmul>
 800ac72:	a367      	add	r3, pc, #412	; (adr r3, 800ae10 <_dtoa_r+0x2d8>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fb10 	bl	800029c <__adddf3>
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	4628      	mov	r0, r5
 800ac80:	460f      	mov	r7, r1
 800ac82:	f7f5 fc57 	bl	8000534 <__aeabi_i2d>
 800ac86:	a364      	add	r3, pc, #400	; (adr r3, 800ae18 <_dtoa_r+0x2e0>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fcbc 	bl	8000608 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4630      	mov	r0, r6
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 fb00 	bl	800029c <__adddf3>
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	460f      	mov	r7, r1
 800aca0:	f7f5 ff62 	bl	8000b68 <__aeabi_d2iz>
 800aca4:	2200      	movs	r2, #0
 800aca6:	4683      	mov	fp, r0
 800aca8:	2300      	movs	r3, #0
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7f5 ff1d 	bl	8000aec <__aeabi_dcmplt>
 800acb2:	b148      	cbz	r0, 800acc8 <_dtoa_r+0x190>
 800acb4:	4658      	mov	r0, fp
 800acb6:	f7f5 fc3d 	bl	8000534 <__aeabi_i2d>
 800acba:	4632      	mov	r2, r6
 800acbc:	463b      	mov	r3, r7
 800acbe:	f7f5 ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc2:	b908      	cbnz	r0, 800acc8 <_dtoa_r+0x190>
 800acc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acc8:	f1bb 0f16 	cmp.w	fp, #22
 800accc:	d857      	bhi.n	800ad7e <_dtoa_r+0x246>
 800acce:	4b5b      	ldr	r3, [pc, #364]	; (800ae3c <_dtoa_r+0x304>)
 800acd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	ec51 0b18 	vmov	r0, r1, d8
 800acdc:	f7f5 ff06 	bl	8000aec <__aeabi_dcmplt>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d04e      	beq.n	800ad82 <_dtoa_r+0x24a>
 800ace4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ace8:	2300      	movs	r3, #0
 800acea:	930c      	str	r3, [sp, #48]	; 0x30
 800acec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acee:	1b5b      	subs	r3, r3, r5
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	bf45      	ittet	mi
 800acf4:	f1c3 0301 	rsbmi	r3, r3, #1
 800acf8:	9305      	strmi	r3, [sp, #20]
 800acfa:	2300      	movpl	r3, #0
 800acfc:	2300      	movmi	r3, #0
 800acfe:	9206      	str	r2, [sp, #24]
 800ad00:	bf54      	ite	pl
 800ad02:	9305      	strpl	r3, [sp, #20]
 800ad04:	9306      	strmi	r3, [sp, #24]
 800ad06:	f1bb 0f00 	cmp.w	fp, #0
 800ad0a:	db3c      	blt.n	800ad86 <_dtoa_r+0x24e>
 800ad0c:	9b06      	ldr	r3, [sp, #24]
 800ad0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ad12:	445b      	add	r3, fp
 800ad14:	9306      	str	r3, [sp, #24]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9308      	str	r3, [sp, #32]
 800ad1a:	9b07      	ldr	r3, [sp, #28]
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d868      	bhi.n	800adf2 <_dtoa_r+0x2ba>
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	bfc4      	itt	gt
 800ad24:	3b04      	subgt	r3, #4
 800ad26:	9307      	strgt	r3, [sp, #28]
 800ad28:	9b07      	ldr	r3, [sp, #28]
 800ad2a:	f1a3 0302 	sub.w	r3, r3, #2
 800ad2e:	bfcc      	ite	gt
 800ad30:	2500      	movgt	r5, #0
 800ad32:	2501      	movle	r5, #1
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	f200 8085 	bhi.w	800ae44 <_dtoa_r+0x30c>
 800ad3a:	e8df f003 	tbb	[pc, r3]
 800ad3e:	3b2e      	.short	0x3b2e
 800ad40:	5839      	.short	0x5839
 800ad42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad46:	441d      	add	r5, r3
 800ad48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad4c:	2b20      	cmp	r3, #32
 800ad4e:	bfc1      	itttt	gt
 800ad50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad54:	fa08 f803 	lslgt.w	r8, r8, r3
 800ad58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ad5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ad60:	bfd6      	itet	le
 800ad62:	f1c3 0320 	rsble	r3, r3, #32
 800ad66:	ea48 0003 	orrgt.w	r0, r8, r3
 800ad6a:	fa06 f003 	lslle.w	r0, r6, r3
 800ad6e:	f7f5 fbd1 	bl	8000514 <__aeabi_ui2d>
 800ad72:	2201      	movs	r2, #1
 800ad74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ad78:	3d01      	subs	r5, #1
 800ad7a:	920e      	str	r2, [sp, #56]	; 0x38
 800ad7c:	e76f      	b.n	800ac5e <_dtoa_r+0x126>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e7b3      	b.n	800acea <_dtoa_r+0x1b2>
 800ad82:	900c      	str	r0, [sp, #48]	; 0x30
 800ad84:	e7b2      	b.n	800acec <_dtoa_r+0x1b4>
 800ad86:	9b05      	ldr	r3, [sp, #20]
 800ad88:	eba3 030b 	sub.w	r3, r3, fp
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	f1cb 0300 	rsb	r3, fp, #0
 800ad92:	9308      	str	r3, [sp, #32]
 800ad94:	2300      	movs	r3, #0
 800ad96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad98:	e7bf      	b.n	800ad1a <_dtoa_r+0x1e2>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dc52      	bgt.n	800ae4a <_dtoa_r+0x312>
 800ada4:	2301      	movs	r3, #1
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	461a      	mov	r2, r3
 800adac:	920a      	str	r2, [sp, #40]	; 0x28
 800adae:	e00b      	b.n	800adc8 <_dtoa_r+0x290>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f3      	b.n	800ad9c <_dtoa_r+0x264>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	; 0x24
 800adb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adba:	445b      	add	r3, fp
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	bfb8      	it	lt
 800adc6:	2301      	movlt	r3, #1
 800adc8:	69e0      	ldr	r0, [r4, #28]
 800adca:	2100      	movs	r1, #0
 800adcc:	2204      	movs	r2, #4
 800adce:	f102 0614 	add.w	r6, r2, #20
 800add2:	429e      	cmp	r6, r3
 800add4:	d93d      	bls.n	800ae52 <_dtoa_r+0x31a>
 800add6:	6041      	str	r1, [r0, #4]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fd9f 	bl	800b91c <_Balloc>
 800adde:	9000      	str	r0, [sp, #0]
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d139      	bne.n	800ae58 <_dtoa_r+0x320>
 800ade4:	4b16      	ldr	r3, [pc, #88]	; (800ae40 <_dtoa_r+0x308>)
 800ade6:	4602      	mov	r2, r0
 800ade8:	f240 11af 	movw	r1, #431	; 0x1af
 800adec:	e6bd      	b.n	800ab6a <_dtoa_r+0x32>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7e1      	b.n	800adb6 <_dtoa_r+0x27e>
 800adf2:	2501      	movs	r5, #1
 800adf4:	2300      	movs	r3, #0
 800adf6:	9307      	str	r3, [sp, #28]
 800adf8:	9509      	str	r5, [sp, #36]	; 0x24
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	2200      	movs	r2, #0
 800ae04:	2312      	movs	r3, #18
 800ae06:	e7d1      	b.n	800adac <_dtoa_r+0x274>
 800ae08:	636f4361 	.word	0x636f4361
 800ae0c:	3fd287a7 	.word	0x3fd287a7
 800ae10:	8b60c8b3 	.word	0x8b60c8b3
 800ae14:	3fc68a28 	.word	0x3fc68a28
 800ae18:	509f79fb 	.word	0x509f79fb
 800ae1c:	3fd34413 	.word	0x3fd34413
 800ae20:	0800e08d 	.word	0x0800e08d
 800ae24:	0800e0a4 	.word	0x0800e0a4
 800ae28:	7ff00000 	.word	0x7ff00000
 800ae2c:	0800e089 	.word	0x0800e089
 800ae30:	0800e080 	.word	0x0800e080
 800ae34:	0800e05d 	.word	0x0800e05d
 800ae38:	3ff80000 	.word	0x3ff80000
 800ae3c:	0800e190 	.word	0x0800e190
 800ae40:	0800e0fc 	.word	0x0800e0fc
 800ae44:	2301      	movs	r3, #1
 800ae46:	9309      	str	r3, [sp, #36]	; 0x24
 800ae48:	e7d7      	b.n	800adfa <_dtoa_r+0x2c2>
 800ae4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	9304      	str	r3, [sp, #16]
 800ae50:	e7ba      	b.n	800adc8 <_dtoa_r+0x290>
 800ae52:	3101      	adds	r1, #1
 800ae54:	0052      	lsls	r2, r2, #1
 800ae56:	e7ba      	b.n	800adce <_dtoa_r+0x296>
 800ae58:	69e3      	ldr	r3, [r4, #28]
 800ae5a:	9a00      	ldr	r2, [sp, #0]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	2b0e      	cmp	r3, #14
 800ae62:	f200 80a8 	bhi.w	800afb6 <_dtoa_r+0x47e>
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	f000 80a5 	beq.w	800afb6 <_dtoa_r+0x47e>
 800ae6c:	f1bb 0f00 	cmp.w	fp, #0
 800ae70:	dd38      	ble.n	800aee4 <_dtoa_r+0x3ac>
 800ae72:	4bc0      	ldr	r3, [pc, #768]	; (800b174 <_dtoa_r+0x63c>)
 800ae74:	f00b 020f 	and.w	r2, fp, #15
 800ae78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ae80:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ae84:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ae88:	d019      	beq.n	800aebe <_dtoa_r+0x386>
 800ae8a:	4bbb      	ldr	r3, [pc, #748]	; (800b178 <_dtoa_r+0x640>)
 800ae8c:	ec51 0b18 	vmov	r0, r1, d8
 800ae90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae94:	f7f5 fce2 	bl	800085c <__aeabi_ddiv>
 800ae98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae9c:	f008 080f 	and.w	r8, r8, #15
 800aea0:	2503      	movs	r5, #3
 800aea2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b178 <_dtoa_r+0x640>
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	d10a      	bne.n	800aec2 <_dtoa_r+0x38a>
 800aeac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	f7f5 fcd2 	bl	800085c <__aeabi_ddiv>
 800aeb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aebc:	e02b      	b.n	800af16 <_dtoa_r+0x3de>
 800aebe:	2502      	movs	r5, #2
 800aec0:	e7ef      	b.n	800aea2 <_dtoa_r+0x36a>
 800aec2:	f018 0f01 	tst.w	r8, #1
 800aec6:	d008      	beq.n	800aeda <_dtoa_r+0x3a2>
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	3501      	adds	r5, #1
 800aed6:	4606      	mov	r6, r0
 800aed8:	460f      	mov	r7, r1
 800aeda:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aede:	f109 0908 	add.w	r9, r9, #8
 800aee2:	e7e0      	b.n	800aea6 <_dtoa_r+0x36e>
 800aee4:	f000 809f 	beq.w	800b026 <_dtoa_r+0x4ee>
 800aee8:	f1cb 0600 	rsb	r6, fp, #0
 800aeec:	4ba1      	ldr	r3, [pc, #644]	; (800b174 <_dtoa_r+0x63c>)
 800aeee:	4fa2      	ldr	r7, [pc, #648]	; (800b178 <_dtoa_r+0x640>)
 800aef0:	f006 020f 	and.w	r2, r6, #15
 800aef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	ec51 0b18 	vmov	r0, r1, d8
 800af00:	f7f5 fb82 	bl	8000608 <__aeabi_dmul>
 800af04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af08:	1136      	asrs	r6, r6, #4
 800af0a:	2300      	movs	r3, #0
 800af0c:	2502      	movs	r5, #2
 800af0e:	2e00      	cmp	r6, #0
 800af10:	d17e      	bne.n	800b010 <_dtoa_r+0x4d8>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1d0      	bne.n	800aeb8 <_dtoa_r+0x380>
 800af16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 8084 	beq.w	800b02a <_dtoa_r+0x4f2>
 800af22:	4b96      	ldr	r3, [pc, #600]	; (800b17c <_dtoa_r+0x644>)
 800af24:	2200      	movs	r2, #0
 800af26:	4640      	mov	r0, r8
 800af28:	4649      	mov	r1, r9
 800af2a:	f7f5 fddf 	bl	8000aec <__aeabi_dcmplt>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d07b      	beq.n	800b02a <_dtoa_r+0x4f2>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d078      	beq.n	800b02a <_dtoa_r+0x4f2>
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd39      	ble.n	800afb2 <_dtoa_r+0x47a>
 800af3e:	4b90      	ldr	r3, [pc, #576]	; (800b180 <_dtoa_r+0x648>)
 800af40:	2200      	movs	r2, #0
 800af42:	4640      	mov	r0, r8
 800af44:	4649      	mov	r1, r9
 800af46:	f7f5 fb5f 	bl	8000608 <__aeabi_dmul>
 800af4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af4e:	9e01      	ldr	r6, [sp, #4]
 800af50:	f10b 37ff 	add.w	r7, fp, #4294967295
 800af54:	3501      	adds	r5, #1
 800af56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7f5 faea 	bl	8000534 <__aeabi_i2d>
 800af60:	4642      	mov	r2, r8
 800af62:	464b      	mov	r3, r9
 800af64:	f7f5 fb50 	bl	8000608 <__aeabi_dmul>
 800af68:	4b86      	ldr	r3, [pc, #536]	; (800b184 <_dtoa_r+0x64c>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 f996 	bl	800029c <__adddf3>
 800af70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800af74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af78:	9303      	str	r3, [sp, #12]
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	d158      	bne.n	800b030 <_dtoa_r+0x4f8>
 800af7e:	4b82      	ldr	r3, [pc, #520]	; (800b188 <_dtoa_r+0x650>)
 800af80:	2200      	movs	r2, #0
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	f7f5 f987 	bl	8000298 <__aeabi_dsub>
 800af8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af8e:	4680      	mov	r8, r0
 800af90:	4689      	mov	r9, r1
 800af92:	f7f5 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 800af96:	2800      	cmp	r0, #0
 800af98:	f040 8296 	bne.w	800b4c8 <_dtoa_r+0x990>
 800af9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800afa0:	4640      	mov	r0, r8
 800afa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afa6:	4649      	mov	r1, r9
 800afa8:	f7f5 fda0 	bl	8000aec <__aeabi_dcmplt>
 800afac:	2800      	cmp	r0, #0
 800afae:	f040 8289 	bne.w	800b4c4 <_dtoa_r+0x98c>
 800afb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800afb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f2c0 814e 	blt.w	800b25a <_dtoa_r+0x722>
 800afbe:	f1bb 0f0e 	cmp.w	fp, #14
 800afc2:	f300 814a 	bgt.w	800b25a <_dtoa_r+0x722>
 800afc6:	4b6b      	ldr	r3, [pc, #428]	; (800b174 <_dtoa_r+0x63c>)
 800afc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f280 80dc 	bge.w	800b190 <_dtoa_r+0x658>
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f300 80d8 	bgt.w	800b190 <_dtoa_r+0x658>
 800afe0:	f040 826f 	bne.w	800b4c2 <_dtoa_r+0x98a>
 800afe4:	4b68      	ldr	r3, [pc, #416]	; (800b188 <_dtoa_r+0x650>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fb0c 	bl	8000608 <__aeabi_dmul>
 800aff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aff4:	f7f5 fd8e 	bl	8000b14 <__aeabi_dcmpge>
 800aff8:	9e04      	ldr	r6, [sp, #16]
 800affa:	4637      	mov	r7, r6
 800affc:	2800      	cmp	r0, #0
 800affe:	f040 8245 	bne.w	800b48c <_dtoa_r+0x954>
 800b002:	9d00      	ldr	r5, [sp, #0]
 800b004:	2331      	movs	r3, #49	; 0x31
 800b006:	f805 3b01 	strb.w	r3, [r5], #1
 800b00a:	f10b 0b01 	add.w	fp, fp, #1
 800b00e:	e241      	b.n	800b494 <_dtoa_r+0x95c>
 800b010:	07f2      	lsls	r2, r6, #31
 800b012:	d505      	bpl.n	800b020 <_dtoa_r+0x4e8>
 800b014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b018:	f7f5 faf6 	bl	8000608 <__aeabi_dmul>
 800b01c:	3501      	adds	r5, #1
 800b01e:	2301      	movs	r3, #1
 800b020:	1076      	asrs	r6, r6, #1
 800b022:	3708      	adds	r7, #8
 800b024:	e773      	b.n	800af0e <_dtoa_r+0x3d6>
 800b026:	2502      	movs	r5, #2
 800b028:	e775      	b.n	800af16 <_dtoa_r+0x3de>
 800b02a:	9e04      	ldr	r6, [sp, #16]
 800b02c:	465f      	mov	r7, fp
 800b02e:	e792      	b.n	800af56 <_dtoa_r+0x41e>
 800b030:	9900      	ldr	r1, [sp, #0]
 800b032:	4b50      	ldr	r3, [pc, #320]	; (800b174 <_dtoa_r+0x63c>)
 800b034:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b038:	4431      	add	r1, r6
 800b03a:	9102      	str	r1, [sp, #8]
 800b03c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b03e:	eeb0 9a47 	vmov.f32	s18, s14
 800b042:	eef0 9a67 	vmov.f32	s19, s15
 800b046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b04a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b04e:	2900      	cmp	r1, #0
 800b050:	d044      	beq.n	800b0dc <_dtoa_r+0x5a4>
 800b052:	494e      	ldr	r1, [pc, #312]	; (800b18c <_dtoa_r+0x654>)
 800b054:	2000      	movs	r0, #0
 800b056:	f7f5 fc01 	bl	800085c <__aeabi_ddiv>
 800b05a:	ec53 2b19 	vmov	r2, r3, d9
 800b05e:	f7f5 f91b 	bl	8000298 <__aeabi_dsub>
 800b062:	9d00      	ldr	r5, [sp, #0]
 800b064:	ec41 0b19 	vmov	d9, r0, r1
 800b068:	4649      	mov	r1, r9
 800b06a:	4640      	mov	r0, r8
 800b06c:	f7f5 fd7c 	bl	8000b68 <__aeabi_d2iz>
 800b070:	4606      	mov	r6, r0
 800b072:	f7f5 fa5f 	bl	8000534 <__aeabi_i2d>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	f7f5 f90b 	bl	8000298 <__aeabi_dsub>
 800b082:	3630      	adds	r6, #48	; 0x30
 800b084:	f805 6b01 	strb.w	r6, [r5], #1
 800b088:	ec53 2b19 	vmov	r2, r3, d9
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	f7f5 fd2c 	bl	8000aec <__aeabi_dcmplt>
 800b094:	2800      	cmp	r0, #0
 800b096:	d164      	bne.n	800b162 <_dtoa_r+0x62a>
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	4937      	ldr	r1, [pc, #220]	; (800b17c <_dtoa_r+0x644>)
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7f5 f8fa 	bl	8000298 <__aeabi_dsub>
 800b0a4:	ec53 2b19 	vmov	r2, r3, d9
 800b0a8:	f7f5 fd20 	bl	8000aec <__aeabi_dcmplt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	f040 80b6 	bne.w	800b21e <_dtoa_r+0x6e6>
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	429d      	cmp	r5, r3
 800b0b6:	f43f af7c 	beq.w	800afb2 <_dtoa_r+0x47a>
 800b0ba:	4b31      	ldr	r3, [pc, #196]	; (800b180 <_dtoa_r+0x648>)
 800b0bc:	ec51 0b19 	vmov	r0, r1, d9
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f7f5 faa1 	bl	8000608 <__aeabi_dmul>
 800b0c6:	4b2e      	ldr	r3, [pc, #184]	; (800b180 <_dtoa_r+0x648>)
 800b0c8:	ec41 0b19 	vmov	d9, r0, r1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	f7f5 fa99 	bl	8000608 <__aeabi_dmul>
 800b0d6:	4680      	mov	r8, r0
 800b0d8:	4689      	mov	r9, r1
 800b0da:	e7c5      	b.n	800b068 <_dtoa_r+0x530>
 800b0dc:	ec51 0b17 	vmov	r0, r1, d7
 800b0e0:	f7f5 fa92 	bl	8000608 <__aeabi_dmul>
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	9d00      	ldr	r5, [sp, #0]
 800b0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ea:	ec41 0b19 	vmov	d9, r0, r1
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	f7f5 fd39 	bl	8000b68 <__aeabi_d2iz>
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	f7f5 fa1c 	bl	8000534 <__aeabi_i2d>
 800b0fc:	3630      	adds	r6, #48	; 0x30
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4640      	mov	r0, r8
 800b104:	4649      	mov	r1, r9
 800b106:	f7f5 f8c7 	bl	8000298 <__aeabi_dsub>
 800b10a:	f805 6b01 	strb.w	r6, [r5], #1
 800b10e:	9b02      	ldr	r3, [sp, #8]
 800b110:	429d      	cmp	r5, r3
 800b112:	4680      	mov	r8, r0
 800b114:	4689      	mov	r9, r1
 800b116:	f04f 0200 	mov.w	r2, #0
 800b11a:	d124      	bne.n	800b166 <_dtoa_r+0x62e>
 800b11c:	4b1b      	ldr	r3, [pc, #108]	; (800b18c <_dtoa_r+0x654>)
 800b11e:	ec51 0b19 	vmov	r0, r1, d9
 800b122:	f7f5 f8bb 	bl	800029c <__adddf3>
 800b126:	4602      	mov	r2, r0
 800b128:	460b      	mov	r3, r1
 800b12a:	4640      	mov	r0, r8
 800b12c:	4649      	mov	r1, r9
 800b12e:	f7f5 fcfb 	bl	8000b28 <__aeabi_dcmpgt>
 800b132:	2800      	cmp	r0, #0
 800b134:	d173      	bne.n	800b21e <_dtoa_r+0x6e6>
 800b136:	ec53 2b19 	vmov	r2, r3, d9
 800b13a:	4914      	ldr	r1, [pc, #80]	; (800b18c <_dtoa_r+0x654>)
 800b13c:	2000      	movs	r0, #0
 800b13e:	f7f5 f8ab 	bl	8000298 <__aeabi_dsub>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4640      	mov	r0, r8
 800b148:	4649      	mov	r1, r9
 800b14a:	f7f5 fccf 	bl	8000aec <__aeabi_dcmplt>
 800b14e:	2800      	cmp	r0, #0
 800b150:	f43f af2f 	beq.w	800afb2 <_dtoa_r+0x47a>
 800b154:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b156:	1e6b      	subs	r3, r5, #1
 800b158:	930f      	str	r3, [sp, #60]	; 0x3c
 800b15a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b15e:	2b30      	cmp	r3, #48	; 0x30
 800b160:	d0f8      	beq.n	800b154 <_dtoa_r+0x61c>
 800b162:	46bb      	mov	fp, r7
 800b164:	e04a      	b.n	800b1fc <_dtoa_r+0x6c4>
 800b166:	4b06      	ldr	r3, [pc, #24]	; (800b180 <_dtoa_r+0x648>)
 800b168:	f7f5 fa4e 	bl	8000608 <__aeabi_dmul>
 800b16c:	4680      	mov	r8, r0
 800b16e:	4689      	mov	r9, r1
 800b170:	e7bd      	b.n	800b0ee <_dtoa_r+0x5b6>
 800b172:	bf00      	nop
 800b174:	0800e190 	.word	0x0800e190
 800b178:	0800e168 	.word	0x0800e168
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	40240000 	.word	0x40240000
 800b184:	401c0000 	.word	0x401c0000
 800b188:	40140000 	.word	0x40140000
 800b18c:	3fe00000 	.word	0x3fe00000
 800b190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b194:	9d00      	ldr	r5, [sp, #0]
 800b196:	4642      	mov	r2, r8
 800b198:	464b      	mov	r3, r9
 800b19a:	4630      	mov	r0, r6
 800b19c:	4639      	mov	r1, r7
 800b19e:	f7f5 fb5d 	bl	800085c <__aeabi_ddiv>
 800b1a2:	f7f5 fce1 	bl	8000b68 <__aeabi_d2iz>
 800b1a6:	9001      	str	r0, [sp, #4]
 800b1a8:	f7f5 f9c4 	bl	8000534 <__aeabi_i2d>
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	f7f5 fa2a 	bl	8000608 <__aeabi_dmul>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f5 f86c 	bl	8000298 <__aeabi_dsub>
 800b1c0:	9e01      	ldr	r6, [sp, #4]
 800b1c2:	9f04      	ldr	r7, [sp, #16]
 800b1c4:	3630      	adds	r6, #48	; 0x30
 800b1c6:	f805 6b01 	strb.w	r6, [r5], #1
 800b1ca:	9e00      	ldr	r6, [sp, #0]
 800b1cc:	1bae      	subs	r6, r5, r6
 800b1ce:	42b7      	cmp	r7, r6
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	d134      	bne.n	800b240 <_dtoa_r+0x708>
 800b1d6:	f7f5 f861 	bl	800029c <__adddf3>
 800b1da:	4642      	mov	r2, r8
 800b1dc:	464b      	mov	r3, r9
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	f7f5 fca1 	bl	8000b28 <__aeabi_dcmpgt>
 800b1e6:	b9c8      	cbnz	r0, 800b21c <_dtoa_r+0x6e4>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	f7f5 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f4:	b110      	cbz	r0, 800b1fc <_dtoa_r+0x6c4>
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	07db      	lsls	r3, r3, #31
 800b1fa:	d40f      	bmi.n	800b21c <_dtoa_r+0x6e4>
 800b1fc:	4651      	mov	r1, sl
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fbcc 	bl	800b99c <_Bfree>
 800b204:	2300      	movs	r3, #0
 800b206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b208:	702b      	strb	r3, [r5, #0]
 800b20a:	f10b 0301 	add.w	r3, fp, #1
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b212:	2b00      	cmp	r3, #0
 800b214:	f43f ace2 	beq.w	800abdc <_dtoa_r+0xa4>
 800b218:	601d      	str	r5, [r3, #0]
 800b21a:	e4df      	b.n	800abdc <_dtoa_r+0xa4>
 800b21c:	465f      	mov	r7, fp
 800b21e:	462b      	mov	r3, r5
 800b220:	461d      	mov	r5, r3
 800b222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b226:	2a39      	cmp	r2, #57	; 0x39
 800b228:	d106      	bne.n	800b238 <_dtoa_r+0x700>
 800b22a:	9a00      	ldr	r2, [sp, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d1f7      	bne.n	800b220 <_dtoa_r+0x6e8>
 800b230:	9900      	ldr	r1, [sp, #0]
 800b232:	2230      	movs	r2, #48	; 0x30
 800b234:	3701      	adds	r7, #1
 800b236:	700a      	strb	r2, [r1, #0]
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	3201      	adds	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e790      	b.n	800b162 <_dtoa_r+0x62a>
 800b240:	4ba3      	ldr	r3, [pc, #652]	; (800b4d0 <_dtoa_r+0x998>)
 800b242:	2200      	movs	r2, #0
 800b244:	f7f5 f9e0 	bl	8000608 <__aeabi_dmul>
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	f7f5 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 800b254:	2800      	cmp	r0, #0
 800b256:	d09e      	beq.n	800b196 <_dtoa_r+0x65e>
 800b258:	e7d0      	b.n	800b1fc <_dtoa_r+0x6c4>
 800b25a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	f000 80ca 	beq.w	800b3f6 <_dtoa_r+0x8be>
 800b262:	9a07      	ldr	r2, [sp, #28]
 800b264:	2a01      	cmp	r2, #1
 800b266:	f300 80ad 	bgt.w	800b3c4 <_dtoa_r+0x88c>
 800b26a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	f000 80a5 	beq.w	800b3bc <_dtoa_r+0x884>
 800b272:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b276:	9e08      	ldr	r6, [sp, #32]
 800b278:	9d05      	ldr	r5, [sp, #20]
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	441a      	add	r2, r3
 800b27e:	9205      	str	r2, [sp, #20]
 800b280:	9a06      	ldr	r2, [sp, #24]
 800b282:	2101      	movs	r1, #1
 800b284:	441a      	add	r2, r3
 800b286:	4620      	mov	r0, r4
 800b288:	9206      	str	r2, [sp, #24]
 800b28a:	f000 fc3d 	bl	800bb08 <__i2b>
 800b28e:	4607      	mov	r7, r0
 800b290:	b165      	cbz	r5, 800b2ac <_dtoa_r+0x774>
 800b292:	9b06      	ldr	r3, [sp, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd09      	ble.n	800b2ac <_dtoa_r+0x774>
 800b298:	42ab      	cmp	r3, r5
 800b29a:	9a05      	ldr	r2, [sp, #20]
 800b29c:	bfa8      	it	ge
 800b29e:	462b      	movge	r3, r5
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	9205      	str	r2, [sp, #20]
 800b2a4:	9a06      	ldr	r2, [sp, #24]
 800b2a6:	1aed      	subs	r5, r5, r3
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	9306      	str	r3, [sp, #24]
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	b1f3      	cbz	r3, 800b2ee <_dtoa_r+0x7b6>
 800b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 80a3 	beq.w	800b3fe <_dtoa_r+0x8c6>
 800b2b8:	2e00      	cmp	r6, #0
 800b2ba:	dd10      	ble.n	800b2de <_dtoa_r+0x7a6>
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4632      	mov	r2, r6
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f000 fce1 	bl	800bc88 <__pow5mult>
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fc31 	bl	800bb34 <__multiply>
 800b2d2:	4651      	mov	r1, sl
 800b2d4:	4680      	mov	r8, r0
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fb60 	bl	800b99c <_Bfree>
 800b2dc:	46c2      	mov	sl, r8
 800b2de:	9b08      	ldr	r3, [sp, #32]
 800b2e0:	1b9a      	subs	r2, r3, r6
 800b2e2:	d004      	beq.n	800b2ee <_dtoa_r+0x7b6>
 800b2e4:	4651      	mov	r1, sl
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 fcce 	bl	800bc88 <__pow5mult>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fc09 	bl	800bb08 <__i2b>
 800b2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	f340 8081 	ble.w	800b402 <_dtoa_r+0x8ca>
 800b300:	461a      	mov	r2, r3
 800b302:	4601      	mov	r1, r0
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fcbf 	bl	800bc88 <__pow5mult>
 800b30a:	9b07      	ldr	r3, [sp, #28]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	4606      	mov	r6, r0
 800b310:	dd7a      	ble.n	800b408 <_dtoa_r+0x8d0>
 800b312:	f04f 0800 	mov.w	r8, #0
 800b316:	6933      	ldr	r3, [r6, #16]
 800b318:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b31c:	6918      	ldr	r0, [r3, #16]
 800b31e:	f000 fba5 	bl	800ba6c <__hi0bits>
 800b322:	f1c0 0020 	rsb	r0, r0, #32
 800b326:	9b06      	ldr	r3, [sp, #24]
 800b328:	4418      	add	r0, r3
 800b32a:	f010 001f 	ands.w	r0, r0, #31
 800b32e:	f000 8094 	beq.w	800b45a <_dtoa_r+0x922>
 800b332:	f1c0 0320 	rsb	r3, r0, #32
 800b336:	2b04      	cmp	r3, #4
 800b338:	f340 8085 	ble.w	800b446 <_dtoa_r+0x90e>
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	f1c0 001c 	rsb	r0, r0, #28
 800b342:	4403      	add	r3, r0
 800b344:	9305      	str	r3, [sp, #20]
 800b346:	9b06      	ldr	r3, [sp, #24]
 800b348:	4403      	add	r3, r0
 800b34a:	4405      	add	r5, r0
 800b34c:	9306      	str	r3, [sp, #24]
 800b34e:	9b05      	ldr	r3, [sp, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	dd05      	ble.n	800b360 <_dtoa_r+0x828>
 800b354:	4651      	mov	r1, sl
 800b356:	461a      	mov	r2, r3
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 fcef 	bl	800bd3c <__lshift>
 800b35e:	4682      	mov	sl, r0
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	dd05      	ble.n	800b372 <_dtoa_r+0x83a>
 800b366:	4631      	mov	r1, r6
 800b368:	461a      	mov	r2, r3
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 fce6 	bl	800bd3c <__lshift>
 800b370:	4606      	mov	r6, r0
 800b372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d072      	beq.n	800b45e <_dtoa_r+0x926>
 800b378:	4631      	mov	r1, r6
 800b37a:	4650      	mov	r0, sl
 800b37c:	f000 fd4a 	bl	800be14 <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	da6c      	bge.n	800b45e <_dtoa_r+0x926>
 800b384:	2300      	movs	r3, #0
 800b386:	4651      	mov	r1, sl
 800b388:	220a      	movs	r2, #10
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 fb28 	bl	800b9e0 <__multadd>
 800b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b392:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b396:	4682      	mov	sl, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 81b0 	beq.w	800b6fe <_dtoa_r+0xbc6>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fb1b 	bl	800b9e0 <__multadd>
 800b3aa:	9b01      	ldr	r3, [sp, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f300 8096 	bgt.w	800b4e0 <_dtoa_r+0x9a8>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	dc59      	bgt.n	800b46e <_dtoa_r+0x936>
 800b3ba:	e091      	b.n	800b4e0 <_dtoa_r+0x9a8>
 800b3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3c2:	e758      	b.n	800b276 <_dtoa_r+0x73e>
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	1e5e      	subs	r6, r3, #1
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	42b3      	cmp	r3, r6
 800b3cc:	bfbf      	itttt	lt
 800b3ce:	9b08      	ldrlt	r3, [sp, #32]
 800b3d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b3d2:	9608      	strlt	r6, [sp, #32]
 800b3d4:	1af3      	sublt	r3, r6, r3
 800b3d6:	bfb4      	ite	lt
 800b3d8:	18d2      	addlt	r2, r2, r3
 800b3da:	1b9e      	subge	r6, r3, r6
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	bfbc      	itt	lt
 800b3e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b3e2:	2600      	movlt	r6, #0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfb7      	itett	lt
 800b3e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b3ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b3f0:	1a9d      	sublt	r5, r3, r2
 800b3f2:	2300      	movlt	r3, #0
 800b3f4:	e741      	b.n	800b27a <_dtoa_r+0x742>
 800b3f6:	9e08      	ldr	r6, [sp, #32]
 800b3f8:	9d05      	ldr	r5, [sp, #20]
 800b3fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3fc:	e748      	b.n	800b290 <_dtoa_r+0x758>
 800b3fe:	9a08      	ldr	r2, [sp, #32]
 800b400:	e770      	b.n	800b2e4 <_dtoa_r+0x7ac>
 800b402:	9b07      	ldr	r3, [sp, #28]
 800b404:	2b01      	cmp	r3, #1
 800b406:	dc19      	bgt.n	800b43c <_dtoa_r+0x904>
 800b408:	9b02      	ldr	r3, [sp, #8]
 800b40a:	b9bb      	cbnz	r3, 800b43c <_dtoa_r+0x904>
 800b40c:	9b03      	ldr	r3, [sp, #12]
 800b40e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b412:	b99b      	cbnz	r3, 800b43c <_dtoa_r+0x904>
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b41a:	0d1b      	lsrs	r3, r3, #20
 800b41c:	051b      	lsls	r3, r3, #20
 800b41e:	b183      	cbz	r3, 800b442 <_dtoa_r+0x90a>
 800b420:	9b05      	ldr	r3, [sp, #20]
 800b422:	3301      	adds	r3, #1
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	9b06      	ldr	r3, [sp, #24]
 800b428:	3301      	adds	r3, #1
 800b42a:	9306      	str	r3, [sp, #24]
 800b42c:	f04f 0801 	mov.w	r8, #1
 800b430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b432:	2b00      	cmp	r3, #0
 800b434:	f47f af6f 	bne.w	800b316 <_dtoa_r+0x7de>
 800b438:	2001      	movs	r0, #1
 800b43a:	e774      	b.n	800b326 <_dtoa_r+0x7ee>
 800b43c:	f04f 0800 	mov.w	r8, #0
 800b440:	e7f6      	b.n	800b430 <_dtoa_r+0x8f8>
 800b442:	4698      	mov	r8, r3
 800b444:	e7f4      	b.n	800b430 <_dtoa_r+0x8f8>
 800b446:	d082      	beq.n	800b34e <_dtoa_r+0x816>
 800b448:	9a05      	ldr	r2, [sp, #20]
 800b44a:	331c      	adds	r3, #28
 800b44c:	441a      	add	r2, r3
 800b44e:	9205      	str	r2, [sp, #20]
 800b450:	9a06      	ldr	r2, [sp, #24]
 800b452:	441a      	add	r2, r3
 800b454:	441d      	add	r5, r3
 800b456:	9206      	str	r2, [sp, #24]
 800b458:	e779      	b.n	800b34e <_dtoa_r+0x816>
 800b45a:	4603      	mov	r3, r0
 800b45c:	e7f4      	b.n	800b448 <_dtoa_r+0x910>
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	dc37      	bgt.n	800b4d4 <_dtoa_r+0x99c>
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	2b02      	cmp	r3, #2
 800b468:	dd34      	ble.n	800b4d4 <_dtoa_r+0x99c>
 800b46a:	9b04      	ldr	r3, [sp, #16]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	b963      	cbnz	r3, 800b48c <_dtoa_r+0x954>
 800b472:	4631      	mov	r1, r6
 800b474:	2205      	movs	r2, #5
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fab2 	bl	800b9e0 <__multadd>
 800b47c:	4601      	mov	r1, r0
 800b47e:	4606      	mov	r6, r0
 800b480:	4650      	mov	r0, sl
 800b482:	f000 fcc7 	bl	800be14 <__mcmp>
 800b486:	2800      	cmp	r0, #0
 800b488:	f73f adbb 	bgt.w	800b002 <_dtoa_r+0x4ca>
 800b48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48e:	9d00      	ldr	r5, [sp, #0]
 800b490:	ea6f 0b03 	mvn.w	fp, r3
 800b494:	f04f 0800 	mov.w	r8, #0
 800b498:	4631      	mov	r1, r6
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fa7e 	bl	800b99c <_Bfree>
 800b4a0:	2f00      	cmp	r7, #0
 800b4a2:	f43f aeab 	beq.w	800b1fc <_dtoa_r+0x6c4>
 800b4a6:	f1b8 0f00 	cmp.w	r8, #0
 800b4aa:	d005      	beq.n	800b4b8 <_dtoa_r+0x980>
 800b4ac:	45b8      	cmp	r8, r7
 800b4ae:	d003      	beq.n	800b4b8 <_dtoa_r+0x980>
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fa72 	bl	800b99c <_Bfree>
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f000 fa6e 	bl	800b99c <_Bfree>
 800b4c0:	e69c      	b.n	800b1fc <_dtoa_r+0x6c4>
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	4637      	mov	r7, r6
 800b4c6:	e7e1      	b.n	800b48c <_dtoa_r+0x954>
 800b4c8:	46bb      	mov	fp, r7
 800b4ca:	4637      	mov	r7, r6
 800b4cc:	e599      	b.n	800b002 <_dtoa_r+0x4ca>
 800b4ce:	bf00      	nop
 800b4d0:	40240000 	.word	0x40240000
 800b4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80c8 	beq.w	800b66c <_dtoa_r+0xb34>
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	2d00      	cmp	r5, #0
 800b4e2:	dd05      	ble.n	800b4f0 <_dtoa_r+0x9b8>
 800b4e4:	4639      	mov	r1, r7
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fc27 	bl	800bd3c <__lshift>
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	f1b8 0f00 	cmp.w	r8, #0
 800b4f4:	d05b      	beq.n	800b5ae <_dtoa_r+0xa76>
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f000 fa0f 	bl	800b91c <_Balloc>
 800b4fe:	4605      	mov	r5, r0
 800b500:	b928      	cbnz	r0, 800b50e <_dtoa_r+0x9d6>
 800b502:	4b83      	ldr	r3, [pc, #524]	; (800b710 <_dtoa_r+0xbd8>)
 800b504:	4602      	mov	r2, r0
 800b506:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b50a:	f7ff bb2e 	b.w	800ab6a <_dtoa_r+0x32>
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	3202      	adds	r2, #2
 800b512:	0092      	lsls	r2, r2, #2
 800b514:	f107 010c 	add.w	r1, r7, #12
 800b518:	300c      	adds	r0, #12
 800b51a:	f7ff fa74 	bl	800aa06 <memcpy>
 800b51e:	2201      	movs	r2, #1
 800b520:	4629      	mov	r1, r5
 800b522:	4620      	mov	r0, r4
 800b524:	f000 fc0a 	bl	800bd3c <__lshift>
 800b528:	9b00      	ldr	r3, [sp, #0]
 800b52a:	3301      	adds	r3, #1
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b532:	4413      	add	r3, r2
 800b534:	9308      	str	r3, [sp, #32]
 800b536:	9b02      	ldr	r3, [sp, #8]
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	46b8      	mov	r8, r7
 800b53e:	9306      	str	r3, [sp, #24]
 800b540:	4607      	mov	r7, r0
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	4631      	mov	r1, r6
 800b546:	3b01      	subs	r3, #1
 800b548:	4650      	mov	r0, sl
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	f7ff fa69 	bl	800aa22 <quorem>
 800b550:	4641      	mov	r1, r8
 800b552:	9002      	str	r0, [sp, #8]
 800b554:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b558:	4650      	mov	r0, sl
 800b55a:	f000 fc5b 	bl	800be14 <__mcmp>
 800b55e:	463a      	mov	r2, r7
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	4631      	mov	r1, r6
 800b564:	4620      	mov	r0, r4
 800b566:	f000 fc71 	bl	800be4c <__mdiff>
 800b56a:	68c2      	ldr	r2, [r0, #12]
 800b56c:	4605      	mov	r5, r0
 800b56e:	bb02      	cbnz	r2, 800b5b2 <_dtoa_r+0xa7a>
 800b570:	4601      	mov	r1, r0
 800b572:	4650      	mov	r0, sl
 800b574:	f000 fc4e 	bl	800be14 <__mcmp>
 800b578:	4602      	mov	r2, r0
 800b57a:	4629      	mov	r1, r5
 800b57c:	4620      	mov	r0, r4
 800b57e:	9209      	str	r2, [sp, #36]	; 0x24
 800b580:	f000 fa0c 	bl	800b99c <_Bfree>
 800b584:	9b07      	ldr	r3, [sp, #28]
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	9d04      	ldr	r5, [sp, #16]
 800b58a:	ea43 0102 	orr.w	r1, r3, r2
 800b58e:	9b06      	ldr	r3, [sp, #24]
 800b590:	4319      	orrs	r1, r3
 800b592:	d110      	bne.n	800b5b6 <_dtoa_r+0xa7e>
 800b594:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b598:	d029      	beq.n	800b5ee <_dtoa_r+0xab6>
 800b59a:	9b05      	ldr	r3, [sp, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dd02      	ble.n	800b5a6 <_dtoa_r+0xa6e>
 800b5a0:	9b02      	ldr	r3, [sp, #8]
 800b5a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b5a6:	9b01      	ldr	r3, [sp, #4]
 800b5a8:	f883 9000 	strb.w	r9, [r3]
 800b5ac:	e774      	b.n	800b498 <_dtoa_r+0x960>
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	e7ba      	b.n	800b528 <_dtoa_r+0x9f0>
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	e7e1      	b.n	800b57a <_dtoa_r+0xa42>
 800b5b6:	9b05      	ldr	r3, [sp, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	db04      	blt.n	800b5c6 <_dtoa_r+0xa8e>
 800b5bc:	9907      	ldr	r1, [sp, #28]
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	9906      	ldr	r1, [sp, #24]
 800b5c2:	430b      	orrs	r3, r1
 800b5c4:	d120      	bne.n	800b608 <_dtoa_r+0xad0>
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	dded      	ble.n	800b5a6 <_dtoa_r+0xa6e>
 800b5ca:	4651      	mov	r1, sl
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fbb4 	bl	800bd3c <__lshift>
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	f000 fc1c 	bl	800be14 <__mcmp>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	dc03      	bgt.n	800b5e8 <_dtoa_r+0xab0>
 800b5e0:	d1e1      	bne.n	800b5a6 <_dtoa_r+0xa6e>
 800b5e2:	f019 0f01 	tst.w	r9, #1
 800b5e6:	d0de      	beq.n	800b5a6 <_dtoa_r+0xa6e>
 800b5e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b5ec:	d1d8      	bne.n	800b5a0 <_dtoa_r+0xa68>
 800b5ee:	9a01      	ldr	r2, [sp, #4]
 800b5f0:	2339      	movs	r3, #57	; 0x39
 800b5f2:	7013      	strb	r3, [r2, #0]
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	461d      	mov	r5, r3
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5fe:	2a39      	cmp	r2, #57	; 0x39
 800b600:	d06c      	beq.n	800b6dc <_dtoa_r+0xba4>
 800b602:	3201      	adds	r2, #1
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e747      	b.n	800b498 <_dtoa_r+0x960>
 800b608:	2a00      	cmp	r2, #0
 800b60a:	dd07      	ble.n	800b61c <_dtoa_r+0xae4>
 800b60c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b610:	d0ed      	beq.n	800b5ee <_dtoa_r+0xab6>
 800b612:	9a01      	ldr	r2, [sp, #4]
 800b614:	f109 0301 	add.w	r3, r9, #1
 800b618:	7013      	strb	r3, [r2, #0]
 800b61a:	e73d      	b.n	800b498 <_dtoa_r+0x960>
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	9a08      	ldr	r2, [sp, #32]
 800b620:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b624:	4293      	cmp	r3, r2
 800b626:	d043      	beq.n	800b6b0 <_dtoa_r+0xb78>
 800b628:	4651      	mov	r1, sl
 800b62a:	2300      	movs	r3, #0
 800b62c:	220a      	movs	r2, #10
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 f9d6 	bl	800b9e0 <__multadd>
 800b634:	45b8      	cmp	r8, r7
 800b636:	4682      	mov	sl, r0
 800b638:	f04f 0300 	mov.w	r3, #0
 800b63c:	f04f 020a 	mov.w	r2, #10
 800b640:	4641      	mov	r1, r8
 800b642:	4620      	mov	r0, r4
 800b644:	d107      	bne.n	800b656 <_dtoa_r+0xb1e>
 800b646:	f000 f9cb 	bl	800b9e0 <__multadd>
 800b64a:	4680      	mov	r8, r0
 800b64c:	4607      	mov	r7, r0
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	3301      	adds	r3, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	e775      	b.n	800b542 <_dtoa_r+0xa0a>
 800b656:	f000 f9c3 	bl	800b9e0 <__multadd>
 800b65a:	4639      	mov	r1, r7
 800b65c:	4680      	mov	r8, r0
 800b65e:	2300      	movs	r3, #0
 800b660:	220a      	movs	r2, #10
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f9bc 	bl	800b9e0 <__multadd>
 800b668:	4607      	mov	r7, r0
 800b66a:	e7f0      	b.n	800b64e <_dtoa_r+0xb16>
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	9d00      	ldr	r5, [sp, #0]
 800b672:	4631      	mov	r1, r6
 800b674:	4650      	mov	r0, sl
 800b676:	f7ff f9d4 	bl	800aa22 <quorem>
 800b67a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b67e:	9b00      	ldr	r3, [sp, #0]
 800b680:	f805 9b01 	strb.w	r9, [r5], #1
 800b684:	1aea      	subs	r2, r5, r3
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	4293      	cmp	r3, r2
 800b68a:	dd07      	ble.n	800b69c <_dtoa_r+0xb64>
 800b68c:	4651      	mov	r1, sl
 800b68e:	2300      	movs	r3, #0
 800b690:	220a      	movs	r2, #10
 800b692:	4620      	mov	r0, r4
 800b694:	f000 f9a4 	bl	800b9e0 <__multadd>
 800b698:	4682      	mov	sl, r0
 800b69a:	e7ea      	b.n	800b672 <_dtoa_r+0xb3a>
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bfc8      	it	gt
 800b6a2:	461d      	movgt	r5, r3
 800b6a4:	9b00      	ldr	r3, [sp, #0]
 800b6a6:	bfd8      	it	le
 800b6a8:	2501      	movle	r5, #1
 800b6aa:	441d      	add	r5, r3
 800b6ac:	f04f 0800 	mov.w	r8, #0
 800b6b0:	4651      	mov	r1, sl
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 fb41 	bl	800bd3c <__lshift>
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4682      	mov	sl, r0
 800b6be:	f000 fba9 	bl	800be14 <__mcmp>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	dc96      	bgt.n	800b5f4 <_dtoa_r+0xabc>
 800b6c6:	d102      	bne.n	800b6ce <_dtoa_r+0xb96>
 800b6c8:	f019 0f01 	tst.w	r9, #1
 800b6cc:	d192      	bne.n	800b5f4 <_dtoa_r+0xabc>
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	461d      	mov	r5, r3
 800b6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d6:	2a30      	cmp	r2, #48	; 0x30
 800b6d8:	d0fa      	beq.n	800b6d0 <_dtoa_r+0xb98>
 800b6da:	e6dd      	b.n	800b498 <_dtoa_r+0x960>
 800b6dc:	9a00      	ldr	r2, [sp, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d189      	bne.n	800b5f6 <_dtoa_r+0xabe>
 800b6e2:	f10b 0b01 	add.w	fp, fp, #1
 800b6e6:	2331      	movs	r3, #49	; 0x31
 800b6e8:	e796      	b.n	800b618 <_dtoa_r+0xae0>
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <_dtoa_r+0xbdc>)
 800b6ec:	f7ff ba99 	b.w	800ac22 <_dtoa_r+0xea>
 800b6f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f47f aa6d 	bne.w	800abd2 <_dtoa_r+0x9a>
 800b6f8:	4b07      	ldr	r3, [pc, #28]	; (800b718 <_dtoa_r+0xbe0>)
 800b6fa:	f7ff ba92 	b.w	800ac22 <_dtoa_r+0xea>
 800b6fe:	9b01      	ldr	r3, [sp, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	dcb5      	bgt.n	800b670 <_dtoa_r+0xb38>
 800b704:	9b07      	ldr	r3, [sp, #28]
 800b706:	2b02      	cmp	r3, #2
 800b708:	f73f aeb1 	bgt.w	800b46e <_dtoa_r+0x936>
 800b70c:	e7b0      	b.n	800b670 <_dtoa_r+0xb38>
 800b70e:	bf00      	nop
 800b710:	0800e0fc 	.word	0x0800e0fc
 800b714:	0800e05c 	.word	0x0800e05c
 800b718:	0800e080 	.word	0x0800e080

0800b71c <_free_r>:
 800b71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b71e:	2900      	cmp	r1, #0
 800b720:	d044      	beq.n	800b7ac <_free_r+0x90>
 800b722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b726:	9001      	str	r0, [sp, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f1a1 0404 	sub.w	r4, r1, #4
 800b72e:	bfb8      	it	lt
 800b730:	18e4      	addlt	r4, r4, r3
 800b732:	f000 f8e7 	bl	800b904 <__malloc_lock>
 800b736:	4a1e      	ldr	r2, [pc, #120]	; (800b7b0 <_free_r+0x94>)
 800b738:	9801      	ldr	r0, [sp, #4]
 800b73a:	6813      	ldr	r3, [r2, #0]
 800b73c:	b933      	cbnz	r3, 800b74c <_free_r+0x30>
 800b73e:	6063      	str	r3, [r4, #4]
 800b740:	6014      	str	r4, [r2, #0]
 800b742:	b003      	add	sp, #12
 800b744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b748:	f000 b8e2 	b.w	800b910 <__malloc_unlock>
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	d908      	bls.n	800b762 <_free_r+0x46>
 800b750:	6825      	ldr	r5, [r4, #0]
 800b752:	1961      	adds	r1, r4, r5
 800b754:	428b      	cmp	r3, r1
 800b756:	bf01      	itttt	eq
 800b758:	6819      	ldreq	r1, [r3, #0]
 800b75a:	685b      	ldreq	r3, [r3, #4]
 800b75c:	1949      	addeq	r1, r1, r5
 800b75e:	6021      	streq	r1, [r4, #0]
 800b760:	e7ed      	b.n	800b73e <_free_r+0x22>
 800b762:	461a      	mov	r2, r3
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	b10b      	cbz	r3, 800b76c <_free_r+0x50>
 800b768:	42a3      	cmp	r3, r4
 800b76a:	d9fa      	bls.n	800b762 <_free_r+0x46>
 800b76c:	6811      	ldr	r1, [r2, #0]
 800b76e:	1855      	adds	r5, r2, r1
 800b770:	42a5      	cmp	r5, r4
 800b772:	d10b      	bne.n	800b78c <_free_r+0x70>
 800b774:	6824      	ldr	r4, [r4, #0]
 800b776:	4421      	add	r1, r4
 800b778:	1854      	adds	r4, r2, r1
 800b77a:	42a3      	cmp	r3, r4
 800b77c:	6011      	str	r1, [r2, #0]
 800b77e:	d1e0      	bne.n	800b742 <_free_r+0x26>
 800b780:	681c      	ldr	r4, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	6053      	str	r3, [r2, #4]
 800b786:	440c      	add	r4, r1
 800b788:	6014      	str	r4, [r2, #0]
 800b78a:	e7da      	b.n	800b742 <_free_r+0x26>
 800b78c:	d902      	bls.n	800b794 <_free_r+0x78>
 800b78e:	230c      	movs	r3, #12
 800b790:	6003      	str	r3, [r0, #0]
 800b792:	e7d6      	b.n	800b742 <_free_r+0x26>
 800b794:	6825      	ldr	r5, [r4, #0]
 800b796:	1961      	adds	r1, r4, r5
 800b798:	428b      	cmp	r3, r1
 800b79a:	bf04      	itt	eq
 800b79c:	6819      	ldreq	r1, [r3, #0]
 800b79e:	685b      	ldreq	r3, [r3, #4]
 800b7a0:	6063      	str	r3, [r4, #4]
 800b7a2:	bf04      	itt	eq
 800b7a4:	1949      	addeq	r1, r1, r5
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	6054      	str	r4, [r2, #4]
 800b7aa:	e7ca      	b.n	800b742 <_free_r+0x26>
 800b7ac:	b003      	add	sp, #12
 800b7ae:	bd30      	pop	{r4, r5, pc}
 800b7b0:	20005308 	.word	0x20005308

0800b7b4 <malloc>:
 800b7b4:	4b02      	ldr	r3, [pc, #8]	; (800b7c0 <malloc+0xc>)
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	6818      	ldr	r0, [r3, #0]
 800b7ba:	f000 b823 	b.w	800b804 <_malloc_r>
 800b7be:	bf00      	nop
 800b7c0:	2000007c 	.word	0x2000007c

0800b7c4 <sbrk_aligned>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	4e0e      	ldr	r6, [pc, #56]	; (800b800 <sbrk_aligned+0x3c>)
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	6831      	ldr	r1, [r6, #0]
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	b911      	cbnz	r1, 800b7d6 <sbrk_aligned+0x12>
 800b7d0:	f000 fe40 	bl	800c454 <_sbrk_r>
 800b7d4:	6030      	str	r0, [r6, #0]
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f000 fe3b 	bl	800c454 <_sbrk_r>
 800b7de:	1c43      	adds	r3, r0, #1
 800b7e0:	d00a      	beq.n	800b7f8 <sbrk_aligned+0x34>
 800b7e2:	1cc4      	adds	r4, r0, #3
 800b7e4:	f024 0403 	bic.w	r4, r4, #3
 800b7e8:	42a0      	cmp	r0, r4
 800b7ea:	d007      	beq.n	800b7fc <sbrk_aligned+0x38>
 800b7ec:	1a21      	subs	r1, r4, r0
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 fe30 	bl	800c454 <_sbrk_r>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d101      	bne.n	800b7fc <sbrk_aligned+0x38>
 800b7f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
 800b800:	2000530c 	.word	0x2000530c

0800b804 <_malloc_r>:
 800b804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b808:	1ccd      	adds	r5, r1, #3
 800b80a:	f025 0503 	bic.w	r5, r5, #3
 800b80e:	3508      	adds	r5, #8
 800b810:	2d0c      	cmp	r5, #12
 800b812:	bf38      	it	cc
 800b814:	250c      	movcc	r5, #12
 800b816:	2d00      	cmp	r5, #0
 800b818:	4607      	mov	r7, r0
 800b81a:	db01      	blt.n	800b820 <_malloc_r+0x1c>
 800b81c:	42a9      	cmp	r1, r5
 800b81e:	d905      	bls.n	800b82c <_malloc_r+0x28>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	2600      	movs	r6, #0
 800b826:	4630      	mov	r0, r6
 800b828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b900 <_malloc_r+0xfc>
 800b830:	f000 f868 	bl	800b904 <__malloc_lock>
 800b834:	f8d8 3000 	ldr.w	r3, [r8]
 800b838:	461c      	mov	r4, r3
 800b83a:	bb5c      	cbnz	r4, 800b894 <_malloc_r+0x90>
 800b83c:	4629      	mov	r1, r5
 800b83e:	4638      	mov	r0, r7
 800b840:	f7ff ffc0 	bl	800b7c4 <sbrk_aligned>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	4604      	mov	r4, r0
 800b848:	d155      	bne.n	800b8f6 <_malloc_r+0xf2>
 800b84a:	f8d8 4000 	ldr.w	r4, [r8]
 800b84e:	4626      	mov	r6, r4
 800b850:	2e00      	cmp	r6, #0
 800b852:	d145      	bne.n	800b8e0 <_malloc_r+0xdc>
 800b854:	2c00      	cmp	r4, #0
 800b856:	d048      	beq.n	800b8ea <_malloc_r+0xe6>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	4631      	mov	r1, r6
 800b85c:	4638      	mov	r0, r7
 800b85e:	eb04 0903 	add.w	r9, r4, r3
 800b862:	f000 fdf7 	bl	800c454 <_sbrk_r>
 800b866:	4581      	cmp	r9, r0
 800b868:	d13f      	bne.n	800b8ea <_malloc_r+0xe6>
 800b86a:	6821      	ldr	r1, [r4, #0]
 800b86c:	1a6d      	subs	r5, r5, r1
 800b86e:	4629      	mov	r1, r5
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff ffa7 	bl	800b7c4 <sbrk_aligned>
 800b876:	3001      	adds	r0, #1
 800b878:	d037      	beq.n	800b8ea <_malloc_r+0xe6>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	442b      	add	r3, r5
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	f8d8 3000 	ldr.w	r3, [r8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d038      	beq.n	800b8fa <_malloc_r+0xf6>
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	42a2      	cmp	r2, r4
 800b88c:	d12b      	bne.n	800b8e6 <_malloc_r+0xe2>
 800b88e:	2200      	movs	r2, #0
 800b890:	605a      	str	r2, [r3, #4]
 800b892:	e00f      	b.n	800b8b4 <_malloc_r+0xb0>
 800b894:	6822      	ldr	r2, [r4, #0]
 800b896:	1b52      	subs	r2, r2, r5
 800b898:	d41f      	bmi.n	800b8da <_malloc_r+0xd6>
 800b89a:	2a0b      	cmp	r2, #11
 800b89c:	d917      	bls.n	800b8ce <_malloc_r+0xca>
 800b89e:	1961      	adds	r1, r4, r5
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	6025      	str	r5, [r4, #0]
 800b8a4:	bf18      	it	ne
 800b8a6:	6059      	strne	r1, [r3, #4]
 800b8a8:	6863      	ldr	r3, [r4, #4]
 800b8aa:	bf08      	it	eq
 800b8ac:	f8c8 1000 	streq.w	r1, [r8]
 800b8b0:	5162      	str	r2, [r4, r5]
 800b8b2:	604b      	str	r3, [r1, #4]
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	f104 060b 	add.w	r6, r4, #11
 800b8ba:	f000 f829 	bl	800b910 <__malloc_unlock>
 800b8be:	f026 0607 	bic.w	r6, r6, #7
 800b8c2:	1d23      	adds	r3, r4, #4
 800b8c4:	1af2      	subs	r2, r6, r3
 800b8c6:	d0ae      	beq.n	800b826 <_malloc_r+0x22>
 800b8c8:	1b9b      	subs	r3, r3, r6
 800b8ca:	50a3      	str	r3, [r4, r2]
 800b8cc:	e7ab      	b.n	800b826 <_malloc_r+0x22>
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	6862      	ldr	r2, [r4, #4]
 800b8d2:	d1dd      	bne.n	800b890 <_malloc_r+0x8c>
 800b8d4:	f8c8 2000 	str.w	r2, [r8]
 800b8d8:	e7ec      	b.n	800b8b4 <_malloc_r+0xb0>
 800b8da:	4623      	mov	r3, r4
 800b8dc:	6864      	ldr	r4, [r4, #4]
 800b8de:	e7ac      	b.n	800b83a <_malloc_r+0x36>
 800b8e0:	4634      	mov	r4, r6
 800b8e2:	6876      	ldr	r6, [r6, #4]
 800b8e4:	e7b4      	b.n	800b850 <_malloc_r+0x4c>
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	e7cc      	b.n	800b884 <_malloc_r+0x80>
 800b8ea:	230c      	movs	r3, #12
 800b8ec:	603b      	str	r3, [r7, #0]
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f000 f80e 	bl	800b910 <__malloc_unlock>
 800b8f4:	e797      	b.n	800b826 <_malloc_r+0x22>
 800b8f6:	6025      	str	r5, [r4, #0]
 800b8f8:	e7dc      	b.n	800b8b4 <_malloc_r+0xb0>
 800b8fa:	605b      	str	r3, [r3, #4]
 800b8fc:	deff      	udf	#255	; 0xff
 800b8fe:	bf00      	nop
 800b900:	20005308 	.word	0x20005308

0800b904 <__malloc_lock>:
 800b904:	4801      	ldr	r0, [pc, #4]	; (800b90c <__malloc_lock+0x8>)
 800b906:	f7ff b87c 	b.w	800aa02 <__retarget_lock_acquire_recursive>
 800b90a:	bf00      	nop
 800b90c:	20005304 	.word	0x20005304

0800b910 <__malloc_unlock>:
 800b910:	4801      	ldr	r0, [pc, #4]	; (800b918 <__malloc_unlock+0x8>)
 800b912:	f7ff b877 	b.w	800aa04 <__retarget_lock_release_recursive>
 800b916:	bf00      	nop
 800b918:	20005304 	.word	0x20005304

0800b91c <_Balloc>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	69c6      	ldr	r6, [r0, #28]
 800b920:	4604      	mov	r4, r0
 800b922:	460d      	mov	r5, r1
 800b924:	b976      	cbnz	r6, 800b944 <_Balloc+0x28>
 800b926:	2010      	movs	r0, #16
 800b928:	f7ff ff44 	bl	800b7b4 <malloc>
 800b92c:	4602      	mov	r2, r0
 800b92e:	61e0      	str	r0, [r4, #28]
 800b930:	b920      	cbnz	r0, 800b93c <_Balloc+0x20>
 800b932:	4b18      	ldr	r3, [pc, #96]	; (800b994 <_Balloc+0x78>)
 800b934:	4818      	ldr	r0, [pc, #96]	; (800b998 <_Balloc+0x7c>)
 800b936:	216b      	movs	r1, #107	; 0x6b
 800b938:	f000 fd9c 	bl	800c474 <__assert_func>
 800b93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b940:	6006      	str	r6, [r0, #0]
 800b942:	60c6      	str	r6, [r0, #12]
 800b944:	69e6      	ldr	r6, [r4, #28]
 800b946:	68f3      	ldr	r3, [r6, #12]
 800b948:	b183      	cbz	r3, 800b96c <_Balloc+0x50>
 800b94a:	69e3      	ldr	r3, [r4, #28]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b952:	b9b8      	cbnz	r0, 800b984 <_Balloc+0x68>
 800b954:	2101      	movs	r1, #1
 800b956:	fa01 f605 	lsl.w	r6, r1, r5
 800b95a:	1d72      	adds	r2, r6, #5
 800b95c:	0092      	lsls	r2, r2, #2
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fda6 	bl	800c4b0 <_calloc_r>
 800b964:	b160      	cbz	r0, 800b980 <_Balloc+0x64>
 800b966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b96a:	e00e      	b.n	800b98a <_Balloc+0x6e>
 800b96c:	2221      	movs	r2, #33	; 0x21
 800b96e:	2104      	movs	r1, #4
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fd9d 	bl	800c4b0 <_calloc_r>
 800b976:	69e3      	ldr	r3, [r4, #28]
 800b978:	60f0      	str	r0, [r6, #12]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e4      	bne.n	800b94a <_Balloc+0x2e>
 800b980:	2000      	movs	r0, #0
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	6802      	ldr	r2, [r0, #0]
 800b986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b98a:	2300      	movs	r3, #0
 800b98c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b990:	e7f7      	b.n	800b982 <_Balloc+0x66>
 800b992:	bf00      	nop
 800b994:	0800e08d 	.word	0x0800e08d
 800b998:	0800e10d 	.word	0x0800e10d

0800b99c <_Bfree>:
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	69c6      	ldr	r6, [r0, #28]
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	b976      	cbnz	r6, 800b9c4 <_Bfree+0x28>
 800b9a6:	2010      	movs	r0, #16
 800b9a8:	f7ff ff04 	bl	800b7b4 <malloc>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	61e8      	str	r0, [r5, #28]
 800b9b0:	b920      	cbnz	r0, 800b9bc <_Bfree+0x20>
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <_Bfree+0x3c>)
 800b9b4:	4809      	ldr	r0, [pc, #36]	; (800b9dc <_Bfree+0x40>)
 800b9b6:	218f      	movs	r1, #143	; 0x8f
 800b9b8:	f000 fd5c 	bl	800c474 <__assert_func>
 800b9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9c0:	6006      	str	r6, [r0, #0]
 800b9c2:	60c6      	str	r6, [r0, #12]
 800b9c4:	b13c      	cbz	r4, 800b9d6 <_Bfree+0x3a>
 800b9c6:	69eb      	ldr	r3, [r5, #28]
 800b9c8:	6862      	ldr	r2, [r4, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9d0:	6021      	str	r1, [r4, #0]
 800b9d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	0800e08d 	.word	0x0800e08d
 800b9dc:	0800e10d 	.word	0x0800e10d

0800b9e0 <__multadd>:
 800b9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e4:	690d      	ldr	r5, [r1, #16]
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	461e      	mov	r6, r3
 800b9ec:	f101 0c14 	add.w	ip, r1, #20
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b9f6:	b299      	uxth	r1, r3
 800b9f8:	fb02 6101 	mla	r1, r2, r1, r6
 800b9fc:	0c1e      	lsrs	r6, r3, #16
 800b9fe:	0c0b      	lsrs	r3, r1, #16
 800ba00:	fb02 3306 	mla	r3, r2, r6, r3
 800ba04:	b289      	uxth	r1, r1
 800ba06:	3001      	adds	r0, #1
 800ba08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba0c:	4285      	cmp	r5, r0
 800ba0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ba12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba16:	dcec      	bgt.n	800b9f2 <__multadd+0x12>
 800ba18:	b30e      	cbz	r6, 800ba5e <__multadd+0x7e>
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	42ab      	cmp	r3, r5
 800ba1e:	dc19      	bgt.n	800ba54 <__multadd+0x74>
 800ba20:	6861      	ldr	r1, [r4, #4]
 800ba22:	4638      	mov	r0, r7
 800ba24:	3101      	adds	r1, #1
 800ba26:	f7ff ff79 	bl	800b91c <_Balloc>
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	b928      	cbnz	r0, 800ba3a <__multadd+0x5a>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <__multadd+0x84>)
 800ba32:	480d      	ldr	r0, [pc, #52]	; (800ba68 <__multadd+0x88>)
 800ba34:	21ba      	movs	r1, #186	; 0xba
 800ba36:	f000 fd1d 	bl	800c474 <__assert_func>
 800ba3a:	6922      	ldr	r2, [r4, #16]
 800ba3c:	3202      	adds	r2, #2
 800ba3e:	f104 010c 	add.w	r1, r4, #12
 800ba42:	0092      	lsls	r2, r2, #2
 800ba44:	300c      	adds	r0, #12
 800ba46:	f7fe ffde 	bl	800aa06 <memcpy>
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ffa5 	bl	800b99c <_Bfree>
 800ba52:	4644      	mov	r4, r8
 800ba54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba58:	3501      	adds	r5, #1
 800ba5a:	615e      	str	r6, [r3, #20]
 800ba5c:	6125      	str	r5, [r4, #16]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba64:	0800e0fc 	.word	0x0800e0fc
 800ba68:	0800e10d 	.word	0x0800e10d

0800ba6c <__hi0bits>:
 800ba6c:	0c03      	lsrs	r3, r0, #16
 800ba6e:	041b      	lsls	r3, r3, #16
 800ba70:	b9d3      	cbnz	r3, 800baa8 <__hi0bits+0x3c>
 800ba72:	0400      	lsls	r0, r0, #16
 800ba74:	2310      	movs	r3, #16
 800ba76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba7a:	bf04      	itt	eq
 800ba7c:	0200      	lsleq	r0, r0, #8
 800ba7e:	3308      	addeq	r3, #8
 800ba80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba84:	bf04      	itt	eq
 800ba86:	0100      	lsleq	r0, r0, #4
 800ba88:	3304      	addeq	r3, #4
 800ba8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba8e:	bf04      	itt	eq
 800ba90:	0080      	lsleq	r0, r0, #2
 800ba92:	3302      	addeq	r3, #2
 800ba94:	2800      	cmp	r0, #0
 800ba96:	db05      	blt.n	800baa4 <__hi0bits+0x38>
 800ba98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba9c:	f103 0301 	add.w	r3, r3, #1
 800baa0:	bf08      	it	eq
 800baa2:	2320      	moveq	r3, #32
 800baa4:	4618      	mov	r0, r3
 800baa6:	4770      	bx	lr
 800baa8:	2300      	movs	r3, #0
 800baaa:	e7e4      	b.n	800ba76 <__hi0bits+0xa>

0800baac <__lo0bits>:
 800baac:	6803      	ldr	r3, [r0, #0]
 800baae:	f013 0207 	ands.w	r2, r3, #7
 800bab2:	d00c      	beq.n	800bace <__lo0bits+0x22>
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d422      	bmi.n	800bafe <__lo0bits+0x52>
 800bab8:	079a      	lsls	r2, r3, #30
 800baba:	bf49      	itett	mi
 800babc:	085b      	lsrmi	r3, r3, #1
 800babe:	089b      	lsrpl	r3, r3, #2
 800bac0:	6003      	strmi	r3, [r0, #0]
 800bac2:	2201      	movmi	r2, #1
 800bac4:	bf5c      	itt	pl
 800bac6:	6003      	strpl	r3, [r0, #0]
 800bac8:	2202      	movpl	r2, #2
 800baca:	4610      	mov	r0, r2
 800bacc:	4770      	bx	lr
 800bace:	b299      	uxth	r1, r3
 800bad0:	b909      	cbnz	r1, 800bad6 <__lo0bits+0x2a>
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	2210      	movs	r2, #16
 800bad6:	b2d9      	uxtb	r1, r3
 800bad8:	b909      	cbnz	r1, 800bade <__lo0bits+0x32>
 800bada:	3208      	adds	r2, #8
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	0719      	lsls	r1, r3, #28
 800bae0:	bf04      	itt	eq
 800bae2:	091b      	lsreq	r3, r3, #4
 800bae4:	3204      	addeq	r2, #4
 800bae6:	0799      	lsls	r1, r3, #30
 800bae8:	bf04      	itt	eq
 800baea:	089b      	lsreq	r3, r3, #2
 800baec:	3202      	addeq	r2, #2
 800baee:	07d9      	lsls	r1, r3, #31
 800baf0:	d403      	bmi.n	800bafa <__lo0bits+0x4e>
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	f102 0201 	add.w	r2, r2, #1
 800baf8:	d003      	beq.n	800bb02 <__lo0bits+0x56>
 800bafa:	6003      	str	r3, [r0, #0]
 800bafc:	e7e5      	b.n	800baca <__lo0bits+0x1e>
 800bafe:	2200      	movs	r2, #0
 800bb00:	e7e3      	b.n	800baca <__lo0bits+0x1e>
 800bb02:	2220      	movs	r2, #32
 800bb04:	e7e1      	b.n	800baca <__lo0bits+0x1e>
	...

0800bb08 <__i2b>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	f7ff ff05 	bl	800b91c <_Balloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	b928      	cbnz	r0, 800bb22 <__i2b+0x1a>
 800bb16:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <__i2b+0x24>)
 800bb18:	4805      	ldr	r0, [pc, #20]	; (800bb30 <__i2b+0x28>)
 800bb1a:	f240 1145 	movw	r1, #325	; 0x145
 800bb1e:	f000 fca9 	bl	800c474 <__assert_func>
 800bb22:	2301      	movs	r3, #1
 800bb24:	6144      	str	r4, [r0, #20]
 800bb26:	6103      	str	r3, [r0, #16]
 800bb28:	bd10      	pop	{r4, pc}
 800bb2a:	bf00      	nop
 800bb2c:	0800e0fc 	.word	0x0800e0fc
 800bb30:	0800e10d 	.word	0x0800e10d

0800bb34 <__multiply>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	4691      	mov	r9, r2
 800bb3a:	690a      	ldr	r2, [r1, #16]
 800bb3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	bfb8      	it	lt
 800bb44:	460b      	movlt	r3, r1
 800bb46:	460c      	mov	r4, r1
 800bb48:	bfbc      	itt	lt
 800bb4a:	464c      	movlt	r4, r9
 800bb4c:	4699      	movlt	r9, r3
 800bb4e:	6927      	ldr	r7, [r4, #16]
 800bb50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	6861      	ldr	r1, [r4, #4]
 800bb58:	eb07 060a 	add.w	r6, r7, sl
 800bb5c:	42b3      	cmp	r3, r6
 800bb5e:	b085      	sub	sp, #20
 800bb60:	bfb8      	it	lt
 800bb62:	3101      	addlt	r1, #1
 800bb64:	f7ff feda 	bl	800b91c <_Balloc>
 800bb68:	b930      	cbnz	r0, 800bb78 <__multiply+0x44>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b44      	ldr	r3, [pc, #272]	; (800bc80 <__multiply+0x14c>)
 800bb6e:	4845      	ldr	r0, [pc, #276]	; (800bc84 <__multiply+0x150>)
 800bb70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb74:	f000 fc7e 	bl	800c474 <__assert_func>
 800bb78:	f100 0514 	add.w	r5, r0, #20
 800bb7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb80:	462b      	mov	r3, r5
 800bb82:	2200      	movs	r2, #0
 800bb84:	4543      	cmp	r3, r8
 800bb86:	d321      	bcc.n	800bbcc <__multiply+0x98>
 800bb88:	f104 0314 	add.w	r3, r4, #20
 800bb8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb90:	f109 0314 	add.w	r3, r9, #20
 800bb94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb98:	9202      	str	r2, [sp, #8]
 800bb9a:	1b3a      	subs	r2, r7, r4
 800bb9c:	3a15      	subs	r2, #21
 800bb9e:	f022 0203 	bic.w	r2, r2, #3
 800bba2:	3204      	adds	r2, #4
 800bba4:	f104 0115 	add.w	r1, r4, #21
 800bba8:	428f      	cmp	r7, r1
 800bbaa:	bf38      	it	cc
 800bbac:	2204      	movcc	r2, #4
 800bbae:	9201      	str	r2, [sp, #4]
 800bbb0:	9a02      	ldr	r2, [sp, #8]
 800bbb2:	9303      	str	r3, [sp, #12]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d80c      	bhi.n	800bbd2 <__multiply+0x9e>
 800bbb8:	2e00      	cmp	r6, #0
 800bbba:	dd03      	ble.n	800bbc4 <__multiply+0x90>
 800bbbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d05b      	beq.n	800bc7c <__multiply+0x148>
 800bbc4:	6106      	str	r6, [r0, #16]
 800bbc6:	b005      	add	sp, #20
 800bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbcc:	f843 2b04 	str.w	r2, [r3], #4
 800bbd0:	e7d8      	b.n	800bb84 <__multiply+0x50>
 800bbd2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbd6:	f1ba 0f00 	cmp.w	sl, #0
 800bbda:	d024      	beq.n	800bc26 <__multiply+0xf2>
 800bbdc:	f104 0e14 	add.w	lr, r4, #20
 800bbe0:	46a9      	mov	r9, r5
 800bbe2:	f04f 0c00 	mov.w	ip, #0
 800bbe6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbea:	f8d9 1000 	ldr.w	r1, [r9]
 800bbee:	fa1f fb82 	uxth.w	fp, r2
 800bbf2:	b289      	uxth	r1, r1
 800bbf4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bbfc:	f8d9 2000 	ldr.w	r2, [r9]
 800bc00:	4461      	add	r1, ip
 800bc02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc06:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc0e:	b289      	uxth	r1, r1
 800bc10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc14:	4577      	cmp	r7, lr
 800bc16:	f849 1b04 	str.w	r1, [r9], #4
 800bc1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc1e:	d8e2      	bhi.n	800bbe6 <__multiply+0xb2>
 800bc20:	9a01      	ldr	r2, [sp, #4]
 800bc22:	f845 c002 	str.w	ip, [r5, r2]
 800bc26:	9a03      	ldr	r2, [sp, #12]
 800bc28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	f1b9 0f00 	cmp.w	r9, #0
 800bc32:	d021      	beq.n	800bc78 <__multiply+0x144>
 800bc34:	6829      	ldr	r1, [r5, #0]
 800bc36:	f104 0c14 	add.w	ip, r4, #20
 800bc3a:	46ae      	mov	lr, r5
 800bc3c:	f04f 0a00 	mov.w	sl, #0
 800bc40:	f8bc b000 	ldrh.w	fp, [ip]
 800bc44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc48:	fb09 220b 	mla	r2, r9, fp, r2
 800bc4c:	4452      	add	r2, sl
 800bc4e:	b289      	uxth	r1, r1
 800bc50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc54:	f84e 1b04 	str.w	r1, [lr], #4
 800bc58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc60:	f8be 1000 	ldrh.w	r1, [lr]
 800bc64:	fb09 110a 	mla	r1, r9, sl, r1
 800bc68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc6c:	4567      	cmp	r7, ip
 800bc6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc72:	d8e5      	bhi.n	800bc40 <__multiply+0x10c>
 800bc74:	9a01      	ldr	r2, [sp, #4]
 800bc76:	50a9      	str	r1, [r5, r2]
 800bc78:	3504      	adds	r5, #4
 800bc7a:	e799      	b.n	800bbb0 <__multiply+0x7c>
 800bc7c:	3e01      	subs	r6, #1
 800bc7e:	e79b      	b.n	800bbb8 <__multiply+0x84>
 800bc80:	0800e0fc 	.word	0x0800e0fc
 800bc84:	0800e10d 	.word	0x0800e10d

0800bc88 <__pow5mult>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	4615      	mov	r5, r2
 800bc8e:	f012 0203 	ands.w	r2, r2, #3
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	d007      	beq.n	800bca8 <__pow5mult+0x20>
 800bc98:	4c25      	ldr	r4, [pc, #148]	; (800bd30 <__pow5mult+0xa8>)
 800bc9a:	3a01      	subs	r2, #1
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bca2:	f7ff fe9d 	bl	800b9e0 <__multadd>
 800bca6:	4607      	mov	r7, r0
 800bca8:	10ad      	asrs	r5, r5, #2
 800bcaa:	d03d      	beq.n	800bd28 <__pow5mult+0xa0>
 800bcac:	69f4      	ldr	r4, [r6, #28]
 800bcae:	b97c      	cbnz	r4, 800bcd0 <__pow5mult+0x48>
 800bcb0:	2010      	movs	r0, #16
 800bcb2:	f7ff fd7f 	bl	800b7b4 <malloc>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	61f0      	str	r0, [r6, #28]
 800bcba:	b928      	cbnz	r0, 800bcc8 <__pow5mult+0x40>
 800bcbc:	4b1d      	ldr	r3, [pc, #116]	; (800bd34 <__pow5mult+0xac>)
 800bcbe:	481e      	ldr	r0, [pc, #120]	; (800bd38 <__pow5mult+0xb0>)
 800bcc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcc4:	f000 fbd6 	bl	800c474 <__assert_func>
 800bcc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bccc:	6004      	str	r4, [r0, #0]
 800bcce:	60c4      	str	r4, [r0, #12]
 800bcd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bcd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcd8:	b94c      	cbnz	r4, 800bcee <__pow5mult+0x66>
 800bcda:	f240 2171 	movw	r1, #625	; 0x271
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7ff ff12 	bl	800bb08 <__i2b>
 800bce4:	2300      	movs	r3, #0
 800bce6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcea:	4604      	mov	r4, r0
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	f04f 0900 	mov.w	r9, #0
 800bcf2:	07eb      	lsls	r3, r5, #31
 800bcf4:	d50a      	bpl.n	800bd0c <__pow5mult+0x84>
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ff1a 	bl	800bb34 <__multiply>
 800bd00:	4639      	mov	r1, r7
 800bd02:	4680      	mov	r8, r0
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fe49 	bl	800b99c <_Bfree>
 800bd0a:	4647      	mov	r7, r8
 800bd0c:	106d      	asrs	r5, r5, #1
 800bd0e:	d00b      	beq.n	800bd28 <__pow5mult+0xa0>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	b938      	cbnz	r0, 800bd24 <__pow5mult+0x9c>
 800bd14:	4622      	mov	r2, r4
 800bd16:	4621      	mov	r1, r4
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f7ff ff0b 	bl	800bb34 <__multiply>
 800bd1e:	6020      	str	r0, [r4, #0]
 800bd20:	f8c0 9000 	str.w	r9, [r0]
 800bd24:	4604      	mov	r4, r0
 800bd26:	e7e4      	b.n	800bcf2 <__pow5mult+0x6a>
 800bd28:	4638      	mov	r0, r7
 800bd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2e:	bf00      	nop
 800bd30:	0800e258 	.word	0x0800e258
 800bd34:	0800e08d 	.word	0x0800e08d
 800bd38:	0800e10d 	.word	0x0800e10d

0800bd3c <__lshift>:
 800bd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd40:	460c      	mov	r4, r1
 800bd42:	6849      	ldr	r1, [r1, #4]
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	4691      	mov	r9, r2
 800bd50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd54:	f108 0601 	add.w	r6, r8, #1
 800bd58:	42b3      	cmp	r3, r6
 800bd5a:	db0b      	blt.n	800bd74 <__lshift+0x38>
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7ff fddd 	bl	800b91c <_Balloc>
 800bd62:	4605      	mov	r5, r0
 800bd64:	b948      	cbnz	r0, 800bd7a <__lshift+0x3e>
 800bd66:	4602      	mov	r2, r0
 800bd68:	4b28      	ldr	r3, [pc, #160]	; (800be0c <__lshift+0xd0>)
 800bd6a:	4829      	ldr	r0, [pc, #164]	; (800be10 <__lshift+0xd4>)
 800bd6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd70:	f000 fb80 	bl	800c474 <__assert_func>
 800bd74:	3101      	adds	r1, #1
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	e7ee      	b.n	800bd58 <__lshift+0x1c>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f100 0114 	add.w	r1, r0, #20
 800bd80:	f100 0210 	add.w	r2, r0, #16
 800bd84:	4618      	mov	r0, r3
 800bd86:	4553      	cmp	r3, sl
 800bd88:	db33      	blt.n	800bdf2 <__lshift+0xb6>
 800bd8a:	6920      	ldr	r0, [r4, #16]
 800bd8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd90:	f104 0314 	add.w	r3, r4, #20
 800bd94:	f019 091f 	ands.w	r9, r9, #31
 800bd98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bda0:	d02b      	beq.n	800bdfa <__lshift+0xbe>
 800bda2:	f1c9 0e20 	rsb	lr, r9, #32
 800bda6:	468a      	mov	sl, r1
 800bda8:	2200      	movs	r2, #0
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	fa00 f009 	lsl.w	r0, r0, r9
 800bdb0:	4310      	orrs	r0, r2
 800bdb2:	f84a 0b04 	str.w	r0, [sl], #4
 800bdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdba:	459c      	cmp	ip, r3
 800bdbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdc0:	d8f3      	bhi.n	800bdaa <__lshift+0x6e>
 800bdc2:	ebac 0304 	sub.w	r3, ip, r4
 800bdc6:	3b15      	subs	r3, #21
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	3304      	adds	r3, #4
 800bdce:	f104 0015 	add.w	r0, r4, #21
 800bdd2:	4584      	cmp	ip, r0
 800bdd4:	bf38      	it	cc
 800bdd6:	2304      	movcc	r3, #4
 800bdd8:	50ca      	str	r2, [r1, r3]
 800bdda:	b10a      	cbz	r2, 800bde0 <__lshift+0xa4>
 800bddc:	f108 0602 	add.w	r6, r8, #2
 800bde0:	3e01      	subs	r6, #1
 800bde2:	4638      	mov	r0, r7
 800bde4:	612e      	str	r6, [r5, #16]
 800bde6:	4621      	mov	r1, r4
 800bde8:	f7ff fdd8 	bl	800b99c <_Bfree>
 800bdec:	4628      	mov	r0, r5
 800bdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	e7c5      	b.n	800bd86 <__lshift+0x4a>
 800bdfa:	3904      	subs	r1, #4
 800bdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800be00:	f841 2f04 	str.w	r2, [r1, #4]!
 800be04:	459c      	cmp	ip, r3
 800be06:	d8f9      	bhi.n	800bdfc <__lshift+0xc0>
 800be08:	e7ea      	b.n	800bde0 <__lshift+0xa4>
 800be0a:	bf00      	nop
 800be0c:	0800e0fc 	.word	0x0800e0fc
 800be10:	0800e10d 	.word	0x0800e10d

0800be14 <__mcmp>:
 800be14:	b530      	push	{r4, r5, lr}
 800be16:	6902      	ldr	r2, [r0, #16]
 800be18:	690c      	ldr	r4, [r1, #16]
 800be1a:	1b12      	subs	r2, r2, r4
 800be1c:	d10e      	bne.n	800be3c <__mcmp+0x28>
 800be1e:	f100 0314 	add.w	r3, r0, #20
 800be22:	3114      	adds	r1, #20
 800be24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be34:	42a5      	cmp	r5, r4
 800be36:	d003      	beq.n	800be40 <__mcmp+0x2c>
 800be38:	d305      	bcc.n	800be46 <__mcmp+0x32>
 800be3a:	2201      	movs	r2, #1
 800be3c:	4610      	mov	r0, r2
 800be3e:	bd30      	pop	{r4, r5, pc}
 800be40:	4283      	cmp	r3, r0
 800be42:	d3f3      	bcc.n	800be2c <__mcmp+0x18>
 800be44:	e7fa      	b.n	800be3c <__mcmp+0x28>
 800be46:	f04f 32ff 	mov.w	r2, #4294967295
 800be4a:	e7f7      	b.n	800be3c <__mcmp+0x28>

0800be4c <__mdiff>:
 800be4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	460c      	mov	r4, r1
 800be52:	4606      	mov	r6, r0
 800be54:	4611      	mov	r1, r2
 800be56:	4620      	mov	r0, r4
 800be58:	4690      	mov	r8, r2
 800be5a:	f7ff ffdb 	bl	800be14 <__mcmp>
 800be5e:	1e05      	subs	r5, r0, #0
 800be60:	d110      	bne.n	800be84 <__mdiff+0x38>
 800be62:	4629      	mov	r1, r5
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff fd59 	bl	800b91c <_Balloc>
 800be6a:	b930      	cbnz	r0, 800be7a <__mdiff+0x2e>
 800be6c:	4b3a      	ldr	r3, [pc, #232]	; (800bf58 <__mdiff+0x10c>)
 800be6e:	4602      	mov	r2, r0
 800be70:	f240 2137 	movw	r1, #567	; 0x237
 800be74:	4839      	ldr	r0, [pc, #228]	; (800bf5c <__mdiff+0x110>)
 800be76:	f000 fafd 	bl	800c474 <__assert_func>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be84:	bfa4      	itt	ge
 800be86:	4643      	movge	r3, r8
 800be88:	46a0      	movge	r8, r4
 800be8a:	4630      	mov	r0, r6
 800be8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be90:	bfa6      	itte	ge
 800be92:	461c      	movge	r4, r3
 800be94:	2500      	movge	r5, #0
 800be96:	2501      	movlt	r5, #1
 800be98:	f7ff fd40 	bl	800b91c <_Balloc>
 800be9c:	b920      	cbnz	r0, 800bea8 <__mdiff+0x5c>
 800be9e:	4b2e      	ldr	r3, [pc, #184]	; (800bf58 <__mdiff+0x10c>)
 800bea0:	4602      	mov	r2, r0
 800bea2:	f240 2145 	movw	r1, #581	; 0x245
 800bea6:	e7e5      	b.n	800be74 <__mdiff+0x28>
 800bea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800beac:	6926      	ldr	r6, [r4, #16]
 800beae:	60c5      	str	r5, [r0, #12]
 800beb0:	f104 0914 	add.w	r9, r4, #20
 800beb4:	f108 0514 	add.w	r5, r8, #20
 800beb8:	f100 0e14 	add.w	lr, r0, #20
 800bebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bec4:	f108 0210 	add.w	r2, r8, #16
 800bec8:	46f2      	mov	sl, lr
 800beca:	2100      	movs	r1, #0
 800becc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bed4:	fa11 f88b 	uxtah	r8, r1, fp
 800bed8:	b299      	uxth	r1, r3
 800beda:	0c1b      	lsrs	r3, r3, #16
 800bedc:	eba8 0801 	sub.w	r8, r8, r1
 800bee0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bee4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bee8:	fa1f f888 	uxth.w	r8, r8
 800beec:	1419      	asrs	r1, r3, #16
 800beee:	454e      	cmp	r6, r9
 800bef0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bef4:	f84a 3b04 	str.w	r3, [sl], #4
 800bef8:	d8e8      	bhi.n	800becc <__mdiff+0x80>
 800befa:	1b33      	subs	r3, r6, r4
 800befc:	3b15      	subs	r3, #21
 800befe:	f023 0303 	bic.w	r3, r3, #3
 800bf02:	3304      	adds	r3, #4
 800bf04:	3415      	adds	r4, #21
 800bf06:	42a6      	cmp	r6, r4
 800bf08:	bf38      	it	cc
 800bf0a:	2304      	movcc	r3, #4
 800bf0c:	441d      	add	r5, r3
 800bf0e:	4473      	add	r3, lr
 800bf10:	469e      	mov	lr, r3
 800bf12:	462e      	mov	r6, r5
 800bf14:	4566      	cmp	r6, ip
 800bf16:	d30e      	bcc.n	800bf36 <__mdiff+0xea>
 800bf18:	f10c 0203 	add.w	r2, ip, #3
 800bf1c:	1b52      	subs	r2, r2, r5
 800bf1e:	f022 0203 	bic.w	r2, r2, #3
 800bf22:	3d03      	subs	r5, #3
 800bf24:	45ac      	cmp	ip, r5
 800bf26:	bf38      	it	cc
 800bf28:	2200      	movcc	r2, #0
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf30:	b17a      	cbz	r2, 800bf52 <__mdiff+0x106>
 800bf32:	6107      	str	r7, [r0, #16]
 800bf34:	e7a4      	b.n	800be80 <__mdiff+0x34>
 800bf36:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf3a:	fa11 f288 	uxtah	r2, r1, r8
 800bf3e:	1414      	asrs	r4, r2, #16
 800bf40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf44:	b292      	uxth	r2, r2
 800bf46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf4a:	f84e 2b04 	str.w	r2, [lr], #4
 800bf4e:	1421      	asrs	r1, r4, #16
 800bf50:	e7e0      	b.n	800bf14 <__mdiff+0xc8>
 800bf52:	3f01      	subs	r7, #1
 800bf54:	e7ea      	b.n	800bf2c <__mdiff+0xe0>
 800bf56:	bf00      	nop
 800bf58:	0800e0fc 	.word	0x0800e0fc
 800bf5c:	0800e10d 	.word	0x0800e10d

0800bf60 <__d2b>:
 800bf60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	460f      	mov	r7, r1
 800bf66:	2101      	movs	r1, #1
 800bf68:	ec59 8b10 	vmov	r8, r9, d0
 800bf6c:	4616      	mov	r6, r2
 800bf6e:	f7ff fcd5 	bl	800b91c <_Balloc>
 800bf72:	4604      	mov	r4, r0
 800bf74:	b930      	cbnz	r0, 800bf84 <__d2b+0x24>
 800bf76:	4602      	mov	r2, r0
 800bf78:	4b24      	ldr	r3, [pc, #144]	; (800c00c <__d2b+0xac>)
 800bf7a:	4825      	ldr	r0, [pc, #148]	; (800c010 <__d2b+0xb0>)
 800bf7c:	f240 310f 	movw	r1, #783	; 0x30f
 800bf80:	f000 fa78 	bl	800c474 <__assert_func>
 800bf84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf8c:	bb2d      	cbnz	r5, 800bfda <__d2b+0x7a>
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	f1b8 0300 	subs.w	r3, r8, #0
 800bf94:	d026      	beq.n	800bfe4 <__d2b+0x84>
 800bf96:	4668      	mov	r0, sp
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	f7ff fd87 	bl	800baac <__lo0bits>
 800bf9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfa2:	b1e8      	cbz	r0, 800bfe0 <__d2b+0x80>
 800bfa4:	f1c0 0320 	rsb	r3, r0, #32
 800bfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfac:	430b      	orrs	r3, r1
 800bfae:	40c2      	lsrs	r2, r0
 800bfb0:	6163      	str	r3, [r4, #20]
 800bfb2:	9201      	str	r2, [sp, #4]
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	61a3      	str	r3, [r4, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	bf14      	ite	ne
 800bfbc:	2202      	movne	r2, #2
 800bfbe:	2201      	moveq	r2, #1
 800bfc0:	6122      	str	r2, [r4, #16]
 800bfc2:	b1bd      	cbz	r5, 800bff4 <__d2b+0x94>
 800bfc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bfc8:	4405      	add	r5, r0
 800bfca:	603d      	str	r5, [r7, #0]
 800bfcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfd0:	6030      	str	r0, [r6, #0]
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	b003      	add	sp, #12
 800bfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfde:	e7d6      	b.n	800bf8e <__d2b+0x2e>
 800bfe0:	6161      	str	r1, [r4, #20]
 800bfe2:	e7e7      	b.n	800bfb4 <__d2b+0x54>
 800bfe4:	a801      	add	r0, sp, #4
 800bfe6:	f7ff fd61 	bl	800baac <__lo0bits>
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	6163      	str	r3, [r4, #20]
 800bfee:	3020      	adds	r0, #32
 800bff0:	2201      	movs	r2, #1
 800bff2:	e7e5      	b.n	800bfc0 <__d2b+0x60>
 800bff4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bff8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bffc:	6038      	str	r0, [r7, #0]
 800bffe:	6918      	ldr	r0, [r3, #16]
 800c000:	f7ff fd34 	bl	800ba6c <__hi0bits>
 800c004:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c008:	e7e2      	b.n	800bfd0 <__d2b+0x70>
 800c00a:	bf00      	nop
 800c00c:	0800e0fc 	.word	0x0800e0fc
 800c010:	0800e10d 	.word	0x0800e10d

0800c014 <__ssputs_r>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	688e      	ldr	r6, [r1, #8]
 800c01a:	461f      	mov	r7, r3
 800c01c:	42be      	cmp	r6, r7
 800c01e:	680b      	ldr	r3, [r1, #0]
 800c020:	4682      	mov	sl, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4690      	mov	r8, r2
 800c026:	d82c      	bhi.n	800c082 <__ssputs_r+0x6e>
 800c028:	898a      	ldrh	r2, [r1, #12]
 800c02a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02e:	d026      	beq.n	800c07e <__ssputs_r+0x6a>
 800c030:	6965      	ldr	r5, [r4, #20]
 800c032:	6909      	ldr	r1, [r1, #16]
 800c034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c038:	eba3 0901 	sub.w	r9, r3, r1
 800c03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c040:	1c7b      	adds	r3, r7, #1
 800c042:	444b      	add	r3, r9
 800c044:	106d      	asrs	r5, r5, #1
 800c046:	429d      	cmp	r5, r3
 800c048:	bf38      	it	cc
 800c04a:	461d      	movcc	r5, r3
 800c04c:	0553      	lsls	r3, r2, #21
 800c04e:	d527      	bpl.n	800c0a0 <__ssputs_r+0x8c>
 800c050:	4629      	mov	r1, r5
 800c052:	f7ff fbd7 	bl	800b804 <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b360      	cbz	r0, 800c0b4 <__ssputs_r+0xa0>
 800c05a:	6921      	ldr	r1, [r4, #16]
 800c05c:	464a      	mov	r2, r9
 800c05e:	f7fe fcd2 	bl	800aa06 <memcpy>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	6126      	str	r6, [r4, #16]
 800c070:	6165      	str	r5, [r4, #20]
 800c072:	444e      	add	r6, r9
 800c074:	eba5 0509 	sub.w	r5, r5, r9
 800c078:	6026      	str	r6, [r4, #0]
 800c07a:	60a5      	str	r5, [r4, #8]
 800c07c:	463e      	mov	r6, r7
 800c07e:	42be      	cmp	r6, r7
 800c080:	d900      	bls.n	800c084 <__ssputs_r+0x70>
 800c082:	463e      	mov	r6, r7
 800c084:	6820      	ldr	r0, [r4, #0]
 800c086:	4632      	mov	r2, r6
 800c088:	4641      	mov	r1, r8
 800c08a:	f000 f9c9 	bl	800c420 <memmove>
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	1b9b      	subs	r3, r3, r6
 800c092:	60a3      	str	r3, [r4, #8]
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	4433      	add	r3, r6
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	2000      	movs	r0, #0
 800c09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a0:	462a      	mov	r2, r5
 800c0a2:	f000 fa2d 	bl	800c500 <_realloc_r>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1e0      	bne.n	800c06e <__ssputs_r+0x5a>
 800c0ac:	6921      	ldr	r1, [r4, #16]
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	f7ff fb34 	bl	800b71c <_free_r>
 800c0b4:	230c      	movs	r3, #12
 800c0b6:	f8ca 3000 	str.w	r3, [sl]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c6:	e7e9      	b.n	800c09c <__ssputs_r+0x88>

0800c0c8 <_svfiprintf_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4698      	mov	r8, r3
 800c0ce:	898b      	ldrh	r3, [r1, #12]
 800c0d0:	061b      	lsls	r3, r3, #24
 800c0d2:	b09d      	sub	sp, #116	; 0x74
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	d50e      	bpl.n	800c0fa <_svfiprintf_r+0x32>
 800c0dc:	690b      	ldr	r3, [r1, #16]
 800c0de:	b963      	cbnz	r3, 800c0fa <_svfiprintf_r+0x32>
 800c0e0:	2140      	movs	r1, #64	; 0x40
 800c0e2:	f7ff fb8f 	bl	800b804 <_malloc_r>
 800c0e6:	6028      	str	r0, [r5, #0]
 800c0e8:	6128      	str	r0, [r5, #16]
 800c0ea:	b920      	cbnz	r0, 800c0f6 <_svfiprintf_r+0x2e>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e0d0      	b.n	800c298 <_svfiprintf_r+0x1d0>
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	616b      	str	r3, [r5, #20]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fe:	2320      	movs	r3, #32
 800c100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c104:	f8cd 800c 	str.w	r8, [sp, #12]
 800c108:	2330      	movs	r3, #48	; 0x30
 800c10a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2b0 <_svfiprintf_r+0x1e8>
 800c10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c112:	f04f 0901 	mov.w	r9, #1
 800c116:	4623      	mov	r3, r4
 800c118:	469a      	mov	sl, r3
 800c11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c11e:	b10a      	cbz	r2, 800c124 <_svfiprintf_r+0x5c>
 800c120:	2a25      	cmp	r2, #37	; 0x25
 800c122:	d1f9      	bne.n	800c118 <_svfiprintf_r+0x50>
 800c124:	ebba 0b04 	subs.w	fp, sl, r4
 800c128:	d00b      	beq.n	800c142 <_svfiprintf_r+0x7a>
 800c12a:	465b      	mov	r3, fp
 800c12c:	4622      	mov	r2, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff ff6f 	bl	800c014 <__ssputs_r>
 800c136:	3001      	adds	r0, #1
 800c138:	f000 80a9 	beq.w	800c28e <_svfiprintf_r+0x1c6>
 800c13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c13e:	445a      	add	r2, fp
 800c140:	9209      	str	r2, [sp, #36]	; 0x24
 800c142:	f89a 3000 	ldrb.w	r3, [sl]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80a1 	beq.w	800c28e <_svfiprintf_r+0x1c6>
 800c14c:	2300      	movs	r3, #0
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c156:	f10a 0a01 	add.w	sl, sl, #1
 800c15a:	9304      	str	r3, [sp, #16]
 800c15c:	9307      	str	r3, [sp, #28]
 800c15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c162:	931a      	str	r3, [sp, #104]	; 0x68
 800c164:	4654      	mov	r4, sl
 800c166:	2205      	movs	r2, #5
 800c168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16c:	4850      	ldr	r0, [pc, #320]	; (800c2b0 <_svfiprintf_r+0x1e8>)
 800c16e:	f7f4 f837 	bl	80001e0 <memchr>
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	b9d8      	cbnz	r0, 800c1ae <_svfiprintf_r+0xe6>
 800c176:	06d0      	lsls	r0, r2, #27
 800c178:	bf44      	itt	mi
 800c17a:	2320      	movmi	r3, #32
 800c17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c180:	0711      	lsls	r1, r2, #28
 800c182:	bf44      	itt	mi
 800c184:	232b      	movmi	r3, #43	; 0x2b
 800c186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18a:	f89a 3000 	ldrb.w	r3, [sl]
 800c18e:	2b2a      	cmp	r3, #42	; 0x2a
 800c190:	d015      	beq.n	800c1be <_svfiprintf_r+0xf6>
 800c192:	9a07      	ldr	r2, [sp, #28]
 800c194:	4654      	mov	r4, sl
 800c196:	2000      	movs	r0, #0
 800c198:	f04f 0c0a 	mov.w	ip, #10
 800c19c:	4621      	mov	r1, r4
 800c19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a2:	3b30      	subs	r3, #48	; 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d94d      	bls.n	800c244 <_svfiprintf_r+0x17c>
 800c1a8:	b1b0      	cbz	r0, 800c1d8 <_svfiprintf_r+0x110>
 800c1aa:	9207      	str	r2, [sp, #28]
 800c1ac:	e014      	b.n	800c1d8 <_svfiprintf_r+0x110>
 800c1ae:	eba0 0308 	sub.w	r3, r0, r8
 800c1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	46a2      	mov	sl, r4
 800c1bc:	e7d2      	b.n	800c164 <_svfiprintf_r+0x9c>
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	9103      	str	r1, [sp, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfbb      	ittet	lt
 800c1ca:	425b      	neglt	r3, r3
 800c1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d0:	9307      	strge	r3, [sp, #28]
 800c1d2:	9307      	strlt	r3, [sp, #28]
 800c1d4:	bfb8      	it	lt
 800c1d6:	9204      	strlt	r2, [sp, #16]
 800c1d8:	7823      	ldrb	r3, [r4, #0]
 800c1da:	2b2e      	cmp	r3, #46	; 0x2e
 800c1dc:	d10c      	bne.n	800c1f8 <_svfiprintf_r+0x130>
 800c1de:	7863      	ldrb	r3, [r4, #1]
 800c1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e2:	d134      	bne.n	800c24e <_svfiprintf_r+0x186>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9203      	str	r2, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfb8      	it	lt
 800c1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f4:	3402      	adds	r4, #2
 800c1f6:	9305      	str	r3, [sp, #20]
 800c1f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2c0 <_svfiprintf_r+0x1f8>
 800c1fc:	7821      	ldrb	r1, [r4, #0]
 800c1fe:	2203      	movs	r2, #3
 800c200:	4650      	mov	r0, sl
 800c202:	f7f3 ffed 	bl	80001e0 <memchr>
 800c206:	b138      	cbz	r0, 800c218 <_svfiprintf_r+0x150>
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	eba0 000a 	sub.w	r0, r0, sl
 800c20e:	2240      	movs	r2, #64	; 0x40
 800c210:	4082      	lsls	r2, r0
 800c212:	4313      	orrs	r3, r2
 800c214:	3401      	adds	r4, #1
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21c:	4825      	ldr	r0, [pc, #148]	; (800c2b4 <_svfiprintf_r+0x1ec>)
 800c21e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c222:	2206      	movs	r2, #6
 800c224:	f7f3 ffdc 	bl	80001e0 <memchr>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d038      	beq.n	800c29e <_svfiprintf_r+0x1d6>
 800c22c:	4b22      	ldr	r3, [pc, #136]	; (800c2b8 <_svfiprintf_r+0x1f0>)
 800c22e:	bb1b      	cbnz	r3, 800c278 <_svfiprintf_r+0x1b0>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	3307      	adds	r3, #7
 800c234:	f023 0307 	bic.w	r3, r3, #7
 800c238:	3308      	adds	r3, #8
 800c23a:	9303      	str	r3, [sp, #12]
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	4433      	add	r3, r6
 800c240:	9309      	str	r3, [sp, #36]	; 0x24
 800c242:	e768      	b.n	800c116 <_svfiprintf_r+0x4e>
 800c244:	fb0c 3202 	mla	r2, ip, r2, r3
 800c248:	460c      	mov	r4, r1
 800c24a:	2001      	movs	r0, #1
 800c24c:	e7a6      	b.n	800c19c <_svfiprintf_r+0xd4>
 800c24e:	2300      	movs	r3, #0
 800c250:	3401      	adds	r4, #1
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	4619      	mov	r1, r3
 800c256:	f04f 0c0a 	mov.w	ip, #10
 800c25a:	4620      	mov	r0, r4
 800c25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c260:	3a30      	subs	r2, #48	; 0x30
 800c262:	2a09      	cmp	r2, #9
 800c264:	d903      	bls.n	800c26e <_svfiprintf_r+0x1a6>
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0c6      	beq.n	800c1f8 <_svfiprintf_r+0x130>
 800c26a:	9105      	str	r1, [sp, #20]
 800c26c:	e7c4      	b.n	800c1f8 <_svfiprintf_r+0x130>
 800c26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c272:	4604      	mov	r4, r0
 800c274:	2301      	movs	r3, #1
 800c276:	e7f0      	b.n	800c25a <_svfiprintf_r+0x192>
 800c278:	ab03      	add	r3, sp, #12
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	462a      	mov	r2, r5
 800c27e:	4b0f      	ldr	r3, [pc, #60]	; (800c2bc <_svfiprintf_r+0x1f4>)
 800c280:	a904      	add	r1, sp, #16
 800c282:	4638      	mov	r0, r7
 800c284:	f7fd fdea 	bl	8009e5c <_printf_float>
 800c288:	1c42      	adds	r2, r0, #1
 800c28a:	4606      	mov	r6, r0
 800c28c:	d1d6      	bne.n	800c23c <_svfiprintf_r+0x174>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	065b      	lsls	r3, r3, #25
 800c292:	f53f af2d 	bmi.w	800c0f0 <_svfiprintf_r+0x28>
 800c296:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c298:	b01d      	add	sp, #116	; 0x74
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	ab03      	add	r3, sp, #12
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	4b05      	ldr	r3, [pc, #20]	; (800c2bc <_svfiprintf_r+0x1f4>)
 800c2a6:	a904      	add	r1, sp, #16
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7fe f87b 	bl	800a3a4 <_printf_i>
 800c2ae:	e7eb      	b.n	800c288 <_svfiprintf_r+0x1c0>
 800c2b0:	0800e264 	.word	0x0800e264
 800c2b4:	0800e26e 	.word	0x0800e26e
 800c2b8:	08009e5d 	.word	0x08009e5d
 800c2bc:	0800c015 	.word	0x0800c015
 800c2c0:	0800e26a 	.word	0x0800e26a

0800c2c4 <__sflush_r>:
 800c2c4:	898a      	ldrh	r2, [r1, #12]
 800c2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	0710      	lsls	r0, r2, #28
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	d458      	bmi.n	800c384 <__sflush_r+0xc0>
 800c2d2:	684b      	ldr	r3, [r1, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dc05      	bgt.n	800c2e4 <__sflush_r+0x20>
 800c2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dc02      	bgt.n	800c2e4 <__sflush_r+0x20>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2e6:	2e00      	cmp	r6, #0
 800c2e8:	d0f9      	beq.n	800c2de <__sflush_r+0x1a>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2f0:	682f      	ldr	r7, [r5, #0]
 800c2f2:	6a21      	ldr	r1, [r4, #32]
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	d032      	beq.n	800c35e <__sflush_r+0x9a>
 800c2f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	075a      	lsls	r2, r3, #29
 800c2fe:	d505      	bpl.n	800c30c <__sflush_r+0x48>
 800c300:	6863      	ldr	r3, [r4, #4]
 800c302:	1ac0      	subs	r0, r0, r3
 800c304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c306:	b10b      	cbz	r3, 800c30c <__sflush_r+0x48>
 800c308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c30a:	1ac0      	subs	r0, r0, r3
 800c30c:	2300      	movs	r3, #0
 800c30e:	4602      	mov	r2, r0
 800c310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c312:	6a21      	ldr	r1, [r4, #32]
 800c314:	4628      	mov	r0, r5
 800c316:	47b0      	blx	r6
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	d106      	bne.n	800c32c <__sflush_r+0x68>
 800c31e:	6829      	ldr	r1, [r5, #0]
 800c320:	291d      	cmp	r1, #29
 800c322:	d82b      	bhi.n	800c37c <__sflush_r+0xb8>
 800c324:	4a29      	ldr	r2, [pc, #164]	; (800c3cc <__sflush_r+0x108>)
 800c326:	410a      	asrs	r2, r1
 800c328:	07d6      	lsls	r6, r2, #31
 800c32a:	d427      	bmi.n	800c37c <__sflush_r+0xb8>
 800c32c:	2200      	movs	r2, #0
 800c32e:	6062      	str	r2, [r4, #4]
 800c330:	04d9      	lsls	r1, r3, #19
 800c332:	6922      	ldr	r2, [r4, #16]
 800c334:	6022      	str	r2, [r4, #0]
 800c336:	d504      	bpl.n	800c342 <__sflush_r+0x7e>
 800c338:	1c42      	adds	r2, r0, #1
 800c33a:	d101      	bne.n	800c340 <__sflush_r+0x7c>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b903      	cbnz	r3, 800c342 <__sflush_r+0x7e>
 800c340:	6560      	str	r0, [r4, #84]	; 0x54
 800c342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c344:	602f      	str	r7, [r5, #0]
 800c346:	2900      	cmp	r1, #0
 800c348:	d0c9      	beq.n	800c2de <__sflush_r+0x1a>
 800c34a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c34e:	4299      	cmp	r1, r3
 800c350:	d002      	beq.n	800c358 <__sflush_r+0x94>
 800c352:	4628      	mov	r0, r5
 800c354:	f7ff f9e2 	bl	800b71c <_free_r>
 800c358:	2000      	movs	r0, #0
 800c35a:	6360      	str	r0, [r4, #52]	; 0x34
 800c35c:	e7c0      	b.n	800c2e0 <__sflush_r+0x1c>
 800c35e:	2301      	movs	r3, #1
 800c360:	4628      	mov	r0, r5
 800c362:	47b0      	blx	r6
 800c364:	1c41      	adds	r1, r0, #1
 800c366:	d1c8      	bne.n	800c2fa <__sflush_r+0x36>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0c5      	beq.n	800c2fa <__sflush_r+0x36>
 800c36e:	2b1d      	cmp	r3, #29
 800c370:	d001      	beq.n	800c376 <__sflush_r+0xb2>
 800c372:	2b16      	cmp	r3, #22
 800c374:	d101      	bne.n	800c37a <__sflush_r+0xb6>
 800c376:	602f      	str	r7, [r5, #0]
 800c378:	e7b1      	b.n	800c2de <__sflush_r+0x1a>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7ad      	b.n	800c2e0 <__sflush_r+0x1c>
 800c384:	690f      	ldr	r7, [r1, #16]
 800c386:	2f00      	cmp	r7, #0
 800c388:	d0a9      	beq.n	800c2de <__sflush_r+0x1a>
 800c38a:	0793      	lsls	r3, r2, #30
 800c38c:	680e      	ldr	r6, [r1, #0]
 800c38e:	bf08      	it	eq
 800c390:	694b      	ldreq	r3, [r1, #20]
 800c392:	600f      	str	r7, [r1, #0]
 800c394:	bf18      	it	ne
 800c396:	2300      	movne	r3, #0
 800c398:	eba6 0807 	sub.w	r8, r6, r7
 800c39c:	608b      	str	r3, [r1, #8]
 800c39e:	f1b8 0f00 	cmp.w	r8, #0
 800c3a2:	dd9c      	ble.n	800c2de <__sflush_r+0x1a>
 800c3a4:	6a21      	ldr	r1, [r4, #32]
 800c3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3a8:	4643      	mov	r3, r8
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b0      	blx	r6
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	dc06      	bgt.n	800c3c2 <__sflush_r+0xfe>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	e78e      	b.n	800c2e0 <__sflush_r+0x1c>
 800c3c2:	4407      	add	r7, r0
 800c3c4:	eba8 0800 	sub.w	r8, r8, r0
 800c3c8:	e7e9      	b.n	800c39e <__sflush_r+0xda>
 800c3ca:	bf00      	nop
 800c3cc:	dfbffffe 	.word	0xdfbffffe

0800c3d0 <_fflush_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	690b      	ldr	r3, [r1, #16]
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	b913      	cbnz	r3, 800c3e0 <_fflush_r+0x10>
 800c3da:	2500      	movs	r5, #0
 800c3dc:	4628      	mov	r0, r5
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	b118      	cbz	r0, 800c3ea <_fflush_r+0x1a>
 800c3e2:	6a03      	ldr	r3, [r0, #32]
 800c3e4:	b90b      	cbnz	r3, 800c3ea <_fflush_r+0x1a>
 800c3e6:	f7fe f98b 	bl	800a700 <__sinit>
 800c3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0f3      	beq.n	800c3da <_fflush_r+0xa>
 800c3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3f4:	07d0      	lsls	r0, r2, #31
 800c3f6:	d404      	bmi.n	800c402 <_fflush_r+0x32>
 800c3f8:	0599      	lsls	r1, r3, #22
 800c3fa:	d402      	bmi.n	800c402 <_fflush_r+0x32>
 800c3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fe:	f7fe fb00 	bl	800aa02 <__retarget_lock_acquire_recursive>
 800c402:	4628      	mov	r0, r5
 800c404:	4621      	mov	r1, r4
 800c406:	f7ff ff5d 	bl	800c2c4 <__sflush_r>
 800c40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c40c:	07da      	lsls	r2, r3, #31
 800c40e:	4605      	mov	r5, r0
 800c410:	d4e4      	bmi.n	800c3dc <_fflush_r+0xc>
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	059b      	lsls	r3, r3, #22
 800c416:	d4e1      	bmi.n	800c3dc <_fflush_r+0xc>
 800c418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c41a:	f7fe faf3 	bl	800aa04 <__retarget_lock_release_recursive>
 800c41e:	e7dd      	b.n	800c3dc <_fflush_r+0xc>

0800c420 <memmove>:
 800c420:	4288      	cmp	r0, r1
 800c422:	b510      	push	{r4, lr}
 800c424:	eb01 0402 	add.w	r4, r1, r2
 800c428:	d902      	bls.n	800c430 <memmove+0x10>
 800c42a:	4284      	cmp	r4, r0
 800c42c:	4623      	mov	r3, r4
 800c42e:	d807      	bhi.n	800c440 <memmove+0x20>
 800c430:	1e43      	subs	r3, r0, #1
 800c432:	42a1      	cmp	r1, r4
 800c434:	d008      	beq.n	800c448 <memmove+0x28>
 800c436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c43a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c43e:	e7f8      	b.n	800c432 <memmove+0x12>
 800c440:	4402      	add	r2, r0
 800c442:	4601      	mov	r1, r0
 800c444:	428a      	cmp	r2, r1
 800c446:	d100      	bne.n	800c44a <memmove+0x2a>
 800c448:	bd10      	pop	{r4, pc}
 800c44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c44e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c452:	e7f7      	b.n	800c444 <memmove+0x24>

0800c454 <_sbrk_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4d06      	ldr	r5, [pc, #24]	; (800c470 <_sbrk_r+0x1c>)
 800c458:	2300      	movs	r3, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	4608      	mov	r0, r1
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	f7f5 fd4c 	bl	8001efc <_sbrk>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_sbrk_r+0x1a>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_sbrk_r+0x1a>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	20005300 	.word	0x20005300

0800c474 <__assert_func>:
 800c474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c476:	4614      	mov	r4, r2
 800c478:	461a      	mov	r2, r3
 800c47a:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <__assert_func+0x2c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4605      	mov	r5, r0
 800c480:	68d8      	ldr	r0, [r3, #12]
 800c482:	b14c      	cbz	r4, 800c498 <__assert_func+0x24>
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <__assert_func+0x30>)
 800c486:	9100      	str	r1, [sp, #0]
 800c488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c48c:	4906      	ldr	r1, [pc, #24]	; (800c4a8 <__assert_func+0x34>)
 800c48e:	462b      	mov	r3, r5
 800c490:	f000 f872 	bl	800c578 <fiprintf>
 800c494:	f000 f882 	bl	800c59c <abort>
 800c498:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <__assert_func+0x38>)
 800c49a:	461c      	mov	r4, r3
 800c49c:	e7f3      	b.n	800c486 <__assert_func+0x12>
 800c49e:	bf00      	nop
 800c4a0:	2000007c 	.word	0x2000007c
 800c4a4:	0800e27f 	.word	0x0800e27f
 800c4a8:	0800e28c 	.word	0x0800e28c
 800c4ac:	0800e2ba 	.word	0x0800e2ba

0800c4b0 <_calloc_r>:
 800c4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4b2:	fba1 2402 	umull	r2, r4, r1, r2
 800c4b6:	b94c      	cbnz	r4, 800c4cc <_calloc_r+0x1c>
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	9201      	str	r2, [sp, #4]
 800c4bc:	f7ff f9a2 	bl	800b804 <_malloc_r>
 800c4c0:	9a01      	ldr	r2, [sp, #4]
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	b930      	cbnz	r0, 800c4d4 <_calloc_r+0x24>
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	b003      	add	sp, #12
 800c4ca:	bd30      	pop	{r4, r5, pc}
 800c4cc:	220c      	movs	r2, #12
 800c4ce:	6002      	str	r2, [r0, #0]
 800c4d0:	2500      	movs	r5, #0
 800c4d2:	e7f8      	b.n	800c4c6 <_calloc_r+0x16>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	f7fe f9c0 	bl	800a85a <memset>
 800c4da:	e7f4      	b.n	800c4c6 <_calloc_r+0x16>

0800c4dc <__ascii_mbtowc>:
 800c4dc:	b082      	sub	sp, #8
 800c4de:	b901      	cbnz	r1, 800c4e2 <__ascii_mbtowc+0x6>
 800c4e0:	a901      	add	r1, sp, #4
 800c4e2:	b142      	cbz	r2, 800c4f6 <__ascii_mbtowc+0x1a>
 800c4e4:	b14b      	cbz	r3, 800c4fa <__ascii_mbtowc+0x1e>
 800c4e6:	7813      	ldrb	r3, [r2, #0]
 800c4e8:	600b      	str	r3, [r1, #0]
 800c4ea:	7812      	ldrb	r2, [r2, #0]
 800c4ec:	1e10      	subs	r0, r2, #0
 800c4ee:	bf18      	it	ne
 800c4f0:	2001      	movne	r0, #1
 800c4f2:	b002      	add	sp, #8
 800c4f4:	4770      	bx	lr
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	e7fb      	b.n	800c4f2 <__ascii_mbtowc+0x16>
 800c4fa:	f06f 0001 	mvn.w	r0, #1
 800c4fe:	e7f8      	b.n	800c4f2 <__ascii_mbtowc+0x16>

0800c500 <_realloc_r>:
 800c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c504:	4680      	mov	r8, r0
 800c506:	4614      	mov	r4, r2
 800c508:	460e      	mov	r6, r1
 800c50a:	b921      	cbnz	r1, 800c516 <_realloc_r+0x16>
 800c50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c510:	4611      	mov	r1, r2
 800c512:	f7ff b977 	b.w	800b804 <_malloc_r>
 800c516:	b92a      	cbnz	r2, 800c524 <_realloc_r+0x24>
 800c518:	f7ff f900 	bl	800b71c <_free_r>
 800c51c:	4625      	mov	r5, r4
 800c51e:	4628      	mov	r0, r5
 800c520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c524:	f000 f841 	bl	800c5aa <_malloc_usable_size_r>
 800c528:	4284      	cmp	r4, r0
 800c52a:	4607      	mov	r7, r0
 800c52c:	d802      	bhi.n	800c534 <_realloc_r+0x34>
 800c52e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c532:	d812      	bhi.n	800c55a <_realloc_r+0x5a>
 800c534:	4621      	mov	r1, r4
 800c536:	4640      	mov	r0, r8
 800c538:	f7ff f964 	bl	800b804 <_malloc_r>
 800c53c:	4605      	mov	r5, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d0ed      	beq.n	800c51e <_realloc_r+0x1e>
 800c542:	42bc      	cmp	r4, r7
 800c544:	4622      	mov	r2, r4
 800c546:	4631      	mov	r1, r6
 800c548:	bf28      	it	cs
 800c54a:	463a      	movcs	r2, r7
 800c54c:	f7fe fa5b 	bl	800aa06 <memcpy>
 800c550:	4631      	mov	r1, r6
 800c552:	4640      	mov	r0, r8
 800c554:	f7ff f8e2 	bl	800b71c <_free_r>
 800c558:	e7e1      	b.n	800c51e <_realloc_r+0x1e>
 800c55a:	4635      	mov	r5, r6
 800c55c:	e7df      	b.n	800c51e <_realloc_r+0x1e>

0800c55e <__ascii_wctomb>:
 800c55e:	b149      	cbz	r1, 800c574 <__ascii_wctomb+0x16>
 800c560:	2aff      	cmp	r2, #255	; 0xff
 800c562:	bf85      	ittet	hi
 800c564:	238a      	movhi	r3, #138	; 0x8a
 800c566:	6003      	strhi	r3, [r0, #0]
 800c568:	700a      	strbls	r2, [r1, #0]
 800c56a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c56e:	bf98      	it	ls
 800c570:	2001      	movls	r0, #1
 800c572:	4770      	bx	lr
 800c574:	4608      	mov	r0, r1
 800c576:	4770      	bx	lr

0800c578 <fiprintf>:
 800c578:	b40e      	push	{r1, r2, r3}
 800c57a:	b503      	push	{r0, r1, lr}
 800c57c:	4601      	mov	r1, r0
 800c57e:	ab03      	add	r3, sp, #12
 800c580:	4805      	ldr	r0, [pc, #20]	; (800c598 <fiprintf+0x20>)
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	6800      	ldr	r0, [r0, #0]
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f000 f83f 	bl	800c60c <_vfiprintf_r>
 800c58e:	b002      	add	sp, #8
 800c590:	f85d eb04 	ldr.w	lr, [sp], #4
 800c594:	b003      	add	sp, #12
 800c596:	4770      	bx	lr
 800c598:	2000007c 	.word	0x2000007c

0800c59c <abort>:
 800c59c:	b508      	push	{r3, lr}
 800c59e:	2006      	movs	r0, #6
 800c5a0:	f000 fa0c 	bl	800c9bc <raise>
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	f7f5 fc32 	bl	8001e0e <_exit>

0800c5aa <_malloc_usable_size_r>:
 800c5aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ae:	1f18      	subs	r0, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	bfbc      	itt	lt
 800c5b4:	580b      	ldrlt	r3, [r1, r0]
 800c5b6:	18c0      	addlt	r0, r0, r3
 800c5b8:	4770      	bx	lr

0800c5ba <__sfputc_r>:
 800c5ba:	6893      	ldr	r3, [r2, #8]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	b410      	push	{r4}
 800c5c2:	6093      	str	r3, [r2, #8]
 800c5c4:	da08      	bge.n	800c5d8 <__sfputc_r+0x1e>
 800c5c6:	6994      	ldr	r4, [r2, #24]
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	db01      	blt.n	800c5d0 <__sfputc_r+0x16>
 800c5cc:	290a      	cmp	r1, #10
 800c5ce:	d103      	bne.n	800c5d8 <__sfputc_r+0x1e>
 800c5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d4:	f000 b934 	b.w	800c840 <__swbuf_r>
 800c5d8:	6813      	ldr	r3, [r2, #0]
 800c5da:	1c58      	adds	r0, r3, #1
 800c5dc:	6010      	str	r0, [r2, #0]
 800c5de:	7019      	strb	r1, [r3, #0]
 800c5e0:	4608      	mov	r0, r1
 800c5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <__sfputs_r>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	18d5      	adds	r5, r2, r3
 800c5f2:	42ac      	cmp	r4, r5
 800c5f4:	d101      	bne.n	800c5fa <__sfputs_r+0x12>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e007      	b.n	800c60a <__sfputs_r+0x22>
 800c5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fe:	463a      	mov	r2, r7
 800c600:	4630      	mov	r0, r6
 800c602:	f7ff ffda 	bl	800c5ba <__sfputc_r>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d1f3      	bne.n	800c5f2 <__sfputs_r+0xa>
 800c60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c60c <_vfiprintf_r>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	460d      	mov	r5, r1
 800c612:	b09d      	sub	sp, #116	; 0x74
 800c614:	4614      	mov	r4, r2
 800c616:	4698      	mov	r8, r3
 800c618:	4606      	mov	r6, r0
 800c61a:	b118      	cbz	r0, 800c624 <_vfiprintf_r+0x18>
 800c61c:	6a03      	ldr	r3, [r0, #32]
 800c61e:	b90b      	cbnz	r3, 800c624 <_vfiprintf_r+0x18>
 800c620:	f7fe f86e 	bl	800a700 <__sinit>
 800c624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c626:	07d9      	lsls	r1, r3, #31
 800c628:	d405      	bmi.n	800c636 <_vfiprintf_r+0x2a>
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	059a      	lsls	r2, r3, #22
 800c62e:	d402      	bmi.n	800c636 <_vfiprintf_r+0x2a>
 800c630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c632:	f7fe f9e6 	bl	800aa02 <__retarget_lock_acquire_recursive>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	071b      	lsls	r3, r3, #28
 800c63a:	d501      	bpl.n	800c640 <_vfiprintf_r+0x34>
 800c63c:	692b      	ldr	r3, [r5, #16]
 800c63e:	b99b      	cbnz	r3, 800c668 <_vfiprintf_r+0x5c>
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f000 f93a 	bl	800c8bc <__swsetup_r>
 800c648:	b170      	cbz	r0, 800c668 <_vfiprintf_r+0x5c>
 800c64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c64c:	07dc      	lsls	r4, r3, #31
 800c64e:	d504      	bpl.n	800c65a <_vfiprintf_r+0x4e>
 800c650:	f04f 30ff 	mov.w	r0, #4294967295
 800c654:	b01d      	add	sp, #116	; 0x74
 800c656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	0598      	lsls	r0, r3, #22
 800c65e:	d4f7      	bmi.n	800c650 <_vfiprintf_r+0x44>
 800c660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c662:	f7fe f9cf 	bl	800aa04 <__retarget_lock_release_recursive>
 800c666:	e7f3      	b.n	800c650 <_vfiprintf_r+0x44>
 800c668:	2300      	movs	r3, #0
 800c66a:	9309      	str	r3, [sp, #36]	; 0x24
 800c66c:	2320      	movs	r3, #32
 800c66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c672:	f8cd 800c 	str.w	r8, [sp, #12]
 800c676:	2330      	movs	r3, #48	; 0x30
 800c678:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c82c <_vfiprintf_r+0x220>
 800c67c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c680:	f04f 0901 	mov.w	r9, #1
 800c684:	4623      	mov	r3, r4
 800c686:	469a      	mov	sl, r3
 800c688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c68c:	b10a      	cbz	r2, 800c692 <_vfiprintf_r+0x86>
 800c68e:	2a25      	cmp	r2, #37	; 0x25
 800c690:	d1f9      	bne.n	800c686 <_vfiprintf_r+0x7a>
 800c692:	ebba 0b04 	subs.w	fp, sl, r4
 800c696:	d00b      	beq.n	800c6b0 <_vfiprintf_r+0xa4>
 800c698:	465b      	mov	r3, fp
 800c69a:	4622      	mov	r2, r4
 800c69c:	4629      	mov	r1, r5
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ffa2 	bl	800c5e8 <__sfputs_r>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	f000 80a9 	beq.w	800c7fc <_vfiprintf_r+0x1f0>
 800c6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ac:	445a      	add	r2, fp
 800c6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 80a1 	beq.w	800c7fc <_vfiprintf_r+0x1f0>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c4:	f10a 0a01 	add.w	sl, sl, #1
 800c6c8:	9304      	str	r3, [sp, #16]
 800c6ca:	9307      	str	r3, [sp, #28]
 800c6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d2:	4654      	mov	r4, sl
 800c6d4:	2205      	movs	r2, #5
 800c6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6da:	4854      	ldr	r0, [pc, #336]	; (800c82c <_vfiprintf_r+0x220>)
 800c6dc:	f7f3 fd80 	bl	80001e0 <memchr>
 800c6e0:	9a04      	ldr	r2, [sp, #16]
 800c6e2:	b9d8      	cbnz	r0, 800c71c <_vfiprintf_r+0x110>
 800c6e4:	06d1      	lsls	r1, r2, #27
 800c6e6:	bf44      	itt	mi
 800c6e8:	2320      	movmi	r3, #32
 800c6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ee:	0713      	lsls	r3, r2, #28
 800c6f0:	bf44      	itt	mi
 800c6f2:	232b      	movmi	r3, #43	; 0x2b
 800c6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fe:	d015      	beq.n	800c72c <_vfiprintf_r+0x120>
 800c700:	9a07      	ldr	r2, [sp, #28]
 800c702:	4654      	mov	r4, sl
 800c704:	2000      	movs	r0, #0
 800c706:	f04f 0c0a 	mov.w	ip, #10
 800c70a:	4621      	mov	r1, r4
 800c70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c710:	3b30      	subs	r3, #48	; 0x30
 800c712:	2b09      	cmp	r3, #9
 800c714:	d94d      	bls.n	800c7b2 <_vfiprintf_r+0x1a6>
 800c716:	b1b0      	cbz	r0, 800c746 <_vfiprintf_r+0x13a>
 800c718:	9207      	str	r2, [sp, #28]
 800c71a:	e014      	b.n	800c746 <_vfiprintf_r+0x13a>
 800c71c:	eba0 0308 	sub.w	r3, r0, r8
 800c720:	fa09 f303 	lsl.w	r3, r9, r3
 800c724:	4313      	orrs	r3, r2
 800c726:	9304      	str	r3, [sp, #16]
 800c728:	46a2      	mov	sl, r4
 800c72a:	e7d2      	b.n	800c6d2 <_vfiprintf_r+0xc6>
 800c72c:	9b03      	ldr	r3, [sp, #12]
 800c72e:	1d19      	adds	r1, r3, #4
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	9103      	str	r1, [sp, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	bfbb      	ittet	lt
 800c738:	425b      	neglt	r3, r3
 800c73a:	f042 0202 	orrlt.w	r2, r2, #2
 800c73e:	9307      	strge	r3, [sp, #28]
 800c740:	9307      	strlt	r3, [sp, #28]
 800c742:	bfb8      	it	lt
 800c744:	9204      	strlt	r2, [sp, #16]
 800c746:	7823      	ldrb	r3, [r4, #0]
 800c748:	2b2e      	cmp	r3, #46	; 0x2e
 800c74a:	d10c      	bne.n	800c766 <_vfiprintf_r+0x15a>
 800c74c:	7863      	ldrb	r3, [r4, #1]
 800c74e:	2b2a      	cmp	r3, #42	; 0x2a
 800c750:	d134      	bne.n	800c7bc <_vfiprintf_r+0x1b0>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	1d1a      	adds	r2, r3, #4
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	9203      	str	r2, [sp, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	bfb8      	it	lt
 800c75e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c762:	3402      	adds	r4, #2
 800c764:	9305      	str	r3, [sp, #20]
 800c766:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c83c <_vfiprintf_r+0x230>
 800c76a:	7821      	ldrb	r1, [r4, #0]
 800c76c:	2203      	movs	r2, #3
 800c76e:	4650      	mov	r0, sl
 800c770:	f7f3 fd36 	bl	80001e0 <memchr>
 800c774:	b138      	cbz	r0, 800c786 <_vfiprintf_r+0x17a>
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	eba0 000a 	sub.w	r0, r0, sl
 800c77c:	2240      	movs	r2, #64	; 0x40
 800c77e:	4082      	lsls	r2, r0
 800c780:	4313      	orrs	r3, r2
 800c782:	3401      	adds	r4, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78a:	4829      	ldr	r0, [pc, #164]	; (800c830 <_vfiprintf_r+0x224>)
 800c78c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c790:	2206      	movs	r2, #6
 800c792:	f7f3 fd25 	bl	80001e0 <memchr>
 800c796:	2800      	cmp	r0, #0
 800c798:	d03f      	beq.n	800c81a <_vfiprintf_r+0x20e>
 800c79a:	4b26      	ldr	r3, [pc, #152]	; (800c834 <_vfiprintf_r+0x228>)
 800c79c:	bb1b      	cbnz	r3, 800c7e6 <_vfiprintf_r+0x1da>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ac:	443b      	add	r3, r7
 800c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b0:	e768      	b.n	800c684 <_vfiprintf_r+0x78>
 800c7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	e7a6      	b.n	800c70a <_vfiprintf_r+0xfe>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f04f 0c0a 	mov.w	ip, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ce:	3a30      	subs	r2, #48	; 0x30
 800c7d0:	2a09      	cmp	r2, #9
 800c7d2:	d903      	bls.n	800c7dc <_vfiprintf_r+0x1d0>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0c6      	beq.n	800c766 <_vfiprintf_r+0x15a>
 800c7d8:	9105      	str	r1, [sp, #20]
 800c7da:	e7c4      	b.n	800c766 <_vfiprintf_r+0x15a>
 800c7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7f0      	b.n	800c7c8 <_vfiprintf_r+0x1bc>
 800c7e6:	ab03      	add	r3, sp, #12
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4b12      	ldr	r3, [pc, #72]	; (800c838 <_vfiprintf_r+0x22c>)
 800c7ee:	a904      	add	r1, sp, #16
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7fd fb33 	bl	8009e5c <_printf_float>
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	1c78      	adds	r0, r7, #1
 800c7fa:	d1d6      	bne.n	800c7aa <_vfiprintf_r+0x19e>
 800c7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7fe:	07d9      	lsls	r1, r3, #31
 800c800:	d405      	bmi.n	800c80e <_vfiprintf_r+0x202>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	059a      	lsls	r2, r3, #22
 800c806:	d402      	bmi.n	800c80e <_vfiprintf_r+0x202>
 800c808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c80a:	f7fe f8fb 	bl	800aa04 <__retarget_lock_release_recursive>
 800c80e:	89ab      	ldrh	r3, [r5, #12]
 800c810:	065b      	lsls	r3, r3, #25
 800c812:	f53f af1d 	bmi.w	800c650 <_vfiprintf_r+0x44>
 800c816:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c818:	e71c      	b.n	800c654 <_vfiprintf_r+0x48>
 800c81a:	ab03      	add	r3, sp, #12
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	462a      	mov	r2, r5
 800c820:	4b05      	ldr	r3, [pc, #20]	; (800c838 <_vfiprintf_r+0x22c>)
 800c822:	a904      	add	r1, sp, #16
 800c824:	4630      	mov	r0, r6
 800c826:	f7fd fdbd 	bl	800a3a4 <_printf_i>
 800c82a:	e7e4      	b.n	800c7f6 <_vfiprintf_r+0x1ea>
 800c82c:	0800e264 	.word	0x0800e264
 800c830:	0800e26e 	.word	0x0800e26e
 800c834:	08009e5d 	.word	0x08009e5d
 800c838:	0800c5e9 	.word	0x0800c5e9
 800c83c:	0800e26a 	.word	0x0800e26a

0800c840 <__swbuf_r>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	460e      	mov	r6, r1
 800c844:	4614      	mov	r4, r2
 800c846:	4605      	mov	r5, r0
 800c848:	b118      	cbz	r0, 800c852 <__swbuf_r+0x12>
 800c84a:	6a03      	ldr	r3, [r0, #32]
 800c84c:	b90b      	cbnz	r3, 800c852 <__swbuf_r+0x12>
 800c84e:	f7fd ff57 	bl	800a700 <__sinit>
 800c852:	69a3      	ldr	r3, [r4, #24]
 800c854:	60a3      	str	r3, [r4, #8]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	071a      	lsls	r2, r3, #28
 800c85a:	d525      	bpl.n	800c8a8 <__swbuf_r+0x68>
 800c85c:	6923      	ldr	r3, [r4, #16]
 800c85e:	b31b      	cbz	r3, 800c8a8 <__swbuf_r+0x68>
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	6922      	ldr	r2, [r4, #16]
 800c864:	1a98      	subs	r0, r3, r2
 800c866:	6963      	ldr	r3, [r4, #20]
 800c868:	b2f6      	uxtb	r6, r6
 800c86a:	4283      	cmp	r3, r0
 800c86c:	4637      	mov	r7, r6
 800c86e:	dc04      	bgt.n	800c87a <__swbuf_r+0x3a>
 800c870:	4621      	mov	r1, r4
 800c872:	4628      	mov	r0, r5
 800c874:	f7ff fdac 	bl	800c3d0 <_fflush_r>
 800c878:	b9e0      	cbnz	r0, 800c8b4 <__swbuf_r+0x74>
 800c87a:	68a3      	ldr	r3, [r4, #8]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	60a3      	str	r3, [r4, #8]
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	6022      	str	r2, [r4, #0]
 800c886:	701e      	strb	r6, [r3, #0]
 800c888:	6962      	ldr	r2, [r4, #20]
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d004      	beq.n	800c89a <__swbuf_r+0x5a>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	07db      	lsls	r3, r3, #31
 800c894:	d506      	bpl.n	800c8a4 <__swbuf_r+0x64>
 800c896:	2e0a      	cmp	r6, #10
 800c898:	d104      	bne.n	800c8a4 <__swbuf_r+0x64>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7ff fd97 	bl	800c3d0 <_fflush_r>
 800c8a2:	b938      	cbnz	r0, 800c8b4 <__swbuf_r+0x74>
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f000 f806 	bl	800c8bc <__swsetup_r>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d0d5      	beq.n	800c860 <__swbuf_r+0x20>
 800c8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800c8b8:	e7f4      	b.n	800c8a4 <__swbuf_r+0x64>
	...

0800c8bc <__swsetup_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4b2a      	ldr	r3, [pc, #168]	; (800c968 <__swsetup_r+0xac>)
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	b118      	cbz	r0, 800c8d0 <__swsetup_r+0x14>
 800c8c8:	6a03      	ldr	r3, [r0, #32]
 800c8ca:	b90b      	cbnz	r3, 800c8d0 <__swsetup_r+0x14>
 800c8cc:	f7fd ff18 	bl	800a700 <__sinit>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8d6:	0718      	lsls	r0, r3, #28
 800c8d8:	d422      	bmi.n	800c920 <__swsetup_r+0x64>
 800c8da:	06d9      	lsls	r1, r3, #27
 800c8dc:	d407      	bmi.n	800c8ee <__swsetup_r+0x32>
 800c8de:	2309      	movs	r3, #9
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ec:	e034      	b.n	800c958 <__swsetup_r+0x9c>
 800c8ee:	0758      	lsls	r0, r3, #29
 800c8f0:	d512      	bpl.n	800c918 <__swsetup_r+0x5c>
 800c8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8f4:	b141      	cbz	r1, 800c908 <__swsetup_r+0x4c>
 800c8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	d002      	beq.n	800c904 <__swsetup_r+0x48>
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7fe ff0c 	bl	800b71c <_free_r>
 800c904:	2300      	movs	r3, #0
 800c906:	6363      	str	r3, [r4, #52]	; 0x34
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	2300      	movs	r3, #0
 800c912:	6063      	str	r3, [r4, #4]
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	6023      	str	r3, [r4, #0]
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f043 0308 	orr.w	r3, r3, #8
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b94b      	cbnz	r3, 800c938 <__swsetup_r+0x7c>
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c92e:	d003      	beq.n	800c938 <__swsetup_r+0x7c>
 800c930:	4621      	mov	r1, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f884 	bl	800ca40 <__smakebuf_r>
 800c938:	89a0      	ldrh	r0, [r4, #12]
 800c93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c93e:	f010 0301 	ands.w	r3, r0, #1
 800c942:	d00a      	beq.n	800c95a <__swsetup_r+0x9e>
 800c944:	2300      	movs	r3, #0
 800c946:	60a3      	str	r3, [r4, #8]
 800c948:	6963      	ldr	r3, [r4, #20]
 800c94a:	425b      	negs	r3, r3
 800c94c:	61a3      	str	r3, [r4, #24]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	b943      	cbnz	r3, 800c964 <__swsetup_r+0xa8>
 800c952:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c956:	d1c4      	bne.n	800c8e2 <__swsetup_r+0x26>
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	0781      	lsls	r1, r0, #30
 800c95c:	bf58      	it	pl
 800c95e:	6963      	ldrpl	r3, [r4, #20]
 800c960:	60a3      	str	r3, [r4, #8]
 800c962:	e7f4      	b.n	800c94e <__swsetup_r+0x92>
 800c964:	2000      	movs	r0, #0
 800c966:	e7f7      	b.n	800c958 <__swsetup_r+0x9c>
 800c968:	2000007c 	.word	0x2000007c

0800c96c <_raise_r>:
 800c96c:	291f      	cmp	r1, #31
 800c96e:	b538      	push	{r3, r4, r5, lr}
 800c970:	4604      	mov	r4, r0
 800c972:	460d      	mov	r5, r1
 800c974:	d904      	bls.n	800c980 <_raise_r+0x14>
 800c976:	2316      	movs	r3, #22
 800c978:	6003      	str	r3, [r0, #0]
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c982:	b112      	cbz	r2, 800c98a <_raise_r+0x1e>
 800c984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c988:	b94b      	cbnz	r3, 800c99e <_raise_r+0x32>
 800c98a:	4620      	mov	r0, r4
 800c98c:	f000 f830 	bl	800c9f0 <_getpid_r>
 800c990:	462a      	mov	r2, r5
 800c992:	4601      	mov	r1, r0
 800c994:	4620      	mov	r0, r4
 800c996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c99a:	f000 b817 	b.w	800c9cc <_kill_r>
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d00a      	beq.n	800c9b8 <_raise_r+0x4c>
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	d103      	bne.n	800c9ae <_raise_r+0x42>
 800c9a6:	2316      	movs	r3, #22
 800c9a8:	6003      	str	r3, [r0, #0]
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	e7e7      	b.n	800c97e <_raise_r+0x12>
 800c9ae:	2400      	movs	r4, #0
 800c9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	4798      	blx	r3
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e7e0      	b.n	800c97e <_raise_r+0x12>

0800c9bc <raise>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	; (800c9c8 <raise+0xc>)
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f7ff bfd3 	b.w	800c96c <_raise_r>
 800c9c6:	bf00      	nop
 800c9c8:	2000007c 	.word	0x2000007c

0800c9cc <_kill_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	4d07      	ldr	r5, [pc, #28]	; (800c9ec <_kill_r+0x20>)
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	4608      	mov	r0, r1
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	f7f5 fa08 	bl	8001dee <_kill>
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	d102      	bne.n	800c9e8 <_kill_r+0x1c>
 800c9e2:	682b      	ldr	r3, [r5, #0]
 800c9e4:	b103      	cbz	r3, 800c9e8 <_kill_r+0x1c>
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20005300 	.word	0x20005300

0800c9f0 <_getpid_r>:
 800c9f0:	f7f5 b9f5 	b.w	8001dde <_getpid>

0800c9f4 <__swhatbuf_r>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	b096      	sub	sp, #88	; 0x58
 800ca00:	4615      	mov	r5, r2
 800ca02:	461e      	mov	r6, r3
 800ca04:	da0d      	bge.n	800ca22 <__swhatbuf_r+0x2e>
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca0c:	f04f 0100 	mov.w	r1, #0
 800ca10:	bf0c      	ite	eq
 800ca12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca16:	2340      	movne	r3, #64	; 0x40
 800ca18:	2000      	movs	r0, #0
 800ca1a:	6031      	str	r1, [r6, #0]
 800ca1c:	602b      	str	r3, [r5, #0]
 800ca1e:	b016      	add	sp, #88	; 0x58
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	466a      	mov	r2, sp
 800ca24:	f000 f848 	bl	800cab8 <_fstat_r>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	dbec      	blt.n	800ca06 <__swhatbuf_r+0x12>
 800ca2c:	9901      	ldr	r1, [sp, #4]
 800ca2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca36:	4259      	negs	r1, r3
 800ca38:	4159      	adcs	r1, r3
 800ca3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3e:	e7eb      	b.n	800ca18 <__swhatbuf_r+0x24>

0800ca40 <__smakebuf_r>:
 800ca40:	898b      	ldrh	r3, [r1, #12]
 800ca42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca44:	079d      	lsls	r5, r3, #30
 800ca46:	4606      	mov	r6, r0
 800ca48:	460c      	mov	r4, r1
 800ca4a:	d507      	bpl.n	800ca5c <__smakebuf_r+0x1c>
 800ca4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	6123      	str	r3, [r4, #16]
 800ca54:	2301      	movs	r3, #1
 800ca56:	6163      	str	r3, [r4, #20]
 800ca58:	b002      	add	sp, #8
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	ab01      	add	r3, sp, #4
 800ca5e:	466a      	mov	r2, sp
 800ca60:	f7ff ffc8 	bl	800c9f4 <__swhatbuf_r>
 800ca64:	9900      	ldr	r1, [sp, #0]
 800ca66:	4605      	mov	r5, r0
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7fe fecb 	bl	800b804 <_malloc_r>
 800ca6e:	b948      	cbnz	r0, 800ca84 <__smakebuf_r+0x44>
 800ca70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca74:	059a      	lsls	r2, r3, #22
 800ca76:	d4ef      	bmi.n	800ca58 <__smakebuf_r+0x18>
 800ca78:	f023 0303 	bic.w	r3, r3, #3
 800ca7c:	f043 0302 	orr.w	r3, r3, #2
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7e3      	b.n	800ca4c <__smakebuf_r+0xc>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	6020      	str	r0, [r4, #0]
 800ca88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca8c:	81a3      	strh	r3, [r4, #12]
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	6163      	str	r3, [r4, #20]
 800ca92:	9b01      	ldr	r3, [sp, #4]
 800ca94:	6120      	str	r0, [r4, #16]
 800ca96:	b15b      	cbz	r3, 800cab0 <__smakebuf_r+0x70>
 800ca98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f000 f81d 	bl	800cadc <_isatty_r>
 800caa2:	b128      	cbz	r0, 800cab0 <__smakebuf_r+0x70>
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	f043 0301 	orr.w	r3, r3, #1
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	431d      	orrs	r5, r3
 800cab4:	81a5      	strh	r5, [r4, #12]
 800cab6:	e7cf      	b.n	800ca58 <__smakebuf_r+0x18>

0800cab8 <_fstat_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d07      	ldr	r5, [pc, #28]	; (800cad8 <_fstat_r+0x20>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	4611      	mov	r1, r2
 800cac4:	602b      	str	r3, [r5, #0]
 800cac6:	f7f5 f9f1 	bl	8001eac <_fstat>
 800caca:	1c43      	adds	r3, r0, #1
 800cacc:	d102      	bne.n	800cad4 <_fstat_r+0x1c>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	b103      	cbz	r3, 800cad4 <_fstat_r+0x1c>
 800cad2:	6023      	str	r3, [r4, #0]
 800cad4:	bd38      	pop	{r3, r4, r5, pc}
 800cad6:	bf00      	nop
 800cad8:	20005300 	.word	0x20005300

0800cadc <_isatty_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d06      	ldr	r5, [pc, #24]	; (800caf8 <_isatty_r+0x1c>)
 800cae0:	2300      	movs	r3, #0
 800cae2:	4604      	mov	r4, r0
 800cae4:	4608      	mov	r0, r1
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	f7f5 f9f0 	bl	8001ecc <_isatty>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_isatty_r+0x1a>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_isatty_r+0x1a>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20005300 	.word	0x20005300
 800cafc:	00000000 	.word	0x00000000

0800cb00 <ceil>:
 800cb00:	ec51 0b10 	vmov	r0, r1, d0
 800cb04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cb10:	2e13      	cmp	r6, #19
 800cb12:	ee10 5a10 	vmov	r5, s0
 800cb16:	ee10 8a10 	vmov	r8, s0
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	dc2f      	bgt.n	800cb7e <ceil+0x7e>
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	da12      	bge.n	800cb48 <ceil+0x48>
 800cb22:	a333      	add	r3, pc, #204	; (adr r3, 800cbf0 <ceil+0xf0>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 fbb8 	bl	800029c <__adddf3>
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2300      	movs	r3, #0
 800cb30:	f7f3 fffa 	bl	8000b28 <__aeabi_dcmpgt>
 800cb34:	b128      	cbz	r0, 800cb42 <ceil+0x42>
 800cb36:	2c00      	cmp	r4, #0
 800cb38:	db51      	blt.n	800cbde <ceil+0xde>
 800cb3a:	432c      	orrs	r4, r5
 800cb3c:	d053      	beq.n	800cbe6 <ceil+0xe6>
 800cb3e:	4c2e      	ldr	r4, [pc, #184]	; (800cbf8 <ceil+0xf8>)
 800cb40:	2500      	movs	r5, #0
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	e024      	b.n	800cb92 <ceil+0x92>
 800cb48:	4f2c      	ldr	r7, [pc, #176]	; (800cbfc <ceil+0xfc>)
 800cb4a:	4137      	asrs	r7, r6
 800cb4c:	ea01 0307 	and.w	r3, r1, r7
 800cb50:	4303      	orrs	r3, r0
 800cb52:	d01e      	beq.n	800cb92 <ceil+0x92>
 800cb54:	a326      	add	r3, pc, #152	; (adr r3, 800cbf0 <ceil+0xf0>)
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	f7f3 fb9f 	bl	800029c <__adddf3>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2300      	movs	r3, #0
 800cb62:	f7f3 ffe1 	bl	8000b28 <__aeabi_dcmpgt>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d0eb      	beq.n	800cb42 <ceil+0x42>
 800cb6a:	2c00      	cmp	r4, #0
 800cb6c:	bfc2      	ittt	gt
 800cb6e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800cb72:	4133      	asrgt	r3, r6
 800cb74:	18e4      	addgt	r4, r4, r3
 800cb76:	ea24 0407 	bic.w	r4, r4, r7
 800cb7a:	2500      	movs	r5, #0
 800cb7c:	e7e1      	b.n	800cb42 <ceil+0x42>
 800cb7e:	2e33      	cmp	r6, #51	; 0x33
 800cb80:	dd0b      	ble.n	800cb9a <ceil+0x9a>
 800cb82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cb86:	d104      	bne.n	800cb92 <ceil+0x92>
 800cb88:	ee10 2a10 	vmov	r2, s0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	f7f3 fb85 	bl	800029c <__adddf3>
 800cb92:	ec41 0b10 	vmov	d0, r0, r1
 800cb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800cb9e:	f04f 37ff 	mov.w	r7, #4294967295
 800cba2:	40df      	lsrs	r7, r3
 800cba4:	4238      	tst	r0, r7
 800cba6:	d0f4      	beq.n	800cb92 <ceil+0x92>
 800cba8:	a311      	add	r3, pc, #68	; (adr r3, 800cbf0 <ceil+0xf0>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fb75 	bl	800029c <__adddf3>
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f7f3 ffb7 	bl	8000b28 <__aeabi_dcmpgt>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d0c1      	beq.n	800cb42 <ceil+0x42>
 800cbbe:	2c00      	cmp	r4, #0
 800cbc0:	dd0a      	ble.n	800cbd8 <ceil+0xd8>
 800cbc2:	2e14      	cmp	r6, #20
 800cbc4:	d101      	bne.n	800cbca <ceil+0xca>
 800cbc6:	3401      	adds	r4, #1
 800cbc8:	e006      	b.n	800cbd8 <ceil+0xd8>
 800cbca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cbce:	2301      	movs	r3, #1
 800cbd0:	40b3      	lsls	r3, r6
 800cbd2:	441d      	add	r5, r3
 800cbd4:	45a8      	cmp	r8, r5
 800cbd6:	d8f6      	bhi.n	800cbc6 <ceil+0xc6>
 800cbd8:	ea25 0507 	bic.w	r5, r5, r7
 800cbdc:	e7b1      	b.n	800cb42 <ceil+0x42>
 800cbde:	2500      	movs	r5, #0
 800cbe0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cbe4:	e7ad      	b.n	800cb42 <ceil+0x42>
 800cbe6:	4625      	mov	r5, r4
 800cbe8:	e7ab      	b.n	800cb42 <ceil+0x42>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	8800759c 	.word	0x8800759c
 800cbf4:	7e37e43c 	.word	0x7e37e43c
 800cbf8:	3ff00000 	.word	0x3ff00000
 800cbfc:	000fffff 	.word	0x000fffff

0800cc00 <_init>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_fini>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr
